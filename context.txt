--- File Path ---
frontend/vite.config.ts

import tailwindcss from '@tailwindcss/vite';
import { sveltekit } from '@sveltejs/kit/vite';
import { defineConfig } from 'vite';

export default defineConfig({
	plugins: [sveltekit(), tailwindcss()]
});

--- End of File ---

--- File Path ---
frontend/tailwind.config.js

import { fontFamily } from "tailwindcss/defaultTheme";
import tailwindcssAnimate from "tailwindcss-animate";

/** @type {import('tailwindcss').Config} */
const config = {
	darkMode: ["class"],
	content: ["./src/**/*.{html,js,svelte,ts}"],
	safelist: ["dark"],
	theme: {
		container: {
			center: true,
			padding: "2rem",
			screens: {
				"2xl": "1400px"
			}
		},
		extend: {
			colors: {
				border: "hsl(var(--border) / <alpha-value>)",
				input: "hsl(var(--input) / <alpha-value>)",
				ring: "hsl(var(--ring) / <alpha-value>)",
				background: "hsl(var(--background) / <alpha-value>)",
				foreground: "hsl(var(--foreground) / <alpha-value>)",
				primary: {
					DEFAULT: "hsl(var(--primary) / <alpha-value>)",
					foreground: "hsl(var(--primary-foreground) / <alpha-value>)"
				},
				secondary: {
					DEFAULT: "hsl(var(--secondary) / <alpha-value>)",
					foreground: "hsl(var(--secondary-foreground) / <alpha-value>)"
				},
				destructive: {
					DEFAULT: "hsl(var(--destructive) / <alpha-value>)",
					foreground: "hsl(var(--destructive-foreground) / <alpha-value>)"
				},
				muted: {
					DEFAULT: "hsl(var(--muted) / <alpha-value>)",
					foreground: "hsl(var(--muted-foreground) / <alpha-value>)"
				},
				accent: {
					DEFAULT: "hsl(var(--accent) / <alpha-value>)",
					foreground: "hsl(var(--accent-foreground) / <alpha-value>)"
				},
				popover: {
					DEFAULT: "hsl(var(--popover) / <alpha-value>)",
					foreground: "hsl(var(--popover-foreground) / <alpha-value>)"
				},
				card: {
					DEFAULT: "hsl(var(--card) / <alpha-value>)",
					foreground: "hsl(var(--card-foreground) / <alpha-value>)"
				},
				sidebar: {
					DEFAULT: "hsl(var(--sidebar-background))",
					foreground: "hsl(var(--sidebar-foreground))",
					primary: "hsl(var(--sidebar-primary))",
					"primary-foreground": "hsl(var(--sidebar-primary-foreground))",
					accent: "hsl(var(--sidebar-accent))",
					"accent-foreground": "hsl(var(--sidebar-accent-foreground))",
					border: "hsl(var(--sidebar-border))",
					ring: "hsl(var(--sidebar-ring))",
        		},
			},
			borderRadius: {
				xl: "calc(var(--radius) + 4px)",
				lg: "var(--radius)",
				md: "calc(var(--radius) - 2px)",
				sm: "calc(var(--radius) - 4px)"
			},
			fontFamily: {
				sans: [...fontFamily.sans]
			},
			keyframes: {
				"accordion-down": {
					from: { height: "0" },
					to: { height: "var(--bits-accordion-content-height)" },
				},
				"accordion-up": {
					from: { height: "var(--bits-accordion-content-height)" },
					to: { height: "0" },
				},
				"caret-blink": {
					"0%,70%,100%": { opacity: "1" },
					"20%,50%": { opacity: "0" },
				},
			},
			animation: {
        		"accordion-down": "accordion-down 0.2s ease-out",
        		"accordion-up": "accordion-up 0.2s ease-out",
       			"caret-blink": "caret-blink 1.25s ease-out infinite",
      		},
		},
	},
	plugins: [tailwindcssAnimate],
};

export default config;

--- End of File ---

--- File Path ---
frontend/components.json

{
	"$schema": "https://next.shadcn-svelte.com/schema.json",
	"style": "default",
	"tailwind": {
		"config": "tailwind.config.js",
		"css": "src/app.css",
		"baseColor": "slate"
	},
	"aliases": {
		"components": "$lib/components",
		"utils": "$lib/utils",
		"ui": "$lib/components/ui",
		"hooks": "$lib/hooks"
	},
	"typescript": true,
	"registry": "https://next.shadcn-svelte.com/registry"
}

--- End of File ---

--- File Path ---
frontend/.npmrc

engine-strict=true

--- End of File ---

--- File Path ---
frontend/.prettierrc

{
	"useTabs": true,
	"singleQuote": true,
	"trailingComma": "none",
	"printWidth": 100,
	"plugins": ["prettier-plugin-svelte", "prettier-plugin-tailwindcss"],
	"overrides": [
		{
			"files": "*.svelte",
			"options": {
				"parser": "svelte"
			}
		}
	]
}

--- End of File ---

--- File Path ---
frontend/tsconfig.json

{
	"extends": "./.svelte-kit/tsconfig.json",
	"compilerOptions": {
		"allowJs": true,
		"checkJs": true,
		"esModuleInterop": true,
		"forceConsistentCasingInFileNames": true,
		"resolveJsonModule": true,
		"skipLibCheck": true,
		"sourceMap": true,
		"strict": true,
		"moduleResolution": "bundler"
	}
	// Path aliases are handled by https://svelte.dev/docs/kit/configuration#alias
	// except $lib which is handled by https://svelte.dev/docs/kit/configuration#files
	//
	// If you want to overwrite includes/excludes, make sure to copy over the relevant includes/excludes
	// from the referenced tsconfig.json - TypeScript does not merge them in
}

--- End of File ---

--- File Path ---
frontend/README.md

# sv

Everything you need to build a Svelte project, powered by [`sv`](https://github.com/sveltejs/cli).

## Creating a project

If you're seeing this, you've probably already done this step. Congrats!

```bash
# create a new project in the current directory
npx sv create

# create a new project in my-app
npx sv create my-app
```

## Developing

Once you've created a project and installed dependencies with `npm install` (or `pnpm install` or `yarn`), start a development server:

```bash
npm run dev

# or start the server and open the app in a new browser tab
npm run dev -- --open
```

## Building

To create a production version of your app:

```bash
npm run build
```

You can preview the production build with `npm run preview`.

> To deploy your app, you may need to install an [adapter](https://svelte.dev/docs/kit/adapters) for your target environment.

--- End of File ---

--- File Path ---
frontend/svelte.config.js

import adapter from '@sveltejs/adapter-auto';
import { vitePreprocess } from '@sveltejs/vite-plugin-svelte';

/** @type {import('@sveltejs/kit').Config} */
const config = {
	// Consult https://svelte.dev/docs/kit/integrations
	// for more information about preprocessors
	preprocess: vitePreprocess(),

	kit: {
		// adapter-auto only supports some environments, see https://svelte.dev/docs/kit/adapter-auto for a list.
		// If your environment is not supported, or you settled on a specific environment, switch out the adapter.
		// See https://svelte.dev/docs/kit/adapters for more information about adapters.
		adapter: adapter()
	}
};

export default config;

--- End of File ---

--- File Path ---
frontend/.prettierignore

# Package Managers
package-lock.json
pnpm-lock.yaml
yarn.lock

--- End of File ---

--- File Path ---
frontend/src/app.d.ts

import type { Session, SupabaseClient, User } from '@supabase/supabase-js'

declare global {
  namespace App {
    // interface Error {}
    interface Locals {
      supabase: SupabaseClient
      safeGetSession: () => Promise<{ session: Session | null; user: User | null }>
      session: Session | null
      user: User | null
    }
    interface PageData {
      session: Session | null
    }
    // interface PageState {}
    // interface Platform {}
  }
}

declare module '*.svelte' {
  const component: any;
  export default component;
}

export {}
--- End of File ---

--- File Path ---
frontend/src/lib/auth.js

// /lib/auth.js
import { supabase } from '$lib/supabase';

export async function syncSession() {
  const { data: sessionData, error } = await supabase.auth.getSession();
  if (error) {
    console.error('Error getting session client-side:', error);
    return null;
  }

  if (!sessionData?.session) {
    console.log('No session found client-side, attempting to refresh');
    const { data: refreshedSession, error: refreshError } = await supabase.auth.refreshSession();
    if (refreshError || !refreshedSession?.session) {
      console.error('Error refreshing session client-side:', refreshError);
      return null;
    }
    return refreshedSession.session;
  }

  return sessionData.session;
}

export async function getUserProfile(userId) {
  const { data: profile, error } = await supabase
    .from('user_profiles')
    .select('id, first_name, last_name, notification_frequency, disciplines, date_of_birth, status, specialty')
    .eq('id', userId)
    .single();

  if (error) {
    console.error('Error fetching user profile:', error);
    return null;
  }

  return profile;
}
--- End of File ---

--- File Path ---
frontend/src/lib/supabase.js

import { createClient } from '@supabase/supabase-js';

const supabaseUrl = 'https://etxelhjnqbrgwuitltyk.supabase.co';
const supabaseKey =
	'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImV0eGVsaGpucWJyZ3d1aXRsdHlrIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDA2OTE5NzAsImV4cCI6MjA1NjI2Nzk3MH0.EvaK9bCSYaBVaVOIgakKTAVoM8UrDYg2HX7Z-iyWoD4';
export const supabase = createClient(supabaseUrl, supabaseKey, {
	auth: {
		persistSession: true,
		autoRefreshToken: true,
		detectSessionInUrl: true
	}
});

--- End of File ---

--- File Path ---
frontend/src/lib/i18n.js

import i18nData from '../i18n.json';
import { readable } from 'svelte/store';
export const i18n = readable(i18nData.fr);
--- End of File ---

--- File Path ---
frontend/src/lib/hooks/is-mobile.svelte.ts

import { MediaQuery } from "svelte/reactivity";

const MOBILE_BREAKPOINT = 768;

export class IsMobile extends MediaQuery {
	constructor() {
		super(`max-width: ${MOBILE_BREAKPOINT - 1}px`);
	}
}

--- End of File ---

--- File Path ---
frontend/src/lib/components/ui/input/input.svelte

<script lang="ts">
	import type { HTMLInputAttributes, HTMLInputTypeAttribute } from "svelte/elements";
	import type { WithElementRef } from "bits-ui";
	import { cn } from "$lib/utils.js";

	type InputType = Exclude<HTMLInputTypeAttribute, "file">;

	type Props = WithElementRef<
		Omit<HTMLInputAttributes, "type"> &
			({ type: "file"; files?: FileList } | { type?: InputType; files?: undefined })
	>;

	let {
		ref = $bindable(null),
		value = $bindable(),
		type,
		files = $bindable(),
		class: className,
		...restProps
	}: Props = $props();
</script>

{#if type === "file"}
	<input
		bind:this={ref}
		class={cn(
			"border-input bg-background ring-offset-background placeholder:text-muted-foreground focus-visible:ring-ring flex h-10 w-full rounded-md border px-3 py-2 text-base file:border-0 file:bg-transparent file:text-sm file:font-medium focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
			className
		)}
		type="file"
		bind:files
		bind:value
		{...restProps}
	/>
{:else}
	<input
		bind:this={ref}
		class={cn(
			"border-input bg-background ring-offset-background placeholder:text-muted-foreground focus-visible:ring-ring flex h-10 w-full rounded-md border px-3 py-2 text-base file:border-0 file:bg-transparent file:text-sm file:font-medium focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
			className
		)}
		{type}
		bind:value
		{...restProps}
	/>
{/if}

--- End of File ---

--- File Path ---
frontend/src/lib/components/ui/input/index.ts

import Root from "./input.svelte";

export {
	Root,
	//
	Root as Input,
};

--- End of File ---

--- File Path ---
frontend/src/lib/components/ui/ConfirmationModal.svelte

<!-- src/lib/components/ui/ConfirmationModal.svelte -->
<script lang="ts">
	import { createEventDispatcher, tick } from 'svelte';
	import { fly } from 'svelte/transition';

	// Props
	const {
		isOpen = false,
		title = 'Confirmer',
		message = 'Êtes-vous sûr de vouloir continuer ?',
		confirmText = 'Confirmer',
		cancelText = 'Annuler',
		confirmColor = 'bg-red-600 hover:bg-red-700 focus-visible:ring-red-500', // Default to red for destructive actions
		cancelColor = 'bg-gray-600 hover:bg-gray-700 focus-visible:ring-gray-500'
	} = $props<{
		isOpen?: boolean;
		title?: string;
		message?: string;
		confirmText?: string;
		cancelText?: string;
		confirmColor?: string; // Allow customizing confirm button color
		cancelColor?: string;
	}>();

	const dispatch = createEventDispatcher<{ confirm: void; cancel: void }>();

	let modalElement: HTMLElement | null = null;

	function handleConfirm() {
		dispatch('confirm');
	}

	function handleCancel() {
		dispatch('cancel');
	}

	function handleKeydown(event: KeyboardEvent) {
		if (event.key === 'Escape') {
			handleCancel();
		}
		// Basic focus trapping (can be enhanced)
		if (event.key === 'Tab' && modalElement) {
			const focusableElements = modalElement.querySelectorAll<HTMLElement>(
				'button, [href], input, select, textarea, [tabindex]:not([tabindex="-1"])'
			);
			const firstElement = focusableElements[0];
			const lastElement = focusableElements[focusableElements.length - 1];

			if (event.shiftKey) { // Shift + Tab
				if (document.activeElement === firstElement) {
					lastElement.focus();
					event.preventDefault();
				}
			} else { // Tab
				if (document.activeElement === lastElement) {
					firstElement.focus();
					event.preventDefault();
				}
			}
		}
	}

	// Focus the first button when the modal opens
	$effect(() => {
		if (isOpen && modalElement) {
			const firstButton = modalElement.querySelector<HTMLButtonElement>('button.confirm-button'); // Target confirm button first
			if (firstButton) {
				 void tick().then(() => firstButton.focus()); // Wait for render then focus
			}
		}
	});

</script>

{#if isOpen}
	<!-- svelte-ignore a11y-no-static-element-interactions a11y-click-events-have-key-events -->
	<div
		class="fixed inset-0 z-[250] flex items-center justify-center bg-black/70 backdrop-blur-sm"
		on:click|self={handleCancel}
		on:keydown={handleKeydown}
		role="alertdialog"
		aria-modal="true"
		aria-labelledby="confirm-modal-title"
		aria-describedby="confirm-modal-message"
		transition:fly={{ y: -20, duration: 200 }}
	>
		<div
			bind:this={modalElement}
			class="relative w-full max-w-md rounded-xl bg-gray-800 shadow-2xl p-6 mx-4"
		>
			<h2 id="confirm-modal-title" class="text-lg font-semibold text-white mb-3">
				{title}
			</h2>

			<p id="confirm-modal-message" class="text-sm text-gray-300 mb-6">
				{@html message}
			</p>

			<div class="flex justify-end space-x-3">
				<button
					type="button"
					on:click={handleCancel}
					class="cancel-button px-4 py-2 rounded-md text-sm font-medium text-white {cancelColor} transition-colors duration-150 focus:outline-none focus-visible:ring-2 focus-visible:ring-offset-2 focus-visible:ring-offset-gray-800"
				>
					{cancelText}
				</button>
				<button
					type="button"
					on:click={handleConfirm}
					class="confirm-button px-4 py-2 rounded-md text-sm font-medium text-white {confirmColor} transition-colors duration-150 focus:outline-none focus-visible:ring-2 focus-visible:ring-offset-2 focus-visible:ring-offset-gray-800"
				>
					{confirmText}
				</button>
			</div>
		</div>
	</div>
{/if}
--- End of File ---

--- File Path ---
frontend/src/lib/components/ui/skeleton/skeleton.svelte

<script lang="ts">
	import type { WithElementRef, WithoutChildren } from "bits-ui";
	import type { HTMLAttributes } from "svelte/elements";
	import { cn } from "$lib/utils.js";

	let {
		ref = $bindable(null),
		class: className,
		...restProps
	}: WithoutChildren<WithElementRef<HTMLAttributes<HTMLDivElement>>> = $props();
</script>

<div
	bind:this={ref}
	class={cn("bg-muted animate-pulse rounded-md", className)}
	{...restProps}
></div>

--- End of File ---

--- File Path ---
frontend/src/lib/components/ui/skeleton/index.ts

import Root from "./skeleton.svelte";

export {
	Root,
	//
	Root as Skeleton,
};

--- End of File ---

--- File Path ---
frontend/src/lib/components/ui/button/index.ts

import Root, {
	type ButtonProps,
	type ButtonSize,
	type ButtonVariant,
	buttonVariants,
} from "./button.svelte";

export {
	Root,
	type ButtonProps as Props,
	//
	Root as Button,
	buttonVariants,
	type ButtonProps,
	type ButtonSize,
	type ButtonVariant,
};

--- End of File ---

--- File Path ---
frontend/src/lib/components/ui/button/button.svelte

<script lang="ts" module>
	import type { WithElementRef } from "bits-ui";
	import type { HTMLAnchorAttributes, HTMLButtonAttributes } from "svelte/elements";
	import { type VariantProps, tv } from "tailwind-variants";

	export const buttonVariants = tv({
		base: "ring-offset-background focus-visible:ring-ring inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
		variants: {
			variant: {
				default: "bg-primary text-primary-foreground hover:bg-primary/90",
				destructive: "bg-destructive text-destructive-foreground hover:bg-destructive/90",
				outline:
					"border-input bg-background hover:bg-accent hover:text-accent-foreground border",
				secondary: "bg-secondary text-secondary-foreground hover:bg-secondary/80",
				ghost: "hover:bg-accent hover:text-accent-foreground",
				link: "text-primary underline-offset-4 hover:underline",
			},
			size: {
				default: "h-10 px-4 py-2",
				sm: "h-9 rounded-md px-3",
				lg: "h-11 rounded-md px-8",
				icon: "h-10 w-10",
			},
		},
		defaultVariants: {
			variant: "default",
			size: "default",
		},
	});

	export type ButtonVariant = VariantProps<typeof buttonVariants>["variant"];
	export type ButtonSize = VariantProps<typeof buttonVariants>["size"];

	export type ButtonProps = WithElementRef<HTMLButtonAttributes> &
		WithElementRef<HTMLAnchorAttributes> & {
			variant?: ButtonVariant;
			size?: ButtonSize;
		};
</script>

<script lang="ts">
	import { cn } from "$lib/utils.js";

	let {
		class: className,
		variant = "default",
		size = "default",
		ref = $bindable(null),
		href = undefined,
		type = "button",
		children,
		...restProps
	}: ButtonProps = $props();
</script>

{#if href}
	<a
		bind:this={ref}
		class={cn(buttonVariants({ variant, size }), className)}
		{href}
		{...restProps}
	>
		{@render children?.()}
	</a>
{:else}
	<button
		bind:this={ref}
		class={cn(buttonVariants({ variant, size }), className)}
		{type}
		{...restProps}
	>
		{@render children?.()}
	</button>
{/if}

--- End of File ---

--- File Path ---
frontend/src/lib/components/ui/sheet/sheet-footer.svelte

<script lang="ts">
	import type { WithElementRef } from "bits-ui";
	import type { HTMLAttributes } from "svelte/elements";
	import { cn } from "$lib/utils.js";

	let {
		ref = $bindable(null),
		class: className,
		children,
		...restProps
	}: WithElementRef<HTMLAttributes<HTMLDivElement>> = $props();
</script>

<div
	bind:this={ref}
	class={cn("flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2", className)}
	{...restProps}
>
	{@render children?.()}
</div>

--- End of File ---

--- File Path ---
frontend/src/lib/components/ui/sheet/sheet-content.svelte

<script lang="ts" module>
	import { tv, type VariantProps } from "tailwind-variants";
	export const sheetVariants = tv({
		base: "bg-background data-[state=open]:animate-in data-[state=closed]:animate-out fixed z-50 gap-4 p-6 shadow-lg transition ease-in-out data-[state=closed]:duration-300 data-[state=open]:duration-500",
		variants: {
			side: {
				top: "data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top inset-x-0 top-0 border-b",
				bottom: "data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom inset-x-0 bottom-0 border-t",
				left: "data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left inset-y-0 left-0 h-full w-3/4 border-r sm:max-w-sm",
				right: "data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right inset-y-0 right-0 h-full w-3/4 border-l sm:max-w-sm",
			},
		},
		defaultVariants: {
			side: "right",
		},
	});

	export type Side = VariantProps<typeof sheetVariants>["side"];
</script>

<script lang="ts">
	import { Dialog as SheetPrimitive, type WithoutChildrenOrChild } from "bits-ui";
	import X from "@lucide/svelte/icons/x";
	import type { Snippet } from "svelte";
	import SheetOverlay from "./sheet-overlay.svelte";
	import { cn } from "$lib/utils.js";

	let {
		ref = $bindable(null),
		class: className,
		side = "right",
		portalProps,
		children,
		...restProps
	}: WithoutChildrenOrChild<SheetPrimitive.ContentProps> & {
		portalProps?: SheetPrimitive.PortalProps;
		side?: Side;
		children: Snippet;
	} = $props();
</script>

<SheetPrimitive.Portal {...portalProps}>
	<SheetOverlay />
	<SheetPrimitive.Content bind:ref class={cn(sheetVariants({ side }), className)} {...restProps}>
		{@render children?.()}
		<SheetPrimitive.Close
			class="ring-offset-background focus:ring-ring data-[state=open]:bg-secondary absolute right-4 top-4 rounded-sm opacity-70 transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-offset-2 disabled:pointer-events-none"
		>
			<X class="size-4" />
			<span class="sr-only">Close</span>
		</SheetPrimitive.Close>
	</SheetPrimitive.Content>
</SheetPrimitive.Portal>

--- End of File ---

--- File Path ---
frontend/src/lib/components/ui/sheet/sheet-header.svelte

<script lang="ts">
	import type { HTMLAttributes } from "svelte/elements";
	import type { WithElementRef } from "bits-ui";
	import { cn } from "$lib/utils.js";

	let {
		ref = $bindable(null),
		class: className,
		children,
		...restProps
	}: WithElementRef<HTMLAttributes<HTMLDivElement>> = $props();
</script>

<div
	bind:this={ref}
	class={cn("flex flex-col space-y-2 text-center sm:text-left", className)}
	{...restProps}
>
	{@render children?.()}
</div>

--- End of File ---

--- File Path ---
frontend/src/lib/components/ui/sheet/sheet-title.svelte

<script lang="ts">
	import { Dialog as SheetPrimitive } from "bits-ui";
	import { cn } from "$lib/utils.js";

	let {
		ref = $bindable(null),
		class: className,
		...restProps
	}: SheetPrimitive.TitleProps = $props();
</script>

<SheetPrimitive.Title
	bind:ref
	class={cn("text-foreground text-lg font-semibold", className)}
	{...restProps}
/>

--- End of File ---

--- File Path ---
frontend/src/lib/components/ui/sheet/sheet-description.svelte

<script lang="ts">
	import { Dialog as SheetPrimitive } from "bits-ui";
	import { cn } from "$lib/utils.js";

	let {
		ref = $bindable(null),
		class: className,
		...restProps
	}: SheetPrimitive.DescriptionProps = $props();
</script>

<SheetPrimitive.Description
	bind:ref
	class={cn("text-muted-foreground text-sm", className)}
	{...restProps}
/>

--- End of File ---

--- File Path ---
frontend/src/lib/components/ui/sheet/sheet-overlay.svelte

<script lang="ts">
	import { Dialog as SheetPrimitive } from "bits-ui";
	import { cn } from "$lib/utils.js";

	let {
		ref = $bindable(null),
		class: className,
		...restProps
	}: SheetPrimitive.OverlayProps = $props();

	export { className as class };
</script>

<SheetPrimitive.Overlay
	bind:ref
	class={cn(
		"data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0  fixed inset-0 z-50 bg-black/80",
		className
	)}
	{...restProps}
/>

--- End of File ---

--- File Path ---
frontend/src/lib/components/ui/sheet/index.ts

import { Dialog as SheetPrimitive } from "bits-ui";
import Overlay from "./sheet-overlay.svelte";
import Content from "./sheet-content.svelte";
import Header from "./sheet-header.svelte";
import Footer from "./sheet-footer.svelte";
import Title from "./sheet-title.svelte";
import Description from "./sheet-description.svelte";

const Root = SheetPrimitive.Root;
const Close = SheetPrimitive.Close;
const Trigger = SheetPrimitive.Trigger;
const Portal = SheetPrimitive.Portal;

export {
	Root,
	Close,
	Trigger,
	Portal,
	Overlay,
	Content,
	Header,
	Footer,
	Title,
	Description,
	//
	Root as Sheet,
	Close as SheetClose,
	Trigger as SheetTrigger,
	Portal as SheetPortal,
	Overlay as SheetOverlay,
	Content as SheetContent,
	Header as SheetHeader,
	Footer as SheetFooter,
	Title as SheetTitle,
	Description as SheetDescription,
};

--- End of File ---

--- File Path ---
frontend/src/lib/components/ui/select/select-group-heading.svelte

<script lang="ts">
	import { Select as SelectPrimitive } from "bits-ui";
	import { cn } from "$lib/utils.js";

	let {
		ref = $bindable(null),
		class: className,
		...restProps
	}: SelectPrimitive.GroupHeadingProps = $props();
</script>

<SelectPrimitive.GroupHeading
	bind:ref
	class={cn("py-1.5 pl-8 pr-2 text-sm font-semibold", className)}
	{...restProps}
/>

--- End of File ---

--- File Path ---
frontend/src/lib/components/ui/select/select-scroll-down-button.svelte

<script lang="ts">
	import { ChevronDown } from 'lucide-svelte';
	import { Select as SelectPrimitive, type WithoutChildrenOrChild } from 'bits-ui';
	import { cn } from '$lib/utils.js';

	let {
		ref = $bindable(null),
		class: className,
		...restProps
	}: WithoutChildrenOrChild<SelectPrimitive.ScrollDownButtonProps> = $props();
</script>

<SelectPrimitive.ScrollDownButton
	bind:ref
	class={cn('flex cursor-default items-center justify-center py-1', className)}
	{...restProps}
>
	<ChevronDown class="size-4" />
</SelectPrimitive.ScrollDownButton>

--- End of File ---

--- File Path ---
frontend/src/lib/components/ui/select/select-scroll-up-button.svelte

<script lang="ts">
	import { ChevronUp } from "lucide-svelte";
	import { Select as SelectPrimitive, type WithoutChildrenOrChild } from "bits-ui";
	import { cn } from "$lib/utils.js";

	let {
		ref = $bindable(null),
		class: className,
		...restProps
	}: WithoutChildrenOrChild<SelectPrimitive.ScrollUpButtonProps> = $props();
</script>

<SelectPrimitive.ScrollUpButton
	bind:ref
	class={cn("flex cursor-default items-center justify-center py-1", className)}
	{...restProps}
>
	<ChevronUp class="size-4" />
</SelectPrimitive.ScrollUpButton>

--- End of File ---

--- File Path ---
frontend/src/lib/components/ui/select/select-separator.svelte

<script lang="ts">
	import type { Separator as SeparatorPrimitive } from "bits-ui";
	import { Separator } from "$lib/components/ui/separator/index.js";
	import { cn } from "$lib/utils.js";

	let {
		ref = $bindable(null),
		class: className,
		...restProps
	}: SeparatorPrimitive.RootProps = $props();
</script>

<Separator bind:ref class={cn("bg-muted -mx-1 my-1 h-px", className)} {...restProps} />

--- End of File ---

--- File Path ---
frontend/src/lib/components/ui/select/select-content.svelte

<script lang="ts">
	import { Select as SelectPrimitive, type WithoutChild } from "bits-ui";
	import SelectScrollUpButton from "./select-scroll-up-button.svelte";
	import SelectScrollDownButton from "./select-scroll-down-button.svelte";
	import { cn } from "$lib/utils.js";

	let {
		ref = $bindable(null),
		class: className,
		sideOffset = 4,
		portalProps,
		children,
		...restProps
	}: WithoutChild<SelectPrimitive.ContentProps> & {
		portalProps?: SelectPrimitive.PortalProps;
	} = $props();
</script>

<SelectPrimitive.Portal {...portalProps}>
	<SelectPrimitive.Content
		bind:ref
		{sideOffset}
		class={cn(
			"data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 bg-popover text-popover-foreground relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border shadow-md data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1",
			className
		)}
		{...restProps}
	>
		<SelectScrollUpButton />
		<SelectPrimitive.Viewport
			class={cn(
				"h-[var(--bits-select-anchor-height)] w-full min-w-[var(--bits-select-anchor-width)] p-1"
			)}
		>
			{@render children?.()}
		</SelectPrimitive.Viewport>
		<SelectScrollDownButton />
	</SelectPrimitive.Content>
</SelectPrimitive.Portal>

--- End of File ---

--- File Path ---
frontend/src/lib/components/ui/select/select-trigger.svelte

<script lang="ts">
	import { Select as SelectPrimitive, type WithoutChild } from "bits-ui";
	import ChevronDown from "lucide-svelte/icons/chevron-down";
	import { cn } from "$lib/utils.js";

	let {
		ref = $bindable(null),
		class: className,
		children,
		...restProps
	}: WithoutChild<SelectPrimitive.TriggerProps> = $props();
</script>

<SelectPrimitive.Trigger
	bind:ref
	class={cn(
		"border-input bg-background ring-offset-background data-[placeholder]:text-muted-foreground focus:ring-ring flex h-10 w-full items-center justify-between rounded-md border px-3 py-2 text-sm focus:outline-none focus:ring-2 focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1",
		className
	)}
	{...restProps}
>
	{@render children?.()}
	<ChevronDown class="size-4 opacity-50" />
</SelectPrimitive.Trigger>

--- End of File ---

--- File Path ---
frontend/src/lib/components/ui/select/select-item.svelte

<script lang="ts">
	import { Check } from 'lucide-svelte';
	import { Select as SelectPrimitive, type WithoutChild } from 'bits-ui';
	import { cn } from '$lib/utils.js';

	let {
		ref = $bindable(null),
		class: className,
		value,
		label,
		children: childrenProp,
		...restProps
	}: WithoutChild<SelectPrimitive.ItemProps> = $props();
</script>

<SelectPrimitive.Item
	bind:ref
	{value}
	class={cn(
		'data-[highlighted]:bg-accent data-[highlighted]:text-accent-foreground relative flex w-full cursor-default items-center rounded-sm py-1.5 pr-2 pl-8 text-sm outline-none select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50',
		className
	)}
	{...restProps}
>
	{#snippet children({ selected, highlighted })}
		<span class="absolute left-2 flex size-3.5 items-center justify-center">
			{#if selected}
				<Check class="size-4" />
			{/if}
		</span>
		<p class="ml-4">
			{#if childrenProp}
				{@render childrenProp({ selected, highlighted })}
			{:else}
				{label || value}
			{/if}
		</p>
	{/snippet}
</SelectPrimitive.Item>

--- End of File ---

--- File Path ---
frontend/src/lib/components/ui/select/index.ts

import { Select as SelectPrimitive } from "bits-ui";

import GroupHeading from "./select-group-heading.svelte";
import Item from "./select-item.svelte";
import Content from "./select-content.svelte";
import Trigger from "./select-trigger.svelte";
import Separator from "./select-separator.svelte";
import ScrollDownButton from "./select-scroll-down-button.svelte";
import ScrollUpButton from "./select-scroll-up-button.svelte";

const Root = SelectPrimitive.Root;
const Group = SelectPrimitive.Group;

export {
	Root,
	Group,
	GroupHeading,
	Item,
	Content,
	Trigger,
	Separator,
	ScrollDownButton,
	ScrollUpButton,
	//
	Root as Select,
	Group as SelectGroup,
	GroupHeading as SelectGroupHeading,
	Item as SelectItem,
	Content as SelectContent,
	Trigger as SelectTrigger,
	Separator as SelectSeparator,
	ScrollDownButton as SelectScrollDownButton,
	ScrollUpButton as SelectScrollUpButton,
};

--- End of File ---

--- File Path ---
frontend/src/lib/components/ui/sidebar/sidebar-content.svelte

<script lang="ts">
	import type { HTMLAttributes } from "svelte/elements";
	import type { WithElementRef } from "bits-ui";
	import { cn } from "$lib/utils.js";

	let {
		ref = $bindable(null),
		class: className,
		children,
		...restProps
	}: WithElementRef<HTMLAttributes<HTMLElement>> = $props();
</script>

<div
	bind:this={ref}
	data-sidebar="content"
	class={cn(
		"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden",
		className
	)}
	{...restProps}
>
	{@render children?.()}
</div>

--- End of File ---

--- File Path ---
frontend/src/lib/components/ui/sidebar/sidebar-header.svelte

<script lang="ts">
	import type { HTMLAttributes } from "svelte/elements";
	import type { WithElementRef } from "bits-ui";
	import { cn } from "$lib/utils.js";

	let {
		ref = $bindable(null),
		class: className,
		children,
		...restProps
	}: WithElementRef<HTMLAttributes<HTMLElement>> = $props();
</script>

<div
	bind:this={ref}
	data-sidebar="header"
	class={cn("flex flex-col gap-2 p-2", className)}
	{...restProps}
>
	{@render children?.()}
</div>

--- End of File ---

--- File Path ---
frontend/src/lib/components/ui/sidebar/sidebar-inset.svelte

<script lang="ts">
	import { cn } from "$lib/utils.js";
	import type { WithElementRef } from "bits-ui";
	import type { HTMLAttributes } from "svelte/elements";

	let {
		ref = $bindable(null),
		class: className,
		children,
		...restProps
	}: WithElementRef<HTMLAttributes<HTMLElement>> = $props();
</script>

<main
	bind:this={ref}
	class={cn(
		"bg-background relative flex min-h-svh flex-1 flex-col",
		"peer-data-[variant=inset]:min-h-[calc(100svh-theme(spacing.4))] md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow",
		className
	)}
	{...restProps}
>
	{@render children?.()}
</main>

--- End of File ---

--- File Path ---
frontend/src/lib/components/ui/sidebar/sidebar-menu-skeleton.svelte

<script lang="ts">
	import { Skeleton } from "$lib/components/ui/skeleton/index.js";
	import { cn } from "$lib/utils.js";
	import type { WithElementRef } from "bits-ui";
	import type { HTMLAttributes } from "svelte/elements";

	let {
		ref = $bindable(null),
		class: className,
		showIcon = false,
		children,
		...restProps
	}: WithElementRef<HTMLAttributes<HTMLElement>> & {
		showIcon?: boolean;
	} = $props();

	// Random width between 50% and 90%
	const width = `${Math.floor(Math.random() * 40) + 50}%`;
</script>

<div
	bind:this={ref}
	data-sidebar="menu-skeleton"
	class={cn("flex h-8 items-center gap-2 rounded-md px-2", className)}
	{...restProps}
>
	{#if showIcon}
		<Skeleton class="size-4 rounded-md" data-sidebar="menu-skeleton-icon" />
	{/if}
	<Skeleton
		class="h-4 max-w-[var(--skeleton-width)] flex-1"
		data-sidebar="menu-skeleton-text"
		style="--skeleton-width: {width};"
	/>
	{@render children?.()}
</div>

--- End of File ---

--- File Path ---
frontend/src/lib/components/ui/sidebar/sidebar-rail.svelte

<script lang="ts">
	import { cn } from "$lib/utils.js";
	import type { WithElementRef } from "bits-ui";
	import type { HTMLAttributes } from "svelte/elements";
	import { useSidebar } from "./context.svelte.js";

	let {
		ref = $bindable(null),
		class: className,
		children,
		...restProps
	}: WithElementRef<HTMLAttributes<HTMLButtonElement>, HTMLButtonElement> = $props();

	const sidebar = useSidebar();
</script>

<button
	bind:this={ref}
	data-sidebar="rail"
	aria-label="Toggle Sidebar"
	tabIndex={-1}
	onclick={() => sidebar.toggle()}
	title="Toggle Sidebar"
	class={cn(
		"hover:after:bg-sidebar-border absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex",
		"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize",
		"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize",
		"group-data-[collapsible=offcanvas]:hover:bg-sidebar group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full",
		"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2",
		"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2",
		className
	)}
	{...restProps}
>
	{@render children?.()}
</button>

--- End of File ---

--- File Path ---
frontend/src/lib/components/ui/sidebar/sidebar-separator.svelte

<script lang="ts">
	import { Separator } from "$lib/components/ui/separator/index.js";
	import { cn } from "$lib/utils.js";
	import type { ComponentProps } from "svelte";

	let {
		ref = $bindable(null),
		class: className,
		...restProps
	}: ComponentProps<typeof Separator> = $props();
</script>

<Separator
	bind:ref
	data-sidebar="separator"
	class={cn("bg-sidebar-border mx-2 w-auto", className)}
	{...restProps}
/>

--- End of File ---

--- File Path ---
frontend/src/lib/components/ui/sidebar/sidebar-menu-sub-item.svelte

<script lang="ts">
	import type { WithElementRef } from "bits-ui";
	import type { HTMLAttributes } from "svelte/elements";

	let {
		ref = $bindable(null),
		children,
		...restProps
	}: WithElementRef<HTMLAttributes<HTMLLIElement>> = $props();
</script>

<li bind:this={ref} data-sidebar="menu-sub-item" {...restProps}>
	{@render children?.()}
</li>

--- End of File ---

--- File Path ---
frontend/src/lib/components/ui/sidebar/sidebar-menu-badge.svelte

<script lang="ts">
	import { cn } from "$lib/utils.js";
	import type { WithElementRef } from "bits-ui";
	import type { HTMLAttributes } from "svelte/elements";

	let {
		ref = $bindable(null),
		class: className,
		children,
		...restProps
	}: WithElementRef<HTMLAttributes<HTMLElement>> = $props();
</script>

<div
	bind:this={ref}
	data-sidebar="menu-badge"
	class={cn(
		"text-sidebar-foreground pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums",
		"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground",
		"peer-data-[size=sm]/menu-button:top-1",
		"peer-data-[size=default]/menu-button:top-1.5",
		"peer-data-[size=lg]/menu-button:top-2.5",
		"group-data-[collapsible=icon]:hidden",
		className
	)}
	{...restProps}
>
	{@render children?.()}
</div>

--- End of File ---

--- File Path ---
frontend/src/lib/components/ui/sidebar/constants.ts

export const SIDEBAR_COOKIE_NAME = "sidebar:state";
export const SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7;
export const SIDEBAR_WIDTH = "16rem";
export const SIDEBAR_WIDTH_MOBILE = "18rem";
export const SIDEBAR_WIDTH_ICON = "3rem";
export const SIDEBAR_KEYBOARD_SHORTCUT = "b";

--- End of File ---

--- File Path ---
frontend/src/lib/components/ui/sidebar/sidebar-menu-sub.svelte

<script lang="ts">
	import { cn } from "$lib/utils.js";
	import type { WithElementRef } from "bits-ui";
	import type { HTMLAttributes } from "svelte/elements";

	let {
		ref = $bindable(null),
		class: className,
		children,
		...restProps
	}: WithElementRef<HTMLAttributes<HTMLUListElement>> = $props();
</script>

<ul
	bind:this={ref}
	data-sidebar="menu-sub"
	class={cn(
		"border-sidebar-border mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l px-2.5 py-0.5",
		"group-data-[collapsible=icon]:hidden",
		className
	)}
	{...restProps}
>
	{@render children?.()}
</ul>

--- End of File ---

--- File Path ---
frontend/src/lib/components/ui/sidebar/sidebar-input.svelte

<script lang="ts">
	import type { ComponentProps } from "svelte";
	import { Input } from "$lib/components/ui/input/index.js";
	import { cn } from "$lib/utils.js";

	let {
		ref = $bindable(null),
		value = $bindable(""),
		class: className,
		...restProps
	}: ComponentProps<typeof Input> = $props();
</script>

<Input
	bind:ref
	bind:value
	data-sidebar="input"
	class={cn(
		"bg-background focus-visible:ring-sidebar-ring h-8 w-full shadow-none focus-visible:ring-2",
		className
	)}
	{...restProps}
/>

--- End of File ---

--- File Path ---
frontend/src/lib/components/ui/sidebar/sidebar-group-content.svelte

<script lang="ts">
	import { cn } from "$lib/utils.js";
	import type { WithElementRef } from "bits-ui";
	import type { HTMLAttributes } from "svelte/elements";

	let {
		ref = $bindable(null),
		class: className,
		children,
		...restProps
	}: WithElementRef<HTMLAttributes<HTMLDivElement>> = $props();
</script>

<div
	bind:this={ref}
	data-sidebar="group-content"
	class={cn("w-full text-sm", className)}
	{...restProps}
>
	{@render children?.()}
</div>

--- End of File ---

--- File Path ---
frontend/src/lib/components/ui/sidebar/sidebar-footer.svelte

<script lang="ts">
	import type { HTMLAttributes } from "svelte/elements";
	import type { WithElementRef } from "bits-ui";
	import { cn } from "$lib/utils.js";

	let {
		ref = $bindable(null),
		class: className,
		children,
		...restProps
	}: WithElementRef<HTMLAttributes<HTMLElement>> = $props();
</script>

<div
	bind:this={ref}
	data-sidebar="footer"
	class={cn("flex flex-col gap-2 p-2", className)}
	{...restProps}
>
	{@render children?.()}
</div>

--- End of File ---

--- File Path ---
frontend/src/lib/components/ui/sidebar/sidebar-trigger.svelte

<script lang="ts">
	import { Button } from "$lib/components/ui/button/index.js";
	import { cn } from "$lib/utils.js";
	import PanelLeft from "@lucide/svelte/icons/panel-left";
	import type { ComponentProps } from "svelte";
	import { useSidebar } from "./context.svelte.js";

	let {
		ref = $bindable(null),
		class: className,
		onclick,
		...restProps
	}: ComponentProps<typeof Button> & {
		onclick?: (e: MouseEvent) => void;
	} = $props();

	const sidebar = useSidebar();
</script>

<Button
	type="button"
	onclick={(e) => {
		onclick?.(e);
		sidebar.toggle();
	}}
	data-sidebar="trigger"
	variant="ghost"
	size="icon"
	class={cn("h-7 w-7", className)}
	{...restProps}
>
	<PanelLeft />
	<span class="sr-only">Toggle Sidebar</span>
</Button>

--- End of File ---

--- File Path ---
frontend/src/lib/components/ui/sidebar/sidebar-group-label.svelte

<script lang="ts">
	import { cn } from "$lib/utils.js";
	import type { WithElementRef } from "bits-ui";
	import type { Snippet } from "svelte";
	import type { HTMLAttributes } from "svelte/elements";

	let {
		ref = $bindable(null),
		children,
		child,
		class: className,
		...restProps
	}: WithElementRef<HTMLAttributes<HTMLElement>> & {
		child?: Snippet<[{ props: Record<string, unknown> }]>;
	} = $props();

	const mergedProps = $derived({
		class: cn(
			"text-sidebar-foreground/70 ring-sidebar-ring flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium outline-none transition-[margin,opa] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0",
			"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0",
			className
		),
		"data-sidebar": "group-label",
		...restProps,
	});
</script>

{#if child}
	{@render child({ props: mergedProps })}
{:else}
	<div bind:this={ref} {...mergedProps}>
		{@render children?.()}
	</div>
{/if}

--- End of File ---

--- File Path ---
frontend/src/lib/components/ui/sidebar/context.svelte.ts

import { IsMobile } from "$lib/hooks/is-mobile.svelte.js";
import { getContext, setContext } from "svelte";
import { SIDEBAR_KEYBOARD_SHORTCUT } from "./constants.js";

type Getter<T> = () => T;

export type SidebarStateProps = {
	/**
	 * A getter function that returns the current open state of the sidebar.
	 * We use a getter function here to support `bind:open` on the `Sidebar.Provider`
	 * component.
	 */
	open: Getter<boolean>;

	/**
	 * A function that sets the open state of the sidebar. To support `bind:open`, we need
	 * a source of truth for changing the open state to ensure it will be synced throughout
	 * the sub-components and any `bind:` references.
	 */
	setOpen: (open: boolean) => void;
};

class SidebarState {
	readonly props: SidebarStateProps;
	open = $derived.by(() => this.props.open());
	openMobile = $state(false);
	setOpen: SidebarStateProps["setOpen"];
	#isMobile: IsMobile;
	state = $derived.by(() => (this.open ? "expanded" : "collapsed"));

	constructor(props: SidebarStateProps) {
		this.setOpen = props.setOpen;
		this.#isMobile = new IsMobile();
		this.props = props;
	}

	// Convenience getter for checking if the sidebar is mobile
	// without this, we would need to use `sidebar.isMobile.current` everywhere
	get isMobile() {
		return this.#isMobile.current;
	}

	// Event handler to apply to the `<svelte:window>`
	handleShortcutKeydown = (e: KeyboardEvent) => {
		if (e.key === SIDEBAR_KEYBOARD_SHORTCUT && (e.metaKey || e.ctrlKey)) {
			e.preventDefault();
			this.toggle();
		}
	};

	setOpenMobile = (value: boolean) => {
		this.openMobile = value;
	};

	toggle = () => {
		return this.#isMobile.current
			? (this.openMobile = !this.openMobile)
			: this.setOpen(!this.open);
	};
}

const SYMBOL_KEY = "scn-sidebar";

/**
 * Instantiates a new `SidebarState` instance and sets it in the context.
 *
 * @param props The constructor props for the `SidebarState` class.
 * @returns  The `SidebarState` instance.
 */
export function setSidebar(props: SidebarStateProps): SidebarState {
	return setContext(Symbol.for(SYMBOL_KEY), new SidebarState(props));
}

/**
 * Retrieves the `SidebarState` instance from the context. This is a class instance,
 * so you cannot destructure it.
 * @returns The `SidebarState` instance.
 */
export function useSidebar(): SidebarState {
	return getContext(Symbol.for(SYMBOL_KEY));
}

--- End of File ---

--- File Path ---
frontend/src/lib/components/ui/sidebar/sidebar.svelte

<script lang="ts">
	import * as Sheet from "$lib/components/ui/sheet/index.js";
	import { cn } from "$lib/utils.js";
	import type { WithElementRef } from "bits-ui";
	import type { HTMLAttributes } from "svelte/elements";
	import { SIDEBAR_WIDTH_MOBILE } from "./constants.js";
	import { useSidebar } from "./context.svelte.js";

	let {
		ref = $bindable(null),
		side = "left",
		variant = "sidebar",
		collapsible = "offcanvas",
		class: className,
		children,
		...restProps
	}: WithElementRef<HTMLAttributes<HTMLDivElement>> & {
		side?: "left" | "right";
		variant?: "sidebar" | "floating" | "inset";
		collapsible?: "offcanvas" | "icon" | "none";
	} = $props();

	const sidebar = useSidebar();
</script>

{#if collapsible === "none"}
	<div
		class={cn(
			"bg-sidebar text-sidebar-foreground flex h-full w-[var(--sidebar-width)] flex-col",
			className
		)}
		bind:this={ref}
		{...restProps}
	>
		{@render children?.()}
	</div>
{:else if sidebar.isMobile}
	<Sheet.Root
		bind:open={() => sidebar.openMobile, (v) => sidebar.setOpenMobile(v)}
		{...restProps}
	>
		<Sheet.Content
			data-sidebar="sidebar"
			data-mobile="true"
			class="bg-sidebar text-sidebar-foreground w-[var(--sidebar-width)] p-0 [&>button]:hidden"
			style="--sidebar-width: {SIDEBAR_WIDTH_MOBILE};"
			{side}
		>
			<div class="flex h-full w-full flex-col">
				{@render children?.()}
			</div>
		</Sheet.Content>
	</Sheet.Root>
{:else}
	<div
		bind:this={ref}
		class="text-sidebar-foreground group peer hidden md:block"
		data-state={sidebar.state}
		data-collapsible={sidebar.state === "collapsed" ? collapsible : ""}
		data-variant={variant}
		data-side={side}
	>
		<!-- This is what handles the sidebar gap on desktop -->
		<div
			class={cn(
				"relative h-svh w-[var(--sidebar-width)] bg-transparent transition-[width] duration-200 ease-linear",
				"group-data-[collapsible=offcanvas]:w-0",
				"group-data-[side=right]:rotate-180",
				variant === "floating" || variant === "inset"
					? "group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]"
					: "group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)]"
			)}
		></div>
		<div
			class={cn(
				"fixed inset-y-0 z-10 hidden h-svh w-[var(--sidebar-width)] transition-[left,right,width] duration-200 ease-linear md:flex",
				side === "left"
					? "left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]"
					: "right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]",
				// Adjust the padding for floating and inset variants.
				variant === "floating" || variant === "inset"
					? "p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]"
					: "group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)] group-data-[side=left]:border-r group-data-[side=right]:border-l",
				className
			)}
			{...restProps}
		>
			<div
				data-sidebar="sidebar"
				class="bg-sidebar group-data-[variant=floating]:border-sidebar-border flex h-full w-full flex-col group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:shadow"
			>
				{@render children?.()}
			</div>
		</div>
	</div>
{/if}

--- End of File ---

--- File Path ---
frontend/src/lib/components/ui/sidebar/sidebar-provider.svelte

<script lang="ts">
	import * as Tooltip from "$lib/components/ui/tooltip/index.js";
	import { cn } from "$lib/utils.js";
	import type { WithElementRef } from "bits-ui";
	import type { HTMLAttributes } from "svelte/elements";
	import {
		SIDEBAR_COOKIE_MAX_AGE,
		SIDEBAR_COOKIE_NAME,
		SIDEBAR_WIDTH,
		SIDEBAR_WIDTH_ICON,
	} from "./constants.js";
	import { setSidebar } from "./context.svelte.js";

	let {
		ref = $bindable(null),
		open = $bindable(true),
		onOpenChange = () => {},
		class: className,
		style,
		children,
		...restProps
	}: WithElementRef<HTMLAttributes<HTMLDivElement>> & {
		open?: boolean;
		onOpenChange?: (open: boolean) => void;
	} = $props();

	const sidebar = setSidebar({
		open: () => open,
		setOpen: (value: boolean) => {
			open = value;
			onOpenChange(value);

			// This sets the cookie to keep the sidebar state.
			document.cookie = `${SIDEBAR_COOKIE_NAME}=${open}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`;
		},
	});
</script>

<svelte:window onkeydown={sidebar.handleShortcutKeydown} />

<Tooltip.Provider delayDuration={0}>
	<div
		style="--sidebar-width: {SIDEBAR_WIDTH}; --sidebar-width-icon: {SIDEBAR_WIDTH_ICON}; {style}"
		class={cn(
			"group/sidebar-wrapper has-[[data-variant=inset]]:bg-sidebar flex min-h-svh w-full",
			className
		)}
		bind:this={ref}
		{...restProps}
	>
		{@render children?.()}
	</div>
</Tooltip.Provider>

--- End of File ---

--- File Path ---
frontend/src/lib/components/ui/sidebar/sidebar-menu.svelte

<script lang="ts">
	import { cn } from "$lib/utils.js";
	import type { WithElementRef } from "bits-ui";
	import type { HTMLAttributes } from "svelte/elements";

	let {
		ref = $bindable(null),
		class: className,
		children,
		...restProps
	}: WithElementRef<HTMLAttributes<HTMLUListElement>, HTMLUListElement> = $props();
</script>

<ul
	bind:this={ref}
	data-sidebar="menu"
	class={cn("flex w-full min-w-0 flex-col gap-1", className)}
	{...restProps}
>
	{@render children?.()}
</ul>

--- End of File ---

--- File Path ---
frontend/src/lib/components/ui/sidebar/sidebar-menu-item.svelte

<script lang="ts">
	import { cn } from "$lib/utils.js";
	import type { WithElementRef } from "bits-ui";
	import type { HTMLAttributes } from "svelte/elements";

	let {
		ref = $bindable(null),
		class: className,
		children,
		...restProps
	}: WithElementRef<HTMLAttributes<HTMLLIElement>, HTMLLIElement> = $props();
</script>

<li
	bind:this={ref}
	data-sidebar="menu-item"
	class={cn("group/menu-item relative", className)}
	{...restProps}
>
	{@render children?.()}
</li>

--- End of File ---

--- File Path ---
frontend/src/lib/components/ui/sidebar/index.ts

import { useSidebar } from "./context.svelte.js";
import Content from "./sidebar-content.svelte";
import Footer from "./sidebar-footer.svelte";
import GroupAction from "./sidebar-group-action.svelte";
import GroupContent from "./sidebar-group-content.svelte";
import GroupLabel from "./sidebar-group-label.svelte";
import Group from "./sidebar-group.svelte";
import Header from "./sidebar-header.svelte";
import Input from "./sidebar-input.svelte";
import Inset from "./sidebar-inset.svelte";
import MenuAction from "./sidebar-menu-action.svelte";
import MenuBadge from "./sidebar-menu-badge.svelte";
import MenuButton from "./sidebar-menu-button.svelte";
import MenuItem from "./sidebar-menu-item.svelte";
import MenuSkeleton from "./sidebar-menu-skeleton.svelte";
import MenuSubButton from "./sidebar-menu-sub-button.svelte";
import MenuSubItem from "./sidebar-menu-sub-item.svelte";
import MenuSub from "./sidebar-menu-sub.svelte";
import Menu from "./sidebar-menu.svelte";
import Provider from "./sidebar-provider.svelte";
import Rail from "./sidebar-rail.svelte";
import Separator from "./sidebar-separator.svelte";
import Trigger from "./sidebar-trigger.svelte";
import Root from "./sidebar.svelte";

export {
	Content,
	Footer,
	Group,
	GroupAction,
	GroupContent,
	GroupLabel,
	Header,
	Input,
	Inset,
	Menu,
	MenuAction,
	MenuBadge,
	MenuButton,
	MenuItem,
	MenuSkeleton,
	MenuSub,
	MenuSubButton,
	MenuSubItem,
	Provider,
	Rail,
	Root,
	Separator,
	//
	Root as Sidebar,
	Content as SidebarContent,
	Footer as SidebarFooter,
	Group as SidebarGroup,
	GroupAction as SidebarGroupAction,
	GroupContent as SidebarGroupContent,
	GroupLabel as SidebarGroupLabel,
	Header as SidebarHeader,
	Input as SidebarInput,
	Inset as SidebarInset,
	Menu as SidebarMenu,
	MenuAction as SidebarMenuAction,
	MenuBadge as SidebarMenuBadge,
	MenuButton as SidebarMenuButton,
	MenuItem as SidebarMenuItem,
	MenuSkeleton as SidebarMenuSkeleton,
	MenuSub as SidebarMenuSub,
	MenuSubButton as SidebarMenuSubButton,
	MenuSubItem as SidebarMenuSubItem,
	Provider as SidebarProvider,
	Rail as SidebarRail,
	Separator as SidebarSeparator,
	Trigger as SidebarTrigger,
	Trigger,
	useSidebar,
};

--- End of File ---

--- File Path ---
frontend/src/lib/components/ui/sidebar/sidebar-menu-action.svelte

<script lang="ts">
	import { cn } from "$lib/utils.js";
	import type { WithElementRef } from "bits-ui";
	import type { Snippet } from "svelte";
	import type { HTMLButtonAttributes } from "svelte/elements";

	let {
		ref = $bindable(null),
		class: className,
		showOnHover = false,
		children,
		child,
		...restProps
	}: WithElementRef<HTMLButtonAttributes> & {
		child?: Snippet<[{ props: Record<string, unknown> }]>;
		showOnHover?: boolean;
	} = $props();

	const mergedProps = $derived({
		class: cn(
			"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground peer-hover/menu-button:text-sidebar-accent-foreground absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-none transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0",
			// Increases the hit area of the button on mobile.
			"after:absolute after:-inset-2 after:md:hidden",
			"peer-data-[size=sm]/menu-button:top-1",
			"peer-data-[size=default]/menu-button:top-1.5",
			"peer-data-[size=lg]/menu-button:top-2.5",
			"group-data-[collapsible=icon]:hidden",
			showOnHover &&
				"peer-data-[active=true]/menu-button:text-sidebar-accent-foreground group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 md:opacity-0",
			className
		),
		"data-sidebar": "menu-action",
		...restProps,
	});
</script>

{#if child}
	{@render child({ props: mergedProps })}
{:else}
	<button bind:this={ref} {...mergedProps}>
		{@render children?.()}
	</button>
{/if}

--- End of File ---

--- File Path ---
frontend/src/lib/components/ui/sidebar/sidebar-group-action.svelte

<script lang="ts">
	import { cn } from "$lib/utils.js";
	import type { WithElementRef } from "bits-ui";
	import type { Snippet } from "svelte";
	import type { HTMLButtonAttributes } from "svelte/elements";

	let {
		ref = $bindable(null),
		class: className,
		children,
		child,
		...restProps
	}: WithElementRef<HTMLButtonAttributes> & {
		child?: Snippet<[{ props: Record<string, unknown> }]>;
	} = $props();

	const propObj = $derived({
		class: cn(
			"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-none transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0",
			// Increases the hit area of the button on mobile.
			"after:absolute after:-inset-2 after:md:hidden",
			"group-data-[collapsible=icon]:hidden",
			className
		),
		"data-sidebar": "group-action",
		...restProps,
	});
</script>

{#if child}
	{@render child({ props: propObj })}
{:else}
	<button bind:this={ref} {...propObj}>
		{@render children?.()}
	</button>
{/if}

--- End of File ---

--- File Path ---
frontend/src/lib/components/ui/sidebar/sidebar-menu-button.svelte

<script lang="ts" module>
	import { tv, type VariantProps } from "tailwind-variants";

	export const sidebarMenuButtonVariants = tv({
		base: "peer/menu-button ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground active:bg-sidebar-accent active:text-sidebar-accent-foreground data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none transition-[width,height,padding] focus-visible:ring-2 disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:font-medium group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0",
		variants: {
			variant: {
				default: "hover:bg-sidebar-accent hover:text-sidebar-accent-foreground",
				outline:
					"bg-background hover:bg-sidebar-accent hover:text-sidebar-accent-foreground shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]",
			},
			size: {
				default: "h-8 text-sm",
				sm: "h-7 text-xs",
				lg: "h-12 text-sm group-data-[collapsible=icon]:!p-0",
			},
		},
		defaultVariants: {
			variant: "default",
			size: "default",
		},
	});

	export type SidebarMenuButtonVariant = VariantProps<
		typeof sidebarMenuButtonVariants
	>["variant"];
	export type SidebarMenuButtonSize = VariantProps<typeof sidebarMenuButtonVariants>["size"];
</script>

<script lang="ts">
	import * as Tooltip from "$lib/components/ui/tooltip/index.js";
	import { cn } from "$lib/utils.js";
	import { mergeProps, type WithElementRef, type WithoutChildrenOrChild } from "bits-ui";
	import type { ComponentProps, Snippet } from "svelte";
	import type { HTMLAttributes } from "svelte/elements";
	import { useSidebar } from "./context.svelte.js";

	let {
		ref = $bindable(null),
		class: className,
		children,
		child,
		variant = "default",
		size = "default",
		isActive = false,
		tooltipContent,
		tooltipContentProps,
		...restProps
	}: WithElementRef<HTMLAttributes<HTMLButtonElement>, HTMLButtonElement> & {
		isActive?: boolean;
		variant?: SidebarMenuButtonVariant;
		size?: SidebarMenuButtonSize;
		tooltipContent?: Snippet;
		tooltipContentProps?: WithoutChildrenOrChild<ComponentProps<typeof Tooltip.Content>>;
		child?: Snippet<[{ props: Record<string, unknown> }]>;
	} = $props();

	const sidebar = useSidebar();

	const buttonProps = $derived({
		class: cn(sidebarMenuButtonVariants({ variant, size }), className),
		"data-sidebar": "menu-button",
		"data-size": size,
		"data-active": isActive,
		...restProps,
	});
</script>

{#snippet Button({ props }: { props?: Record<string, unknown> })}
	{@const mergedProps = mergeProps(buttonProps, props)}
	{#if child}
		{@render child({ props: mergedProps })}
	{:else}
		<button bind:this={ref} {...mergedProps}>
			{@render children?.()}
		</button>
	{/if}
{/snippet}

{#if !tooltipContent}
	{@render Button({})}
{:else}
	<Tooltip.Root>
		<Tooltip.Trigger>
			{#snippet child({ props })}
				{@render Button({ props })}
			{/snippet}
		</Tooltip.Trigger>
		<Tooltip.Content
			side="right"
			align="center"
			hidden={sidebar.state !== "collapsed" || sidebar.isMobile}
			children={tooltipContent}
			{...tooltipContentProps}
		/>
	</Tooltip.Root>
{/if}

--- End of File ---

--- File Path ---
frontend/src/lib/components/ui/sidebar/sidebar-menu-sub-button.svelte

<script lang="ts">
	import { cn } from "$lib/utils.js";
	import type { WithElementRef } from "bits-ui";
	import type { Snippet } from "svelte";
	import type { HTMLAnchorAttributes } from "svelte/elements";

	let {
		ref = $bindable(null),
		children,
		child,
		class: className,
		size = "md",
		isActive,
		...restProps
	}: WithElementRef<HTMLAnchorAttributes> & {
		child?: Snippet<[{ props: Record<string, unknown> }]>;
		size?: "sm" | "md";
		isActive?: boolean;
	} = $props();

	const mergedProps = $derived({
		class: cn(
			"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground active:bg-sidebar-accent active:text-sidebar-accent-foreground [&>svg]:text-sidebar-accent-foreground flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 outline-none focus-visible:ring-2 disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0",
			"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground",
			size === "sm" && "text-xs",
			size === "md" && "text-sm",
			"group-data-[collapsible=icon]:hidden",
			className
		),
		"data-sidebar": "menu-sub-button",
		"data-size": size,
		"data-active": isActive,
		...restProps,
	});
</script>

{#if child}
	{@render child({ props: mergedProps })}
{:else}
	<a bind:this={ref} {...mergedProps}>
		{@render children?.()}
	</a>
{/if}

--- End of File ---

--- File Path ---
frontend/src/lib/components/ui/sidebar/sidebar-group.svelte

<script lang="ts">
	import type { HTMLAttributes } from "svelte/elements";
	import type { WithElementRef } from "bits-ui";
	import { cn } from "$lib/utils.js";

	let {
		ref = $bindable(null),
		class: className,
		children,
		...restProps
	}: WithElementRef<HTMLAttributes<HTMLElement>> = $props();
</script>

<div
	bind:this={ref}
	data-sidebar="group"
	class={cn("relative flex w-full min-w-0 flex-col p-2", className)}
	{...restProps}
>
	{@render children?.()}
</div>

--- End of File ---

--- File Path ---
frontend/src/lib/components/ui/tooltip/tooltip-content.svelte

<script lang="ts">
	import { Tooltip as TooltipPrimitive } from "bits-ui";
	import { cn } from "$lib/utils.js";

	let {
		ref = $bindable(null),
		class: className,
		sideOffset = 4,
		...restProps
	}: TooltipPrimitive.ContentProps = $props();
</script>

<TooltipPrimitive.Content
	bind:ref
	{sideOffset}
	class={cn(
		"bg-popover text-popover-foreground animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 overflow-hidden rounded-md border px-3 py-1.5 text-sm shadow-md",
		className
	)}
	{...restProps}
/>

--- End of File ---

--- File Path ---
frontend/src/lib/components/ui/tooltip/index.ts

import { Tooltip as TooltipPrimitive } from "bits-ui";
import Content from "./tooltip-content.svelte";

const Root = TooltipPrimitive.Root;
const Trigger = TooltipPrimitive.Trigger;
const Provider = TooltipPrimitive.Provider;

export {
	Root,
	Trigger,
	Content,
	Provider,
	//
	Root as Tooltip,
	Content as TooltipContent,
	Trigger as TooltipTrigger,
	Provider as TooltipProvider,
};

--- End of File ---

--- File Path ---
frontend/src/lib/components/ui/separator/separator.svelte

<script lang="ts">
	import { Separator as SeparatorPrimitive } from "bits-ui";
	import { cn } from "$lib/utils.js";

	let {
		ref = $bindable(null),
		class: className,
		orientation = "horizontal",
		...restProps
	}: SeparatorPrimitive.RootProps = $props();
</script>

<SeparatorPrimitive.Root
	bind:ref
	class={cn(
		"bg-border shrink-0",
		orientation === "horizontal" ? "h-[1px] w-full" : "min-h-full w-[1px]",
		className
	)}
	{orientation}
	{...restProps}
/>

--- End of File ---

--- File Path ---
frontend/src/lib/components/ui/separator/index.ts

import Root from "./separator.svelte";

export {
	Root,
	//
	Root as Separator,
};

--- End of File ---

--- File Path ---
frontend/src/lib/components/DonationForm.svelte

<script lang="ts">
	import { i18n } from '$lib/i18n';
	import { AlertCircle } from 'lucide-svelte';
	import { createEventDispatcher } from 'svelte';

    // --- Props & Events ---
    const dispatch = createEventDispatcher<{ amountChange: number }>();

	// --- Component State ---
	let errorMessage = $state(''); // Keep for amount validation
    let currentAmount = $state(10); // Default donation amount in EUR
    let customAmountInput = $state('');
    let isCustomAmountConfirmed = $state(false); // Track if the current amount is from confirmed custom input
    const presetAmounts = [5, 10, 20, 50];
    let { disabled = false } = $props<{ disabled?: boolean }>(); // Allow disabling from parent

    // --- Amount Selection Logic (Simplified) ---
    function selectAmount(amount: number) {
        if (disabled) return;
        currentAmount = amount;
        isCustomAmountConfirmed = false;
        customAmountInput = '';
        errorMessage = ''; // Clear error on preset selection
        dispatch('amountChange', amount * 100); // Dispatch amount in cents
    }

    function handleCustomAmountChange(event: Event) {
        if (disabled) return;
        const input = event.target as HTMLInputElement;
        const value = input.value.replace(/,/g, '.');
        const numericValue = parseFloat(value);
        isCustomAmountConfirmed = false; // Input changed, needs reconfirmation

        if (value === '') {
            errorMessage = '';
        } else if (isNaN(numericValue) || numericValue < 0.50) {
            errorMessage = $i18n.donations.errors.invalidAmount;
        } else {
            errorMessage = '';
        }
        customAmountInput = input.value; // Update display value immediately
    }

    function confirmCustomAmount() {
        if (disabled) return;
        const value = customAmountInput.replace(/,/g, '.');
        const numericValue = parseFloat(value);

        if (!isNaN(numericValue) && numericValue >= 0.50) {
            currentAmount = numericValue; // Update internal amount state if needed
            isCustomAmountConfirmed = true;
            errorMessage = '';
            dispatch('amountChange', Math.round(numericValue * 100)); // Dispatch confirmed amount
        } else {
            errorMessage = $i18n.donations.errors.invalidAmount;
            isCustomAmountConfirmed = false;
        }
    }
</script>

<div class="donation-amount-selector text-white">
    <div class="mb-6">
        <div class="grid grid-cols-2 gap-3 sm:grid-cols-4">
            {#each presetAmounts as amount}
                <button type="button" on:click={() => selectAmount(amount)}
                     class="rounded-md border-2 px-4 py-3 text-center font-medium transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-gray-800 disabled:opacity-60 disabled:cursor-not-allowed"
                     class:border-orange-500={currentAmount === amount && !customAmountInput}
                     class:bg-orange-600={currentAmount === amount && !customAmountInput}
                     class:text-white={currentAmount === amount && !customAmountInput}
                     class:border-gray-600={!(currentAmount === amount && !customAmountInput)}
                     class:hover:border-orange-400={currentAmount !== amount || !!customAmountInput}
                     class:hover:bg-gray-700={currentAmount !== amount || !!customAmountInput}
                     class:text-gray-300={!(currentAmount === amount && !customAmountInput)}
                     disabled={disabled}>
                     {amount} €
                </button>
            {/each}
        </div>
        <div class="mt-4 flex items-center gap-2">
            <div class="relative flex-grow">
                <span class="pointer-events-none absolute inset-y-0 left-0 flex items-center pl-3 text-gray-400">€</span>
                <input type="text" id="custom-amount-input" inputmode="decimal"
                     placeholder="Autre montant" bind:value={customAmountInput}
                     on:input={handleCustomAmountChange}
                     class="w-full rounded-md border-2 bg-gray-700 py-3 pl-8 pr-4 text-white placeholder-gray-400 transition-colors duration-200 focus:z-10 focus:border-orange-500 focus:ring-2 focus:ring-orange-500 focus:ring-offset-0 disabled:opacity-60 disabled:cursor-not-allowed"
                     class:border-orange-500={customAmountInput !== '' && isCustomAmountConfirmed}
                     class:border-gray-600={customAmountInput === '' || !isCustomAmountConfirmed}
                     class:border-yellow-500={customAmountInput !== '' && !isCustomAmountConfirmed}
                     disabled={disabled} />
            </div>
            <button type="button" on:click={confirmCustomAmount}
                 class="shrink-0 rounded-md border-2 bg-gray-600 px-4 py-3 font-medium text-white transition-colors hover:bg-gray-500 focus:z-10 focus:outline-none focus:ring-2 focus:ring-orange-500 focus:ring-offset-0 disabled:cursor-not-allowed disabled:opacity-60"
                 class:border-orange-500={customAmountInput !== '' && isCustomAmountConfirmed}
                 class:border-gray-600={customAmountInput === ''}
                 class:border-yellow-500={customAmountInput !== '' && !isCustomAmountConfirmed}
                 disabled={disabled || customAmountInput === '' || (customAmountInput !== '' && parseFloat(customAmountInput.replace(/,/g, '.')) < 0.50) || isCustomAmountConfirmed}
                 title="Valider ce montant">
                 OK
             </button>
        </div>
         {#if errorMessage}
            <p class="mt-2 text-sm text-red-400 flex items-center gap-1"><AlertCircle class="w-4 h-4"/> {errorMessage}</p>
         {/if}
    </div>
</div>

<style>
    /* ... styles for amount buttons/input if needed ... */
</style>
--- End of File ---

--- File Path ---
frontend/src/lib/components/CheckoutForm.svelte

<!-- src/lib/components/CheckoutForm.svelte -->
<script>
    import { env } from '$env/dynamic/public';
    import { loadStripe } from '@stripe/stripe-js';
    import { onMount, tick } from 'svelte';

    const stripePublicKey = env.PUBLIC_STRIPE_KEY;

    // --- Component State ---
    let stripe = null;
    let elements = null;
    let paymentElement = null;
    let isLoadingStripe = true; // Loading Stripe library itself
    let isCreatingIntent = false;
    let errorMessage = '';
    let paymentProcessing = false;
    let selectedPlan = null; // 'monthly' or 'yearly'

    // --- Plan Details (customize as needed) ---
    const plans = {
        monthly: {
            id: 'monthly',
            name: 'Mensuel',
            price: 1.99, // Base price for display and calculation
            priceString: '€1.99',
            frequency: 'par mois',
            priceIdEnvVar: 'STRIPE_MONTHLY_PRICE_ID' // Reference for backend lookup
        },
        yearly: {
            id: 'yearly',
            name: 'Annuel',
            price: 19.99, // Actual yearly price
            priceString: '€19.99',
            frequency: 'par an',
            originalMonthlyTotal: (1.99 * 12).toFixed(2), // Calculate for strikethrough
            priceIdEnvVar: 'STRIPE_YEARLY_PRICE_ID' // Reference for backend lookup
        },
    };

    // --- Stripe Initialization ---
    onMount(async () => {
        if (!stripePublicKey) {
            errorMessage = 'Stripe publishable key not set.';
            isLoadingStripe = false;
            return;
        }
        try {
            stripe = await loadStripe(stripePublicKey);
            isLoadingStripe = false;
        } catch (error) {
            console.error("Stripe loading Error:", error);
            errorMessage = error.message || 'Failed to load Stripe.';
            isLoadingStripe = false;
        }
    });

    // --- Select Plan Function ---
    function selectPlan(planId) {
        if (isCreatingIntent || paymentProcessing) return; // Don't change plan while processing
        if (selectedPlan === planId) return; // Don't re-init if already selected

        console.log("Selected plan:", planId);
        selectedPlan = planId;
        // Reset previous elements if plan changes
        if (paymentElement) {
            paymentElement.destroy();
            paymentElement = null;
            elements = null;
        }
        errorMessage = ''; // Clear previous errors specific to element creation
        // Trigger element initialization via reactive statement below
    }


    // --- Create Payment Intent/Subscription when Plan is Selected ---
    async function initializeStripeElements() {
        // Guard conditions
        if (!stripe || !selectedPlan || isCreatingIntent || elements) {
            if (!stripe) console.warn("Stripe not loaded yet");
            if (!selectedPlan) console.warn("No plan selected");
            if (isCreatingIntent) console.warn("Intent creation already in progress");
            if (elements) console.warn("Elements already initialized for this plan");
            return;
        }

        isCreatingIntent = true;
        errorMessage = ''; // Clear previous errors

        console.log(`Initializing elements for plan: ${selectedPlan}`);

        try {
            const res = await fetch('/api/create-payment-intent', { // Or '/api/create-subscription'
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                // Send the *identifier* ('monthly' or 'yearly'), backend uses env vars
                body: JSON.stringify({ plan: selectedPlan })
            });

            if (!res.ok) {
                const errorData = await res.json().catch(() => ({ message: `HTTP error ${res.status}` }));
                throw new Error(errorData.message || `Failed to create subscription (${res.status})`);
            }

            const { clientSecret } = await res.json();

            if (!clientSecret) {
                 throw new Error('Missing clientSecret from server response.');
            }

            elements = stripe.elements({ clientSecret, appearance: { theme: 'night', labels: 'floating' }, locale: "fr" }); // Use night theme
            paymentElement = elements.create('payment');
            paymentElement.mount('#payment-element');

            // Add event listener for when the element is ready (optional, but good for UX)
            paymentElement.on('ready', () => {
                 console.log('Payment Element is ready.');
                 isCreatingIntent = false; // Element is ready, stop the "creating intent" state
            });

            // Add listener for validation errors within the element
            paymentElement.on('change', (event) => {
                if (event.error) {
                    errorMessage = event.error.message;
                } else {
                    errorMessage = ''; // Clear error if corrected
                }
            });


            // Wait a tick ensures Svelte updates the DOM *before* we potentially stop loading
            // However, the 'ready' event is more reliable for the element itself.
            await tick();


        } catch (error) {
            console.error("Initialization Error:", error);
            errorMessage = error.message || 'Failed to initialize payment details.';
            elements = null; // Reset on error
            paymentElement = null; // Reset on error
            isCreatingIntent = false; // Stop loading on error
        }
        // Note: isCreatingIntent is set to false inside the 'ready' event handler for better UX
    }

    // --- Reactive Trigger for Initialization ---
    // Run initializeStripeElements whenever selectedPlan changes (and meets conditions)
    $: if (selectedPlan && stripe && !isLoadingStripe && !elements && !isCreatingIntent) {
       initializeStripeElements();
    }


    // --- Handle Payment Submission ---
    async function handleSubmit() {
        // Add checks for isCreatingIntent and paymentElement readiness
        if (!stripe || !elements || paymentProcessing || isCreatingIntent || !paymentElement) {
            if (isCreatingIntent) errorMessage = "Please wait, initializing payment details...";
            else if (!paymentElement) errorMessage = "Please select a plan to load payment details.";
            else errorMessage = "Payment system not ready.";
            return;
        }

        paymentProcessing = true;
        errorMessage = ''; // Clear previous errors before attempting submission

        const { error } = await stripe.confirmPayment({
            elements,
            confirmParams: {
                return_url: `${window.location.origin}/payment-status`,
            },
        });

        if (error) {
            // Errors like network issues, invalid card details *not caught by element validation*
            console.error("Stripe confirmation error:", error);
            errorMessage = error.message || 'An unexpected error occurred during payment.';
            paymentProcessing = false; // Re-enable button only on explicit submission error
        }
        // If no error, redirection should happen. Button remains disabled.
    }

</script>

<div class="checkout-container">

    {#if isLoadingStripe}
        <p class="loading-text">Chargement ...</p>
    {:else if !selectedPlan}
        <h3 class="instruction-text">Choisissez votre plan:</h3>
    {/if}

    <!-- Plan Selection Boxes -->
    <div class="plan-selection-cards" class:hidden={isLoadingStripe}>
        <!-- Monthly Plan Card -->
        <div
            class="plan-card"
            class:selected={selectedPlan === plans.monthly.id}
            on:click={() => selectPlan(plans.monthly.id)}
            role="button"
            tabindex="0"
            on:keydown={(e) => e.key === 'Enter' && selectPlan(plans.monthly.id)}
        >
            <h4>{plans.monthly.name}</h4>
            <div class="price">{plans.monthly.priceString}</div>
            <div class="frequency">{plans.monthly.frequency}</div>
        </div>

        <!-- Yearly Plan Card -->
        <div
            class="plan-card"
            class:selected={selectedPlan === plans.yearly.id}
            on:click={() => selectPlan(plans.yearly.id)}
            role="button"
            tabindex="0"
            on:keydown={(e) => e.key === 'Enter' && selectPlan(plans.yearly.id)}
        >
            <span class="savings-badge">Économisez!</span>
            <h4>{plans.yearly.name}</h4>
            <div class="price">{plans.yearly.priceString}</div>
            <div class="frequency">{plans.yearly.frequency}</div>
            <div class="original-price">
                <s>€{plans.yearly.originalMonthlyTotal}</s>
                <!-- <span class="frequency"> (si payé mensuellement)</span> -->
            </div>
        </div>
    </div>

    {#if errorMessage}
        <div class="error-message" role="alert">{errorMessage}</div>
    {/if}

    <!-- Payment Form Area -->
    {#if selectedPlan}
        <form id="payment-form" on:submit|preventDefault={handleSubmit} class:fade-in={paymentElement}>

            {#if isCreatingIntent}
                <div class="loading-payment-element">Initialisation du paiement ...</div>
            {/if}

            <!-- Stripe Payment Element will be inserted here -->
            <div id="payment-element" class:hidden={isCreatingIntent}></div>

            <button
                type="submit"
                disabled={isLoadingStripe || isCreatingIntent || !stripe || !elements || paymentProcessing || !paymentElement}
                class:processing={paymentProcessing}
            >
                {#if paymentProcessing}
                    Traitement...
                {:else if isCreatingIntent}
                    Chargement...
                {:else}
                    S'abonner {selectedPlan == "monthly" ? "mensuellement" : 'annuellement'}
                {/if}
            </button>
        </form>
    {/if}

</div>
<style>
    /* Base styles */
    :global(body) { /* Apply base dark background to body */
       background-color: #121212; /* Dark background */
       color: #e0e0e0; /* Light text */
       font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
       display: flex;
       justify-content: center;
       align-items: flex-start; /* Align to top */
       min-height: 100vh;
       padding-top: 2rem; /* Add some space at the top */
       box-sizing: border-box;
    }

    .checkout-container {
        background-color: #1e1e1e; /* Slightly lighter dark shade for the container */
        padding: 2rem;
        border-radius: 8px;
        box-shadow: 0 4px 15px rgba(0, 0, 0, 0.3);
        width: 100%;
        max-width: 480px; /* Control max width */
        margin: 0 auto; /* Center horizontally */
        box-sizing: border-box;
    }

    .loading-text, .instruction-text {
        text-align: center;
        margin-bottom: 1.5rem;
        color: #b0b0b0;
    }

    .instruction-text {
        font-size: 1.2rem;
        font-weight: 500;
    }

    /* Plan Selection Cards */
    .plan-selection-cards {
        display: flex;
        gap: 1rem; /* Space between cards */
        margin-bottom: 2rem;
    }

    .plan-card {
        flex: 1; /* Each card takes equal space */
        background-color: #2a2a2a; /* Card background */
        border: 2px solid #444; /* Subtle border */
        border-radius: 6px;
        padding: 1.5rem 1rem;
        text-align: center;
        cursor: pointer;
        transition: all 0.2s ease-in-out;
        position: relative; /* For badge positioning */
    }

    .plan-card:hover {
        background-color: #333;
        border-color: #666;
        transform: translateY(-3px); /* Slight lift on hover */
    }

    .plan-card.selected {
        border-color: #ea580c; /* orange-600 */
        background-color: #4d280a; /* Darker orange-ish background */
        box-shadow: 0 0 15px rgba(234, 88, 12, 0.3); /* orange-600 shadow */
    }

    .plan-card h4 {
        margin-top: 0;
        margin-bottom: 0.5rem;
        font-size: 1.1rem;
        font-weight: 600;
        color: #fff;
    }

    .plan-card .price {
        font-size: 1.9rem;
        font-weight: bold;
        color: #ea580c; /* orange-600 */
        margin-bottom: 0.2rem;
        line-height: 1.1;
    }

    .plan-card .frequency {
        font-size: 0.85rem;
        color: #aaa;
        margin-bottom: 0.8rem;
    }

    .plan-card .original-price {
        font-size: 0.85rem;
        color: #888;
        margin-top: 0.5rem;
    }
     .plan-card .original-price .frequency {
         display: inline; /* Keep on same line as strikethrough */
         margin-bottom: 0;
     }

    .plan-card .savings-badge {
        position: absolute;
        top: -10px;
        right: -10px;
        background-color: #03dac6; /* Teal accent (contrasts well with orange) */
        color: #121212; /* Dark text on light badge */
        padding: 0.3em 0.7em;
        border-radius: 4px;
        font-size: 0.75rem;
        font-weight: bold;
        line-height: 1;
    }


    /* Form Styling */
    #payment-form {
       margin-top: 1.5rem;
       opacity: 0; /* Start hidden for fade-in */
       transition: opacity 0.5s ease-in-out;
    }

    #payment-form.fade-in {
        opacity: 1;
    }

    .loading-payment-element {
        text-align: center;
        padding: 2rem 1rem;
        color: #aaa;
        background-color: #2a2a2a;
        border-radius: 6px;
        margin-bottom: 1.5rem;
    }

    #payment-element {
        margin-bottom: 1.5rem;
        /* Stripe's Appearance API (theme: night) will handle most styling */
        /* Add min-height if it collapses weirdly during load */
         min-height: 150px;
         padding: 10px; /* Minimal padding for structure */
         border: 1px solid #444; /* Match card border */
         border-radius: 6px;
         background-color: #2a2a2a; /* Match card background */
    }
    #payment-element.hidden {
        display: none;
    }

    /* Error Message */
    .error-message {
        color: #cf6679; /* Material Design dark theme error color */
        background-color: rgba(207, 102, 121, 0.1); /* Subtle error background */
        border: 1px solid #cf6679;
        padding: 0.8em 1em;
        margin-top: 1rem;
        margin-bottom: 1.5rem;
        border-radius: 4px;
        font-size: 0.9rem;
    }

    /* Button */
    button {
        /* Orange gradient: orange-500 (#f97316) to orange-700 (#c2410c) */
        background: linear-gradient(to right, #f97316, #c2410c);
        color: white;
        font-family: inherit;
        font-size: 1rem;
        font-weight: 600;
        border: none;
        padding: 12px 16px;
        border-radius: 6px;
        cursor: pointer;
        transition: all 0.2s ease;
        display: block;
        width: 100%;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);
        text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.3); /* Add slight shadow for contrast */
    }
    button:hover:not(:disabled) {
        filter: brightness(1.1);
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3);
    }
    button:disabled {
        opacity: 0.5;
        cursor: not-allowed;
        background: #555; /* Darker disabled state */
        box-shadow: none;
        text-shadow: none;
    }
    button.processing {
        /* Optional: add specific styles for processing state */
         opacity: 0.7;
    }

    /* Utility */
    .hidden {
        display: none;
    }

</style>
--- End of File ---

--- File Path ---
frontend/src/lib/components/articles/ArticleCard.svelte

<!-- src/lib/components/articles/ArticleCard.svelte -->
<script lang="ts">
	import {
		type Article,
		extractTitleEmoji,
		formatDate,
		formatTitle,
		getArticleId
	} from '$lib/utils/articleUtils';
	import { createEventDispatcher } from 'svelte';

	const { article } = $props<{ article: Article }>();
	const dispatch = createEventDispatcher<{
		open: Article,
		likeToggle: { // Heart icon (Saved/Favorite)
			articleId: number | string;
			currentlyLiked: boolean;
			currentLikeCount: number;
		},
		toggleRead: Article, // Eye icon
		thumbsUpToggle: { // <<< NEW: Thumbs up icon
			articleId: number | string;
			currentlyThumbedUp: boolean;
			currentThumbsUpCount: number;
		}
	}>();

	const emoji = $derived(extractTitleEmoji(article.content));
	const displayTitle = $derived(formatTitle(article.title));
	const displayDate = $derived(formatDate(article.published_at));
	const articleId = $derived(getArticleId(article));
	// Format counts
	const displayLikeCount = $derived(article.like_count != null ? article.like_count.toLocaleString() : '0'); // Heart count
	const displayReadCount = $derived(article.read_count != null ? article.read_count.toLocaleString() : '0'); // Eye count
	const displayThumbsUpCount = $derived(article.thumbs_up_count != null ? article.thumbs_up_count.toLocaleString() : '0'); // <<< NEW: Thumbs up count

	function handleCardClick() {
		dispatch('open', article);
	}

	function handleLikeClick() { // Heart toggle
		dispatch('likeToggle', {
			articleId: articleId,
			currentlyLiked: article.is_liked ?? false,
			currentLikeCount: article.like_count ?? 0
		});
	}

	function handleToggleReadClick() { // Eye toggle
		console.log(`Toggle Read button clicked for article: ${articleId}, current state: ${article.is_read}`);
		dispatch('toggleRead', article);
	}

	// <<< NEW: Handler for thumbs up toggle
	function handleThumbsUpClick() {
		dispatch('thumbsUpToggle', {
			articleId: articleId,
			currentlyThumbedUp: article.is_thumbed_up ?? false,
			currentThumbsUpCount: article.thumbs_up_count ?? 0
		});
	}
</script>

<li
	on:click={handleCardClick}
	class="relative cursor-pointer list-none rounded-lg bg-gray-800 p-4 pb-8 shadow-md transition-all duration-200 hover:bg-gray-700 hover:shadow-xl"
	data-article-id={articleId}
>
	<!-- Status Icons Container (Top Right) -->
	<div class="absolute top-2 right-2 flex items-center space-x-2">
		<!-- Read Status Eye Icon / Button -->
		<button
			type="button"
			aria-label={article.is_read ? "Marquer comme non lu" : "Marquer comme lu"}
			title={article.is_read ? "Marquer comme non lu" : "Marquer comme lu"}
			on:click|stopPropagation={handleToggleReadClick}
			class="focus:outline-none rounded-full p-0.5 transition-colors duration-150 hover:bg-gray-600 focus-visible:ring-2 focus-visible:ring-teal-500 focus-visible:ring-offset-2 focus-visible:ring-offset-gray-800"
		>
			{#if article.is_read}
				<!-- Read Icon -->
				<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class="w-5 h-5 text-teal-400 pointer-events-none">
					<path d="M12 15a3 3 0 1 0 0-6 3 3 0 0 0 0 6Z" />
					<path fill-rule="evenodd" d="M1.323 11.447C2.811 6.976 7.028 3.75 12.001 3.75c4.97 0 9.185 3.223 10.675 7.69.12.362.12.752 0 1.113-1.487 4.471-5.705 7.697-10.677 7.697-4.97 0-9.186-3.223-10.675-7.69a1.762 1.762 0 0 1 0-1.113ZM17.25 12a5.25 5.25 0 1 1-10.5 0 5.25 5.25 0 0 1 10.5 0Z" clip-rule="evenodd" />
				</svg>
			{:else}
				<!-- Unread Icon -->
				<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-5 h-5 text-gray-500 pointer-events-none">
					<path stroke-linecap="round" stroke-linejoin="round" d="M2.036 12.322a1.012 1.012 0 0 1 0-.639C3.423 7.51 7.36 4.5 12 4.5c4.638 0 8.573 3.007 9.963 7.178.07.207.07.431 0 .639C20.577 16.49 16.64 19.5 12 19.5c-4.638 0-8.573-3.007-9.963-7.178Z" />
					<path stroke-linecap="round" stroke-linejoin="round" d="M15 12a3 3 0 1 1-6 0 3 3 0 0 1 6 0Z" />
				</svg>
			{/if}
		</button>

        <!-- <<< NEW: Thumbs Up Button/Icon >>> -->
		<button
			type="button"
			aria-label={article.is_thumbed_up ? "Retirer le pouce levé" : "Mettre un pouce levé"}
			title={article.is_thumbed_up ? "Retirer le pouce levé" : "Mettre un pouce levé"}
			on:click|stopPropagation={handleThumbsUpClick}
			class="focus:outline-none rounded-full p-0.5 transition-transform duration-100 ease-in-out hover:scale-110 active:scale-95 focus-visible:ring-2 focus-visible:ring-blue-500 focus-visible:ring-offset-2 focus-visible:ring-offset-gray-800"
		>
			<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor"
                 class:w-5={true}
                 class:h-5={true}
                 class:fill-blue-500={article.is_thumbed_up}
                 class:text-blue-500={article.is_thumbed_up}
                 class:fill-gray-500={!article.is_thumbed_up}
                 class:text-gray-500={!article.is_thumbed_up}
                 class:hover:fill-blue-400={!article.is_thumbed_up}
                 class:hover:text-blue-400={!article.is_thumbed_up}
                 class="pointer-events-none">
                <path d="M7.493 19.5c-.425 0-.82-.236-.975-.632A7.48 7.48 0 0 1 6 15.125c0-1.75.599-3.358 1.602-4.634.151-.192.373-.309.6-.397.473-.183.89-.514 1.212-.924a9.042 9.042 0 0 1 2.861-2.4c.723-.384 1.35-.956 1.653-1.715a4.498 4.498 0 0 0 .322-1.672V3a.75.75 0 0 1 .75-.75 2.25 2.25 0 0 1 2.25 2.25c0 1.152-.26 2.243-.723 3.218-.266.558.107 1.282.725 1.282h3.126c1.026 0 1.945.694 2.054 1.715.045.422.068.85.068 1.285a11.95 11.95 0 0 1-2.649 7.521c-.388.482-.987.729-1.605.729H14.23c-.483 0-.964-.078-1.423-.23l-3.114-1.04a4.501 4.501 0 0 0-1.423-.23h-.777ZM2.331 10.727a11.969 11.969 0 0 0-.831 4.398 12 12 0 0 0 .52 3.507C2.28 19.482 3.105 20 3.994 20H4.9c.445 0 .72-.498.523-.898a8.963 8.963 0 0 1-.924-3.977c0-1.708.476-3.305 1.302-4.666.245-.403-.028-.959-.5-.959H4.25c-.832 0-1.612.453-1.918 1.227Z" />
            </svg>
		</button>

		<!-- Like (Heart) Button/Icon -->
		<button
			type="button"
			aria-label={article.is_liked ? "Retirer des favoris" : "Ajouter aux favoris"}
			title={article.is_liked ? "Retirer des favoris" : "Ajouter aux favoris"}
			on:click|stopPropagation={handleLikeClick}
			class="focus:outline-none rounded-full p-0.5 transition-transform duration-100 ease-in-out hover:scale-110 active:scale-95 focus-visible:ring-2 focus-visible:ring-pink-500 focus-visible:ring-offset-2 focus-visible:ring-offset-gray-800"
		>
			<!-- Single SVG for Heart -->
			<svg
				xmlns="http://www.w3.org/2000/svg"
				viewBox="0 0 24 24"
				stroke-width="1.5"
				stroke="currentColor"
				class:w-5={true}
				class:h-5={true}
				class:fill-pink-500={article.is_liked}
				class:text-pink-500={article.is_liked}
				class:fill-none={!article.is_liked}
				class:text-gray-500={!article.is_liked}
				class:hover:text-pink-400={!article.is_liked}
				class="pointer-events-none"
			>
				<path stroke-linecap="round" stroke-linejoin="round" d="M21 8.25c0-2.485-2.099-4.5-4.688-4.5-1.935 0-3.597 1.126-4.312 2.733-.715-1.607-2.377-2.733-4.313-2.733C5.1 3.75 3 5.765 3 8.25c0 7.22 9 12 9 12s9-4.78 9-12Z" />
			</svg>
		</button>
	</div>

	<h3 class="text-left text-lg font-bold text-white pr-24"> <!-- Increased pr to avoid overlap -->
		<span class="mr-2">{emoji}</span>{displayTitle}
	</h3>
	{#if article.grade}
		<p class="mt-1 text-sm {article.grade == 'A' ? 'text-green-500' : article.grade == 'B' ? 'text-yellow-400' : article.grade == 'C' ? 'text-orange-400' : 'text-red-400'}">Grade de recommandation : {article.grade}</p>
	{/if}
	<div class="mt-2 flex items-center text-sm text-gray-400">
		{#if article.journal}
			<span class="mr-1">{article.journal}</span>
		{/if}
	</div>
	<div class="mt-2 flex items-center text-sm text-gray-400">
		<svg class="mr-1 h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
			<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"/>
		</svg>
		<span class="mr-1">Date :</span>
		<span>{displayDate}</span>
	</div>

	<!-- Counts Display (Bottom Right) -->
	<div class="absolute bottom-2 right-3 flex items-center space-x-3 text-xs text-gray-400">
		{#if article.read_count != null}
			<div class="flex items-center space-x-1" title="Nombre total de lectures">
				<!-- Use the filled eye icon (teal color) -->
				<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class="w-4 h-4 text-teal-400">
					<path d="M12 15a3 3 0 1 0 0-6 3 3 0 0 0 0 6Z" />
					<path fill-rule="evenodd" d="M1.323 11.447C2.811 6.976 7.028 3.75 12.001 3.75c4.97 0 9.185 3.223 10.675 7.69.12.362.12.752 0 1.113-1.487 4.471-5.705 7.697-10.677 7.697-4.97 0-9.186-3.223-10.675-7.69a1.762 1.762 0 0 1 0-1.113ZM17.25 12a5.25 5.25 0 1 1-10.5 0 5.25 5.25 0 0 1 10.5 0Z" clip-rule="evenodd" />
				</svg>
				<span>{displayReadCount}</span>
			</div>
		{/if}

        <!-- <<< NEW: Thumbs Up Count Display >>> -->
		{#if article.thumbs_up_count != null}
			<div class="flex items-center space-x-1" title="Nombre total de pouces levés">
                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class="w-3.5 h-3.5 text-blue-500">
                    <path d="M7.493 19.5c-.425 0-.82-.236-.975-.632A7.48 7.48 0 0 1 6 15.125c0-1.75.599-3.358 1.602-4.634.151-.192.373-.309.6-.397.473-.183.89-.514 1.212-.924a9.042 9.042 0 0 1 2.861-2.4c.723-.384 1.35-.956 1.653-1.715a4.498 4.498 0 0 0 .322-1.672V3a.75.75 0 0 1 .75-.75 2.25 2.25 0 0 1 2.25 2.25c0 1.152-.26 2.243-.723 3.218-.266.558.107 1.282.725 1.282h3.126c1.026 0 1.945.694 2.054 1.715.045.422.068.85.068 1.285a11.95 11.95 0 0 1-2.649 7.521c-.388.482-.987.729-1.605.729H14.23c-.483 0-.964-.078-1.423-.23l-3.114-1.04a4.501 4.501 0 0 0-1.423-.23h-.777ZM2.331 10.727a11.969 11.969 0 0 0-.831 4.398 12 12 0 0 0 .52 3.507C2.28 19.482 3.105 20 3.994 20H4.9c.445 0 .72-.498.523-.898a8.963 8.963 0 0 1-.924-3.977c0-1.708.476-3.305 1.302-4.666.245-.403-.028-.959-.5-.959H4.25c-.832 0-1.612.453-1.918 1.227Z" />
                </svg>
				<span>{displayThumbsUpCount}</span>
			</div>
		{/if}

		{#if article.like_count != null}
			<div class="flex items-center space-x-1" title="Nombre total de favoris">
				<svg
					xmlns="http://www.w3.org/2000/svg"
					viewBox="0 0 24 24"
					stroke-width="1.5"
					stroke="currentColor"
					class="w-3.5 h-3.5 fill-pink-500 text-pink-500"
				>
					<path stroke-linecap="round" stroke-linejoin="round" d="M21 8.25c0-2.485-2.099-4.5-4.688-4.5-1.935 0-3.597 1.126-4.312 2.733-.715-1.607-2.377-2.733-4.313-2.733C5.1 3.75 3 5.765 3 8.25c0 7.22 9 12 9 12s9-4.78 9-12Z" />
				</svg>
				<span>{displayLikeCount}</span>
			</div>
		{/if}
	</div>
</li>
--- End of File ---

--- File Path ---
frontend/src/lib/components/articles/ArticleImmersiveModal.svelte

<!-- src/lib/components/articles/ArticleImmersiveModal.svelte -->
<script lang="ts">
	import userProfileStore from '$lib/stores/user';
	import {
		type Article,
		extractTitleEmoji,
		formatDate,
		formatTitle,
		getArticleId,
		parseContent,
        type ContentSection // Make sure ContentSection is exported or defined here
	} from '$lib/utils/articleUtils';
	import { createEventDispatcher, tick } from 'svelte';
    import { Copy, Check } from 'lucide-svelte'; // Import icons

	const { article } = $props<{ article: Article | null }>();
	const dispatch = createEventDispatcher<{ close: void }>();

	// State for copy button feedback
	let copyStatus = $state<'idle' | 'copied' | 'error'>('idle');
	let copyTimeoutId: ReturnType<typeof setTimeout> | null = null;

	// Use $derived for computed values based on the 'article' prop
	const emoji = $derived(article ? extractTitleEmoji(article.content) : '📝');
	const displayTitle = $derived(article ? formatTitle(article.title) : '');
	const displayDate = $derived(article ? formatDate(article.published_at) : '');
	const contentSections = $derived(article ? parseContent(article.content) : []);
	const articleId = $derived(article ? getArticleId(article) : null);

	// --- Effect to mark article as read ---
	$effect(() => {
		const currentArticle = article;
		const currentUser = $userProfileStore;

		if (currentArticle && currentUser && articleId) {
			const articleIdNumber = typeof articleId === 'string' ? parseInt(articleId, 10) : articleId;

			if (!isNaN(articleIdNumber)) {
				console.log(`Modal opened for article ${articleIdNumber}. Marking as read for user ${currentUser.id}...`);
				// Fire-and-forget API call
				fetch('/api/mark-article-read', {
					method: 'POST',
					headers: { 'Content-Type': 'application/json' },
					body: JSON.stringify({ articleId: articleIdNumber }),
				})
				.then(async (response) => {
					if (!response.ok) {
						const errorData = await response.json().catch(() => ({ message: 'Failed to parse error response' }));
						console.error(`Failed to mark article ${articleIdNumber} as read:`, response.status, errorData.message || response.statusText);
					} else {
						console.log(`Article ${articleIdNumber} marked as read successfully.`);
					}
				})
				.catch((error) => {
					console.error(`Network error marking article ${articleIdNumber} as read:`, error);
				});
			} else {
				console.warn('Cannot mark article as read: Invalid article ID.', articleId);
			}
		}

        // Cleanup previous timeout if article changes or modal closes
		return () => {
			if (copyTimeoutId) {
				clearTimeout(copyTimeoutId);
                copyStatus = 'idle';
			}
		};
	});

	function handleClose() {
		dispatch('close');
	}

	function handleKeydown(event: KeyboardEvent) {
		if (event.key === 'Escape') {
			handleClose();
		}
	}

    // --- Function to copy content ---
    async function handleCopyContent() {
        if (!article || copyStatus === 'copied') return; // Don't do anything if already copied recently

        // 1. Assemble the text content
        let textToCopy = '';
        textToCopy += `${emoji} ${displayTitle}\n\n`; // Title

        // Metadata
        if (article.journal) textToCopy += `Journal: ${article.journal}\n`;
        if (displayDate !== 'Non spécifiée' && displayDate !== 'Date invalide') textToCopy += `Publié le: ${displayDate}\n`;
        if (article.grade) textToCopy += `Grade: ${article.grade}\n`;
        textToCopy += `\n---\n\n`;

        // Content Sections
        contentSections.forEach(section => {
            textToCopy += `${section.emoji} ${section.title}\n`;
            section.content.forEach(paragraph => {
                textToCopy += `- ${paragraph}\n`;
            });
            textToCopy += '\n';
        });

        // Fallback for non-sectioned content
        if (contentSections.length === 0 && article.content) {
             textToCopy += `${article.content}\n\n`;
        }

        // Original Link
        if (article.link) {
            textToCopy += `---\nLien original: ${article.link}\n`;
        }

        // 2. Use Clipboard API
        try {
            await navigator.clipboard.writeText(textToCopy.trim());
            copyStatus = 'copied';
            console.log('Article content copied to clipboard');

            // Reset status after a delay
            if (copyTimeoutId) clearTimeout(copyTimeoutId); // Clear previous timeout if any
            copyTimeoutId = setTimeout(() => {
                copyStatus = 'idle';
                copyTimeoutId = null;
            }, 2000); // Reset after 2 seconds

        } catch (err) {
            copyStatus = 'error';
            console.error('Failed to copy article content:', err);
            // Optionally show an error message to the user
             if (copyTimeoutId) clearTimeout(copyTimeoutId);
             copyTimeoutId = setTimeout(() => {
                copyStatus = 'idle';
                copyTimeoutId = null;
            }, 3000); // Show error longer
        }
    }

</script>

{#if article}
	<!-- svelte-ignore a11y-click-events-have-key-events a11y-no-static-element-interactions -->
	<div
		class="fixed inset-0 z-[200] flex items-center justify-center bg-black/70 backdrop-blur-sm"
		on:click|self={handleClose}
		on:keydown={handleKeydown}
		role="dialog"
        aria-modal="true"
        aria-labelledby="immersive-title"
	>
		<div
			class="modal-content relative max-h-[90vh] w-full max-w-4xl overflow-y-auto rounded-2xl bg-gray-900 p-6 md:p-8 shadow-2xl scrollbar-thin scrollbar-thumb-teal-500 scrollbar-track-gray-800"
		>
            <!-- Action Buttons Container -->
            <div class="absolute top-3 right-3 flex items-center space-x-2">
                <!-- Copy Button -->
                <button
                    type="button"
                    class="text-gray-400 hover:text-white focus:outline-none focus:ring-2 focus:ring-teal-500 rounded-full p-1.5 transition-colors duration-150"
                    on:click={handleCopyContent}
                    aria-label="Copier le contenu de l'article"
                    title="Copier le contenu"
                    disabled={copyStatus === 'copied'}
                >
                    {#if copyStatus === 'copied'}
                        <Check class="w-5 h-5 text-green-500" />
                    {:else if copyStatus === 'error'}
                         <Copy class="w-5 h-5 text-red-500" /> <!-- Or an error icon -->
                    {:else}
                        <Copy class="w-5 h-5" />
                    {/if}
                </button>

                <!-- Close Button -->
                <button
                    type="button"
                    class="text-3xl text-gray-400 hover:text-white focus:outline-none focus:ring-2 focus:ring-teal-500 rounded-full p-1 leading-none"
                    on:click={handleClose}
                    aria-label="Fermer la vue détaillée de l'article"
                >
                    ×
                </button>
            </div>


			<h2 id="immersive-title" class="mb-4 pr-16 text-2xl md:text-3xl font-bold text-white"> <!-- Increased pr for buttons -->
				<span class="mr-2">{emoji}</span>{displayTitle}
			</h2>

			{#if article.grade}
				<p class="mb-2 text-sm {article.grade == 'A' ? 'text-green-500' : article.grade == 'B' ? 'text-yellow-400' : article.grade == 'C' ? 'text-orange-400' : 'text-red-400'}">
					Grade de recommandation : {article.grade}
				</p>
			{/if}

			<div class="mb-4 flex flex-wrap items-center gap-x-4 text-sm text-gray-400">
				{#if article.journal}
				    <span>{article.journal}</span>
                {/if}
				{#if article.journal && displayDate !== 'Non spécifiée' && displayDate !== 'Date invalide'} <span class="text-gray-600">•</span> {/if}
                {#if displayDate !== 'Non spécifiée' && displayDate !== 'Date invalide'}
				    <span>Publié le : {displayDate}</span>
                {/if}
                <!-- Metadata Icons -->
                {#if article.read_count != null || article.thumbs_up_count != null || article.like_count != null}
                    <span class="text-gray-600">•</span>
                    <div class="flex items-center space-x-3">
                        {#if article.read_count != null}
                            <div class="flex items-center space-x-1" title="Nombre total de lectures">
                                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class="w-4 h-4 text-teal-400">
                                    <path d="M12 15a3 3 0 1 0 0-6 3 3 0 0 0 0 6Z" />
                                    <path fill-rule="evenodd" d="M1.323 11.447C2.811 6.976 7.028 3.75 12.001 3.75c4.97 0 9.185 3.223 10.675 7.69.12.362.12.752 0 1.113-1.487 4.471-5.705 7.697-10.677 7.697-4.97 0-9.186-3.223-10.675-7.69a1.762 1.762 0 0 1 0-1.113ZM17.25 12a5.25 5.25 0 1 1-10.5 0 5.25 5.25 0 0 1 10.5 0Z" clip-rule="evenodd" />
                                </svg>
                                <span>{article.read_count.toLocaleString()}</span>
                            </div>
                        {/if}
                        {#if article.thumbs_up_count != null}
                            <div class="flex items-center space-x-1" title="Nombre total de pouces levés">
                                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class="w-3.5 h-3.5 text-blue-500">
                                    <path d="M7.493 19.5c-.425 0-.82-.236-.975-.632A7.48 7.48 0 0 1 6 15.125c0-1.75.599-3.358 1.602-4.634.151-.192.373-.309.6-.397.473-.183.89-.514 1.212-.924a9.042 9.042 0 0 1 2.861-2.4c.723-.384 1.35-.956 1.653-1.715a4.498 4.498 0 0 0 .322-1.672V3a.75.75 0 0 1 .75-.75 2.25 2.25 0 0 1 2.25 2.25c0 1.152-.26 2.243-.723 3.218-.266.558.107 1.282.725 1.282h3.126c1.026 0 1.945.694 2.054 1.715.045.422.068.85.068 1.285a11.95 11.95 0 0 1-2.649 7.521c-.388.482-.987.729-1.605.729H14.23c-.483 0-.964-.078-1.423-.23l-3.114-1.04a4.501 4.501 0 0 0-1.423-.23h-.777ZM2.331 10.727a11.969 11.969 0 0 0-.831 4.398 12 12 0 0 0 .52 3.507C2.28 19.482 3.105 20 3.994 20H4.9c.445 0 .72-.498.523-.898a8.963 8.963 0 0 1-.924-3.977c0-1.708.476-3.305 1.302-4.666.245-.403-.028-.959-.5-.959H4.25c-.832 0-1.612.453-1.918 1.227Z" />
                                </svg>
                                <span>{article.thumbs_up_count.toLocaleString()}</span>
                            </div>
                        {/if}
                        {#if article.like_count != null}
                            <div class="flex items-center space-x-1" title="Nombre total de favoris">
                                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-3.5 h-3.5 fill-pink-500 text-pink-500">
                                    <path stroke-linecap="round" stroke-linejoin="round" d="M21 8.25c0-2.485-2.099-4.5-4.688-4.5-1.935 0-3.597 1.126-4.312 2.733-.715-1.607-2.377-2.733-4.313-2.733C5.1 3.75 3 5.765 3 8.25c0 7.22 9 12 9 12s9-4.78 9-12Z" />
                                </svg>
                                <span>{article.like_count.toLocaleString()}</span>
                            </div>
                        {/if}
                    </div>
                {/if}
			</div>

			{#each contentSections as section (section.title)}
				<div class="mb-6">
					<h3 class="mb-2 flex items-center text-lg font-semibold text-teal-400">
						<span class="mr-2 text-xl">{section.emoji}</span>
						{section.title}
					</h3>
					<ul class="section-content ml-4 list-disc space-y-1.5 pl-4 text-gray-300 marker:text-teal-500">
						{#each section.content as paragraph (paragraph)}
							<li class="selectable-text">{paragraph}</li>
						{/each}
					</ul>
				</div>
			{:else}
                <p class="selectable-text text-gray-400">{article.content || "Contenu non disponible."}</p>
            {/each}

			{#if article.link}
                <div class="mt-6 border-t border-gray-700 pt-4">
				    <a href={article.link} target="_blank" rel="noopener noreferrer" class="inline-flex items-center gap-2 text-teal-400 underline hover:text-teal-300 transition-colors duration-200">
					    Accéder à l'article original
                        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-4 h-4">
                            <path stroke-linecap="round" stroke-linejoin="round" d="M13.5 6H5.25A2.25 2.25 0 0 0 3 8.25v10.5A2.25 2.25 0 0 0 5.25 21h10.5A2.25 2.25 0 0 0 18 18.75V10.5m-10.5 6L21 3m0 0h-5.25M21 3v5.25" />
                        </svg>
				    </a>
                </div>
			{/if}
		</div>
	</div>
{/if}

<style>
    /* Apply selection styles to specific elements */
    .modal-content h2,
    .modal-content h3,
    .modal-content p,
    .modal-content li,
    .modal-content span:not(.mr-2):not(.text-gray-600), /* Avoid selecting separators */
    .modal-content a
    {
        user-select: text !important;
        -webkit-user-select: text !important;
        cursor: text;
    }
    /* Or using the added class */
     .selectable-text {
        user-select: text !important;
        -webkit-user-select: text !important;
        cursor: text;
    }

	.scrollbar-thin {
		scrollbar-width: thin;
		scrollbar-color: #14b8a6 #1f2937; /* thumb track */
	}

	.scrollbar-thin::-webkit-scrollbar {
		width: 8px;
		height: 8px;
	}

	.scrollbar-thin::-webkit-scrollbar-track {
		background: #1f2937;
        border-radius: 10px;
	}

	.scrollbar-thin::-webkit-scrollbar-thumb {
		background-color: #14b8a6;
		border-radius: 6px;
		border: 2px solid #1f2937;
	}
</style>
--- End of File ---

--- File Path ---
frontend/src/lib/components/articles/ArticleListView.svelte

<!-- src/lib/components/articles/ArticleListView.svelte -->
<script lang="ts">
	import { goto } from '$app/navigation';
	import ConfirmationModal from '$lib/components/ui/ConfirmationModal.svelte';
	import * as Select from '$lib/components/ui/select';
	import userProfileStore from '$lib/stores/user';
	import type { Article } from '$lib/utils/articleUtils';
	import { getArticleId } from '$lib/utils/articleUtils';
	import { debounce } from '$lib/utils/debounce';
	import { tick } from 'svelte';
// Import tick
	import ArticleCard from './ArticleCard.svelte';
	import ArticleImmersiveModal from './ArticleImmersiveModal.svelte';


	// --- Constants ---
    const ALL_CATEGORIES_VALUE = "__ALL__"; // Special value for "All"
    const ALL_CATEGORIES_LABEL = "Toutes les catégories"; // Display label

	// --- Component Props ---
	interface FilterOption {
		value: string;
		label: string;
	}
    interface SubDisciplineOption {
        id: number;
        name: string;
    }

	const {
		pageTitle = 'Articles',
		filters = [] as FilterOption[],
		initialFilterValue = null,
		filterSelectLabel = 'Filtrer par',
		showSignupPromptProp = false,
        enableSearch = false,
        searchDebounceMs = 300,
        searchPlaceholder = "Rechercher par mots-clés...",
		apiEndpoint = '/api/get_articles_my_veille',
		apiFilterParamName = 'specialty',
		userId = null as string | null,
        savedArticleIds = new Set<string | number>(),
		articleOfTheDayTitleTemplate = '🔥 Article du jour pour {filter} :',
		previousArticlesTitleTemplate = '📖 Articles précédents pour {filter} :',
		loadMoreButtonText = "Charger plus d'articles",
		allArticlesLoadedText = "Tous les articles ont été chargés",
        emptyStateMessage = null as string | null,
        itemsPerPage = 10,
        subDisciplineSelectLabel = "Affiner par sous-spécialité",
        showAllSubDisciplinesOption = true,
        allSubDisciplinesLabel = "Toutes les sous-spécialités",
        showAllCategoriesOption = true,
        subDisciplineFetchMode = 'user' as 'user' | 'public'
	} = $props<{
		pageTitle?: string;
		filters?: FilterOption[];
		initialFilterValue?: string | null;
		filterSelectLabel?: string;
		showSignupPromptProp?: boolean;
        enableSearch?: boolean;
        searchDebounceMs?: number;
        searchPlaceholder?: string;
		apiEndpoint?: string;
		apiFilterParamName?: string;
		userId?: string | null;
        savedArticleIds?: Set<string | number>;
		articleOfTheDayTitleTemplate?: string;
		previousArticlesTitleTemplate?: string;
		loadMoreButtonText?: string;
		allArticlesLoadedText?: string;
        emptyStateMessage?: string | null;
        itemsPerPage?: number;
        subDisciplineSelectLabel?: string;
        showAllSubDisciplinesOption?: boolean;
        allSubDisciplinesLabel?: string;
        showAllCategoriesOption?: boolean;
        subDisciplineFetchMode?: 'user' | 'public';
	}>();

    // Update initial filter default logic slightly to handle empty filters AND showAll option
    const defaultInitialFilter = filters.length > 0 ? (filters[0]?.value ?? null) : (showAllCategoriesOption ? ALL_CATEGORIES_VALUE : null);

	// --- Internal State ---
	let selectedFilter = $state<string | null>(initialFilterValue ?? defaultInitialFilter);
    let selectedSubDiscipline = $state<string | null>(null);
    let availableSubDisciplines = $state<SubDisciplineOption[]>([]);
    let isLoadingSubDisciplines = $state(false);
	let articles = $state<Article[]>([]);
	let articleOfTheDay = $state<Article | null>(null);
	let isLoading = $state(false);
    let isInitialLoading = $state(true);
	let hasMore = $state(true);
	let offset = $state(0);
	let immersiveArticle = $state<Article | null>(null);
	let searchQuery = $state('');
    let fetchError = $state<string | null>(null);
    let showSignupPrompt = $state(false);
    let showUnlikeConfirmModal = $state(false);
    let articleToUnlike = $state<{
        articleId: number | string;
        currentlyLiked: boolean;
        currentLikeCount: number;
    } | null>(null);

	// --- Derived State ---
	const sortedFilters = $derived(
        [...filters].sort((a: FilterOption, b: FilterOption) =>
			a.label.localeCompare(b.label, 'fr', { sensitivity: 'base' })
		)
    );
	const triggerContent = $derived(
        selectedFilter === ALL_CATEGORIES_VALUE
            ? ALL_CATEGORIES_LABEL
            : (filters.find((f: FilterOption) => f.value === selectedFilter)?.label ?? filterSelectLabel)
    );
	const filterForTitle = $derived(
        selectedFilter === ALL_CATEGORIES_VALUE
            ? 'toutes les catégories'
            : (filters.find((f: FilterOption) => f.value === selectedFilter)?.label ?? 'la sélection')
    );
    const searchActive = $derived(enableSearch && searchQuery.trim().length > 0);
    const showSubDisciplineFilter = $derived(
        (availableSubDisciplines.length > 0 || isLoadingSubDisciplines) &&
        selectedFilter !== ALL_CATEGORIES_VALUE &&
        selectedFilter !== null
    );
    const subDisciplineTriggerContent = $derived(
        selectedSubDiscipline === null ? subDisciplineSelectLabel :
        selectedSubDiscipline === allSubDisciplinesLabel ? allSubDisciplinesLabel : selectedSubDiscipline
    );
    const subDisciplineOptions = $derived(
        showAllSubDisciplinesOption
            ? [{ id: -1, name: allSubDisciplinesLabel }, ...availableSubDisciplines]
            : availableSubDisciplines
    );
    const isViewingSubDiscipline = $derived(selectedSubDiscipline !== null && selectedSubDiscipline !== allSubDisciplinesLabel);
    const isLikedArticlesView = $derived(apiEndpoint === '/api/get-liked-articles');

    // --- Core Logic ---

    // Effect to fetch SUB-DISCIPLINES when main filter changes
    $effect(() => {
        const currentMainFilter = selectedFilter;
        selectedSubDiscipline = null; // Reset sub-selection
        availableSubDisciplines = []; // Clear current subs

        if (!currentMainFilter || currentMainFilter === ALL_CATEGORIES_VALUE) {
             isLoadingSubDisciplines = false;
             return;
        }

        isLoadingSubDisciplines = true;
        console.log(`Fetching sub-disciplines for: ${currentMainFilter} (Mode: ${subDisciplineFetchMode})`);

        // Construct URL with the mode parameter
        const apiUrl = `/api/get_sub_disciplines?disciplineName=${encodeURIComponent(currentMainFilter)}&mode=${subDisciplineFetchMode}`;

        fetch(apiUrl)
            .then(async (res) => {
                if (!res.ok) {
                    const errorText = await res.text().catch(() => `HTTP error ${res.status}`);
					throw new Error(`Erreur réseau ${res.status}: ${errorText}`);
                }
                return res.json();
            })
            .then((data: SubDisciplineOption[]) => {
                 availableSubDisciplines = data || [];
            })
            .catch(error => {
                console.error("Error fetching sub-disciplines:", error);
                availableSubDisciplines = [];
                fetchError = `Erreur chargement sous-spécialités.`; // More generic error
            })
            .finally(() => {
                isLoadingSubDisciplines = false;
            });
    });

    // Create a debounced function for triggering the fetch
    const debouncedFetchArticles = debounce(fetchArticles, searchDebounceMs);

    // Effect to trigger DEBOUNCED article fetch on filter/search/user changes
	$effect(() => {
        const _filter = selectedFilter;
        const _subFilter = selectedSubDiscipline;
        const _search = searchQuery;
        const _userId = $userProfileStore?.id ?? null; // Use store here

        // Check if API needs user ID and if it's available
        if (apiEndpoint === '/api/get-liked-articles' && !_userId) {
            // console.log("$effect: Blocking fetch - waiting for userId for liked articles.");
            if (!isInitialLoading) { // Only clear if not the very first load
                articles = [];
                articleOfTheDay = null;
                hasMore = false;
            }
            // Keep isInitialLoading true until user ID is available or handled
            return;
        }

        // Check if a filter is required and if it's selected
        if (_filter === null && filters.length > 0) { // Only block if filters ARE available but none is selected
            // console.log("$effect: Blocking fetch - selectedFilter is null but filters exist.");
             if (!isInitialLoading) {
                articles = [];
                articleOfTheDay = null;
                hasMore = false;
            }
            return;
        }

        // console.log("$effect: Conditions met, resetting state and triggering fetch");
        isInitialLoading = true; // Set to true before fetch starts
        articles = [];
        articleOfTheDay = null;
        offset = 0;
        hasMore = true;
        fetchError = null;

		// console.log("$effect: Triggering debounced fetchArticles call");
        debouncedFetchArticles(false); // Call fetch directly or debounced
	});

    // Reusable fetch function
    function fetchArticles(isLoadMore = false) {
        const currentFilter = selectedFilter;
        const currentSubFilter = (currentFilter !== ALL_CATEGORIES_VALUE) ? selectedSubDiscipline : null;
        const currentSearch = searchQuery;
        const currentOffset = isLoadMore ? offset : 0;
        const currentUserId = $userProfileStore?.id ?? null; // Use store

        // Re-check dependency on user ID
        if (apiEndpoint === '/api/get-liked-articles' && !currentUserId) {
            // console.log("fetchArticles exit: Waiting for user ID for liked articles.");
            if (!isLoadMore) {
                 articles = [];
                 articleOfTheDay = null;
                 hasMore = false;
                 isLoading = false;
                 isInitialLoading = false; // Mark initial load as done (even though failed)
            }
            return;
        }

        // Re-check filter requirement
        if (currentFilter === null && filters.length > 0) {
            // console.log("fetchArticles exit: selectedFilter is null but filters exist.");
            if (!isLoadMore) {
                articles = [];
                articleOfTheDay = null;
                hasMore = false;
                isLoading = false;
                isInitialLoading = false; // Mark initial load as done
            }
            return;
        }


        isLoading = true;
        if (!isLoadMore) {
            fetchError = null;
            // isInitialLoading is already true here due to the $effect logic
        } else {
            // Don't reset initial loading flag when loading more
        }

		// console.log(`FETCHING articles -> Endpoint: ${apiEndpoint}, Filter: ${currentFilter}, SubFilter: ${currentSubFilter}, Search: ${currentSearch}, Offset: ${currentOffset}, UserID: ${currentUserId}`);

		const url = new URL(apiEndpoint, window.location.origin);

        // Append parameters
        if (currentFilter && currentFilter !== ALL_CATEGORIES_VALUE) {
		    url.searchParams.set(apiFilterParamName, currentFilter);
            if (currentSubFilter && currentSubFilter !== allSubDisciplinesLabel) {
                 url.searchParams.set('subDiscipline', currentSubFilter);
            }
        }
		url.searchParams.set('offset', currentOffset.toString());
		url.searchParams.set('limit', itemsPerPage.toString()); // <<< ADD LIMIT
        if (enableSearch && currentSearch.trim()) {
            url.searchParams.set('search', currentSearch.trim());
        }
        // Add user ID if needed by the endpoint (handled by RPC now mostly)
        // if (userId) { url.searchParams.set('userId', userId); }

		fetch(url.toString())
			.then(async (res) => {
                if (!res.ok) {
                    const errorText = await res.text();
					throw new Error(`Erreur réseau ${res.status}: ${errorText || res.statusText}`);
                }
                return res.json();
            })
			.then((data) => {
                // console.log(`API Response (Offset: ${currentOffset}):`, data);
				if (data && Array.isArray(data.data)) {
                    const fetchedArticles: Article[] = data.data;

                    if (isLoadMore) {
                        articles = [...articles, ...fetchedArticles];
                    } else {
                        // Split AotD only if NOT searching, NOT liked view, and NOT sub-discipline view
                         if (!searchActive && !isLikedArticlesView && !isViewingSubDiscipline && fetchedArticles.length > 0) {
                            articleOfTheDay = fetchedArticles[0];
                            articles = fetchedArticles.slice(1);
                        } else {
                            // Otherwise, all fetched articles go into the main list
                            articleOfTheDay = null;
                            articles = fetchedArticles;
                        }
                    }

                    // Update offset and hasMore based on fetched count vs limit
                    offset = currentOffset + fetchedArticles.length;
                    hasMore = fetchedArticles.length >= itemsPerPage;

				} else {
                    console.warn('API response format unexpected or data.data is not an array:', data);
					throw new Error("Format de réponse invalide de l'API");
				}
            })
			.catch((error) => {
                console.error('Error fetching articles:', error);
                fetchError = error.message || "Une erreur est survenue lors du chargement des articles.";
                // Clear articles on error unless loading more
                if (!isLoadMore) {
                    articles = [];
                    articleOfTheDay = null;
                }
                hasMore = false; // Stop loading more on error
            })
			.finally(() => {
                // console.log(`Fetch finished (Offset: ${currentOffset})`);
                isLoading = false;
                // Set initial loading false only after the *first* fetch completes (success or error)
                if (!isLoadMore) {
                    isInitialLoading = false;
                }
            });
    }

    function loadMore() {
         if (!isLoading && hasMore) {
             fetchArticles(true);
         }
	}

    function openImmersive(event: CustomEvent<Article>) {
        const clickedArticle = event.detail;
        const articleIdToUpdate = getArticleId(clickedArticle);
        const currentUser = $userProfileStore; // Get current user state

        // Optimistically mark as read in UI *before* showing modal
        markArticleAsReadUI(articleIdToUpdate);

        // Set the article for the modal
        immersiveArticle = getArticleFromState(articleIdToUpdate) ?? clickedArticle;

        // Call API to mark as read (fire and forget)
        markArticleAsReadAPI(articleIdToUpdate, currentUser?.id);

        // Add class to body
		document.body.classList.add('overflow-hidden');
	}

	function closeImmersive() {
		immersiveArticle = null;
		document.body.classList.remove('overflow-hidden');
	}

    // --- Separate UI update function ---
    function markArticleAsReadUI(articleId: string | number) {
        console.log(`Optimistic UI: Marking article ${articleId} as read.`);
         if (articleOfTheDay && getArticleId(articleOfTheDay) === articleId) {
            articleOfTheDay = { ...articleOfTheDay, is_read: true };
        }
        articles = articles.map(a =>
            getArticleId(a) === articleId ? { ...a, is_read: true } : a
        );
    }

    // --- Separate API call function ---
    function markArticleAsReadAPI(articleId: string | number, userId: string | null | undefined) {
         if (userId && typeof articleId === 'number' && !isNaN(articleId)) {
            // console.log(`Calling API to mark article ${articleId} as read for user ${userId}...`);
             fetch('/api/mark-article-read', { // Use the single mark-read endpoint
                 method: 'POST',
                 headers: { 'Content-Type': 'application/json' },
                 body: JSON.stringify({ articleId: articleId }),
             })
             .then(async (response) => {
                 if (!response.ok) {
                     const errorData = await response.json().catch(() => ({ message: 'Failed to parse error response' }));
                     console.error(`API failed to mark article ${articleId} as read:`, response.status, errorData.message || response.statusText);
                     // Optionally revert UI? Might be complex if user navigates away.
                 } else {
                    //  console.log(`API confirmed article ${articleId} marked as read.`);
                 }
             })
             .catch((error) => {
                 console.error(`Network error marking article ${articleId} as read:`, error);
             });
        } else if (!userId) {
            // console.log("User not logged in, skipping mark as read API call.");
        } else {
            console.warn("Cannot mark article as read via API: Invalid article ID.", articleId);
        }
    }

     // Helper to get the current state of an article
    function getArticleFromState(articleId: string | number): Article | null {
        if (articleOfTheDay && getArticleId(articleOfTheDay) === articleId) {
            return articleOfTheDay;
        }
        return articles.find(a => getArticleId(a) === articleId) || null;
    }


    $effect(() => {
        if (showSignupPromptProp && !$userProfileStore) {
            const timer = setTimeout(() => {
                showSignupPrompt = true;
            }, 3000);
            return () => clearTimeout(timer);
        } else {
            showSignupPrompt = false;
        }
    });

	function handleSignup() {
		goto('/signup');
	}

    function handleSubDisciplineChange(value: string | null) {
        const newValue = value === allSubDisciplinesLabel ? null : value;
        if (selectedSubDiscipline !== newValue) {
            selectedSubDiscipline = newValue;
            // Fetch will be triggered by the $effect watching selectedSubDiscipline
        }
    }

    // --- Handle Like Toggle ---
    function handleLikeToggle(event: CustomEvent<{ articleId: number | string; currentlyLiked: boolean; currentLikeCount: number; }>) {
		const { articleId, currentlyLiked, currentLikeCount } = event.detail;
		const currentUser = $userProfileStore; if (!currentUser) { console.warn("User not logged in, cannot toggle like."); return; }
		if (isLikedArticlesView && currentlyLiked) { articleToUnlike = { articleId, currentlyLiked, currentLikeCount }; showUnlikeConfirmModal = true; return; }
		const newStateIsLiked = !currentlyLiked; const newLikeCount = currentlyLiked ? Math.max(0, currentLikeCount - 1) : currentLikeCount + 1;
		performOptimisticLikeUpdate(articleId, newStateIsLiked, newLikeCount); triggerLikeApiCall(articleId, currentlyLiked, currentLikeCount);
        if (isLikedArticlesView && newStateIsLiked === false) { removeArticleFromUI(articleId); }
	}

    // --- Handle Thumbs Up Toggle ---
    function handleThumbsUpToggle(event: CustomEvent<{ articleId: number | string; currentlyThumbedUp: boolean; currentThumbsUpCount: number; }>) {
        const { articleId, currentlyThumbedUp, currentThumbsUpCount } = event.detail;
        const currentUser = $userProfileStore;
        if (!currentUser) { console.warn("User not logged in, cannot toggle thumbs-up."); return; }
        const newStateIsThumbedUp = !currentlyThumbedUp;
        const newThumbsUpCount = currentlyThumbedUp ? Math.max(0, currentThumbsUpCount - 1) : currentThumbsUpCount + 1;
        performOptimisticThumbsUpUpdate(articleId, newStateIsThumbedUp, newThumbsUpCount);
        triggerThumbsUpApiCall(articleId, currentlyThumbedUp, currentThumbsUpCount);
    }
    function performOptimisticThumbsUpUpdate(articleId: number | string, newStateIsThumbedUp: boolean, newThumbsUpCount: number) {
        // console.log(`Optimistic ThumbsUp Update: Setting thumbed_up=${newStateIsThumbedUp}, count=${newThumbsUpCount} for article ${articleId}`);
        if (articleOfTheDay && getArticleId(articleOfTheDay) === articleId) {
            articleOfTheDay = { ...articleOfTheDay, is_thumbed_up: newStateIsThumbedUp, thumbs_up_count: newThumbsUpCount };
        }
        articles = articles.map(a =>
            getArticleId(a) === articleId ? { ...a, is_thumbed_up: newStateIsThumbedUp, thumbs_up_count: newThumbsUpCount } : a
        );
    }
    function triggerThumbsUpApiCall(articleId: number | string, originalIsThumbedUp: boolean, originalThumbsUpCount: number) {
        if (typeof articleId !== 'number' || isNaN(articleId)) { console.warn("Cannot toggle thumbs-up: Invalid article ID.", articleId); return; }
        const revertThumbsUpUpdate = () => {
            // console.log(`Reverting thumbs-up status for article ${articleId} to thumbed_up=${originalIsThumbedUp}, count=${originalThumbsUpCount}`);
            performOptimisticThumbsUpUpdate(articleId, originalIsThumbedUp, originalThumbsUpCount);
        };
        fetch('/api/toggle-article-thumbs-up', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ articleId: articleId }), })
        .then(async (response) => {
            const responseData = await response.json().catch(() => ({}));
            if (!response.ok) { console.error(`API error toggling thumbs-up for article ${articleId}:`, response.status, responseData.message || response.statusText); revertThumbsUpUpdate(); }
            else {
                const currentOptimisticState = getArticleFromState(articleId);
                if (currentOptimisticState && currentOptimisticState.is_thumbed_up !== responseData.thumbed_up) { console.warn(`Optimistic thumbs-up state mismatch for ${articleId}. Reverting.`); revertThumbsUpUpdate(); }
            }
        })
        .catch((error) => { console.error(`Network error toggling thumbs-up for article ${articleId}:`, error); revertThumbsUpUpdate(); });
    }

	// --- Modal Event Handlers ---
	function handleConfirmUnlike() {
		if (!articleToUnlike) return;

		// console.log("User confirmed unlike via modal for article:", articleToUnlike.articleId);
		const { articleId, currentlyLiked, currentLikeCount } = articleToUnlike;

        // Mark as unliked and update count optimistically
		performOptimisticLikeUpdate(articleId, false, Math.max(0, currentLikeCount - 1));
        // Trigger the API call
		triggerLikeApiCall(articleId, currentlyLiked, currentLikeCount);
        // Remove from UI specifically for the liked articles view
        removeArticleFromUI(articleId);

		// Reset modal state
		showUnlikeConfirmModal = false;
		articleToUnlike = null;
	}

	function handleCancelUnlike() {
		// console.log("Unlike cancelled via modal.");
		showUnlikeConfirmModal = false;
		articleToUnlike = null;
	}

    // --- Helper to remove article visually ---
    function removeArticleFromUI(articleIdToRemove: number | string) {
        if (articleOfTheDay && getArticleId(articleOfTheDay) === articleIdToRemove) {
            articleOfTheDay = null;
        }
        articles = articles.filter(a => getArticleId(a) !== articleIdToRemove);
    }


	// --- Extracted Helper Functions ---
	function performOptimisticLikeUpdate(articleId: number | string, newStateIsLiked: boolean, newLikeCount: number) {
		// console.log(`Optimistic Like Update: Setting liked=${newStateIsLiked}, count=${newLikeCount} for article ${articleId}`);
		if (articleOfTheDay && getArticleId(articleOfTheDay) === articleId) {
			articleOfTheDay = { ...articleOfTheDay, is_liked: newStateIsLiked, like_count: newLikeCount };
		}
		articles = articles.map(a =>
			getArticleId(a) === articleId ? { ...a, is_liked: newStateIsLiked, like_count: newLikeCount } : a
		);
	}

    // --- Trigger Like API Call (with revert logic passed in) ---
	function triggerLikeApiCall(articleId: number | string, originalIsLiked: boolean, originalLikeCount: number) {
		if (typeof articleId !== 'number' || isNaN(articleId)) {
            console.warn("Cannot toggle like: Invalid article ID.", articleId);
			return; // Exit if ID is invalid
		}

        // Define the revert function specific to this action
        const revertLikeUpdate = () => {
            console.log(`Reverting like status for article ${articleId} to liked=${originalIsLiked}, count=${originalLikeCount}`);
            performOptimisticLikeUpdate(articleId, originalIsLiked, originalLikeCount);
            // If unliking on liked view was reverted, potentially add item back (more complex UI logic)
            if (isLikedArticlesView && !originalIsLiked) {
                 console.warn("Reverting an unlike on /favoris. Re-fetching might be needed to add the item back correctly if it was removed.");
                 // Consider re-fetching or more complex state management here if needed
            }
        };

		fetch('/api/toggle-article-like', {
			method: 'POST',
			headers: { 'Content-Type': 'application/json' },
			body: JSON.stringify({ articleId: articleId }),
		})
		.then(async (response) => {
			const responseData = await response.json().catch(() => ({}));
			if (!response.ok) {
				console.error(`API error toggling like for article ${articleId}:`, response.status, responseData.message || response.statusText);
                revertLikeUpdate(); // Revert on API error
			} else {
				// console.log(`API confirmed like status for ${articleId} is now: ${responseData.liked}`);
                // Optional: Verify API state vs optimistic state
                const currentOptimisticState = getArticleFromState(articleId);
                if (currentOptimisticState && currentOptimisticState.is_liked !== responseData.liked) {
                    console.warn(`Optimistic like state mismatch for ${articleId}. Reverting.`);
                    revertLikeUpdate();
                }
			}
		})
		.catch((error) => {
			console.error(`Network error toggling like for article ${articleId}:`, error);
            revertLikeUpdate(); // Revert on network error
		});
	}

	// --- CORRECTED: Handler for Toggling Read Status ---
	async function handleToggleRead(event: CustomEvent<Article>) {
		const articleToToggle = event.detail;
		const articleId = getArticleId(articleToToggle);
		const currentUser = $userProfileStore;

		if (!currentUser?.id || typeof articleId !== 'number' || isNaN(articleId)) {
			console.warn("Cannot toggle read: User not logged in or invalid article ID.", { userId: currentUser?.id, articleId });
			return;
		}

		// console.log(`UI: handleToggleRead triggered for article ${articleId}`);

		// --- Find original state for potential revert ---
        const originalState = getArticleFromState(articleId);
        if (!originalState) {
             console.error(`Cannot find article ${articleId} in state to toggle read status.`);
             return;
        }
        const originalIsRead = originalState.is_read ?? false;
		const newReadState = !originalIsRead;

		// --- 1. Optimistic UI Update (Update in place, never remove) ---
		// console.log(`Optimistic UI: Setting article ${articleId} is_read to ${newReadState}`);
		if (articleOfTheDay && getArticleId(articleOfTheDay) === articleId) {
			articleOfTheDay = { ...articleOfTheDay, is_read: newReadState };
		}
		articles = articles.map(a =>
			getArticleId(a) === articleId ? { ...a, is_read: newReadState } : a
		);
		await tick(); // Wait for DOM update

		// --- 2. API Call ---
		try {
			// console.log(`API Call: Toggling read status for article ${articleId}`);
			const response = await fetch('/api/toggle-article-read', {
				method: 'POST',
				headers: { 'Content-Type': 'application/json' },
				body: JSON.stringify({ articleId: articleId }),
			});
			const responseData = await response.json().catch(() => ({}));

			if (!response.ok) {
				throw new Error(responseData.message || `API Error: ${response.status}`);
			}
			// console.log(`API Success: Article ${articleId} read status is now ${responseData.read}`);

            // Optional: Verify API response matches optimistic state
            if (responseData.read !== newReadState) {
                console.warn(`Optimistic/API read state mismatch for ${articleId}. Reverting UI.`);
                performReadRevert(originalState);
            }

		} catch (error: any) {
			console.error(`Error toggling read status API for article ${articleId}:`, error);
			// --- 3. Revert Optimistic UI on Error ---
			console.log(`Reverting optimistic UI read status change for article ${articleId}`);
			performReadRevert(originalState);
            fetchError = `Erreur lors de la mise à jour du statut 'lu' pour l'article ${articleId}.`; // Show user-facing error
		}
	}

	// --- Helper to Revert Read Status UI Change ---
    function performReadRevert(originalArticleState: Article) {
         const articleId = getArticleId(originalArticleState);
         // console.log(`Reverting UI: Setting article ${articleId} is_read back to ${originalArticleState.is_read}`);
          if (articleOfTheDay && getArticleId(articleOfTheDay) === articleId) {
            articleOfTheDay = originalArticleState; // Restore original object
        }
        articles = articles.map(a =>
            getArticleId(a) === articleId ? originalArticleState : a // Restore original object
        );
    }


</script>

<div class="min-h-screen bg-black px-4 py-8 md:py-12 text-white">
	<div class="mx-auto max-w-4xl">
		{#if showSignupPrompt}
			<div
				class="mb-6 flex flex-col sm:flex-row items-center justify-between gap-3 rounded-lg bg-teal-600/20 p-4 shadow-md transition-all duration-300 hover:bg-teal-600/30"
			>
				<p class="text-sm font-medium text-center sm:text-left">
                    Débloquez tout le potentiel ! Inscrivez-vous pour sauvegarder vos articles favoris et personnaliser votre veille.
                </p>
				<button
					on:click={handleSignup}
					class="group flex shrink-0 inline-block items-center justify-center gap-2 rounded-full bg-teal-500 px-4 py-2 text-xs font-semibold text-white transition-all duration-200 hover:bg-teal-600 whitespace-nowrap"
				>
					<span>S'inscrire gratuitement</span>
					<svg
						class="h-4 w-4 transition-transform duration-300 group-hover:translate-x-1"
						fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"
					> <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7m0 0l-7 7m7-7H3"/> </svg>
				</button>
			</div>
		{/if}

		{#if fetchError && !isLoading}
             <div class="my-6 p-4 rounded-lg bg-red-900/30 border border-red-700 text-red-300 text-center" role="alert">
                <p><strong>Erreur :</strong> {fetchError}</p>
                <button on:click={() => fetchError = null} class="mt-2 text-xs underline hover:text-red-100">Ignorer</button>
             </div>
        {/if}


		<h1 class="mb-4 text-3xl font-bold text-white">{pageTitle}</h1>

		<div class="mb-6 flex flex-col gap-4">
            <div class="flex flex-col md:flex-row flex-wrap gap-4">
                {#if filters.length > 0 || showAllCategoriesOption}
                    <div class="relative w-full md:max-w-xs shrink-0">
                        <Select.Root type="single" name="selectedFilter" value={selectedFilter ?? undefined} onValueChange={(detail) => selectedFilter = detail}>
                            <Select.Trigger
                                class="w-full rounded-lg border border-gray-700 bg-gray-800 px-4 py-3 text-sm font-medium text-white shadow-sm transition-all duration-300 hover:bg-gray-700 focus:ring-2 focus:ring-teal-500 focus:outline-none"
                                disabled={isLoading && isInitialLoading}
                            >
                                {triggerContent}
                            </Select.Trigger>
                            <Select.Content
                                class="scrollbar-thin scrollbar-thumb-teal-500 scrollbar-track-gray-800 z-20 max-h-60 overflow-y-auto rounded-lg border border-gray-700 bg-gray-900 shadow-lg"
                            >
                                <Select.Group>
                                    <Select.GroupHeading class="px-4 py-2 font-semibold text-gray-400 text-xs uppercase tracking-wider">
                                        {filterSelectLabel}
                                    </Select.GroupHeading>
                                    {#if showAllCategoriesOption}
                                        <Select.Item
                                            value={ALL_CATEGORIES_VALUE}
                                            label={ALL_CATEGORIES_LABEL}
                                            class="cursor-pointer px-4 py-2 text-white transition-all duration-200 hover:bg-teal-600/80 hover:text-white data-[selected]:bg-teal-700"
                                        >
                                            {ALL_CATEGORIES_LABEL}
                                        </Select.Item>
                                    {/if}
                                    {#each sortedFilters as filter (filter.value)}
                                        <Select.Item
                                            value={filter.value}
                                            label={filter.label}
                                            class="cursor-pointer px-4 py-2 text-white transition-all duration-200 hover:bg-teal-600/80 hover:text-white data-[selected]:bg-teal-700"
                                        >
                                            {filter.label}
                                        </Select.Item>
                                    {/each}
                                </Select.Group>
                            </Select.Content>
                        </Select.Root>
                    </div>
                {/if}

                {#if showSubDisciplineFilter}
                    <div class="relative w-full md:max-w-xs shrink-0">
                        <Select.Root
                            type="single"
                            name="selectedSubDiscipline"
                            value={selectedSubDiscipline ?? allSubDisciplinesLabel}
                            onValueChange={(detail) => handleSubDisciplineChange(detail)}
                        >
                            <Select.Trigger
                                class="w-full rounded-lg border border-gray-700 bg-gray-800 px-4 py-3 text-sm font-medium text-white shadow-sm transition-all duration-300 hover:bg-gray-700 focus:ring-2 focus:ring-teal-500 focus:outline-none"
                                disabled={isLoadingSubDisciplines || (isLoading && isInitialLoading)}
                            >
                                {#if isLoadingSubDisciplines}
                                    <span class="flex items-center gap-2 opacity-70">
                                        <svg class="animate-spin h-4 w-4 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24"> <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle> <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path> </svg>
                                        Chargement...
                                    </span>
                                {:else}
                                    {subDisciplineTriggerContent}
                                {/if}
                            </Select.Trigger>
                            <Select.Content class="scrollbar-thin scrollbar-thumb-teal-500 scrollbar-track-gray-800 z-10 max-h-60 overflow-y-auto rounded-lg border border-gray-700 bg-gray-900 shadow-lg">
                                <Select.Group>
                                    <Select.GroupHeading class="px-4 py-2 font-semibold text-gray-400 text-xs uppercase tracking-wider">
                                        {subDisciplineSelectLabel}
                                    </Select.GroupHeading>
                                    {#if showAllSubDisciplinesOption}
                                        <Select.Item value={allSubDisciplinesLabel} label={allSubDisciplinesLabel} class="cursor-pointer px-4 py-2 text-white transition-all duration-200 hover:bg-teal-600/80 hover:text-white data-[selected]:bg-teal-700">
                                            {allSubDisciplinesLabel}
                                        </Select.Item>
                                    {/if}
                                    {#each availableSubDisciplines as sub (sub.name)}
                                        <Select.Item value={sub.name} label={sub.name} class="cursor-pointer px-4 py-2 text-white transition-all duration-200 hover:bg-teal-600/80 hover:text-white data-[selected]:bg-teal-700">
                                            {sub.name}
                                        </Select.Item>
                                    {/each}
                                </Select.Group>
                            </Select.Content>
                        </Select.Root>
                    </div>
                {/if}
            </div>

            {#if enableSearch}
                <div class="relative w-full">
                    <input
                        type="search"
                        bind:value={searchQuery}
                        placeholder={searchPlaceholder}
                        class="w-full rounded-lg border border-gray-700 bg-gray-800 px-4 py-3 pl-10 text-sm font-medium text-white shadow-sm transition-all duration-300 placeholder-gray-500 focus:ring-2 focus:ring-teal-500 focus:outline-none focus:border-teal-500"
                        disabled={isLoading && isInitialLoading && !searchActive}
                    />
                    <svg class="absolute left-3 top-1/2 transform -translate-y-1/2 h-5 w-5 text-gray-500 pointer-events-none" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" d="m21 21-5.197-5.197m0 0A7.5 7.5 0 1 0 5.196 5.196a7.5 7.5 0 0 0 10.607 10.607Z" />
                    </svg>
                    {#if searchQuery}
                        <button
                            aria-label="Effacer la recherche"
                            on:click={() => searchQuery = ''}
                            class="absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-500 hover:text-white focus:outline-none focus:ring-1 focus:ring-teal-500 rounded-full p-0.5"
                        >
                            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" class="w-4 h-4">
                                <path stroke-linecap="round" stroke-linejoin="round" d="M6 18 18 6M6 6l12 12" />
                            </svg>
                        </button>
                    {/if}
                </div>
            {/if}
		</div>

		{#if isInitialLoading}
			<div class="flex justify-center items-center py-20" aria-live="polite" aria-busy="true">
				<div class="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-teal-500"></div>
			</div>
        {:else if fetchError && articles.length === 0 && !articleOfTheDay}
             <div class="my-10 p-4 rounded-lg bg-red-900/30 border border-red-700 text-red-300 text-center" role="alert">
                 <p><strong>Erreur lors du chargement initial :</strong> {fetchError}</p>
                 <p class="mt-2 text-sm">Veuillez réessayer ou vérifier votre connexion.</p>
             </div>
        {:else if !userId && isLikedArticlesView}
            <div class="my-10 p-4 rounded-lg bg-gray-800/50 border border-gray-700 text-gray-400 text-center">
                <p>Connectez-vous pour voir vos articles favoris.</p>
                <button
                    on:click={handleSignup}
                    class="mt-4 rounded-lg bg-teal-600 px-5 py-2.5 text-sm font-semibold text-white transition-colors duration-200 hover:bg-teal-700"
                >
                    Se connecter
                </button>
            </div>
		{:else if !articleOfTheDay && articles.length === 0}
            <div class="my-10 p-4 rounded-lg bg-gray-800/50 border border-gray-700 text-gray-400 text-center">
                {#if emptyStateMessage}
                    <p>{@html emptyStateMessage}</p>
                {:else}
                    <p>
                        {#if searchActive}
                            Aucun article trouvé pour "{filterForTitle}"
                            {#if isViewingSubDiscipline} dans "{selectedSubDiscipline}"{/if}
                            correspondant à votre recherche "{searchQuery}".
                        {:else}
                            Aucun article trouvé pour "{filterForTitle}"
                            {#if isViewingSubDiscipline} dans "{selectedSubDiscipline}"{/if}.
                        {/if}
                    </p>
                    <p class="mt-2 text-sm">
                        {#if searchActive}
                            Essayez de modifier votre recherche ou les filtres.
                        {:else}
                             Revenez plus tard ou essayez un autre filtre.
                        {/if}
                    </p>
                {/if}
            </div>
        {:else}
            <!-- Article of the Day Section (Conditional Display Logic) -->
			{#if articleOfTheDay}
                <div class="mb-8">
                    <h2 class="text-2xl font-bold text-teal-500">🔥 Article du jour</h2>
                    <p class="mt-2 mb-4 text-gray-400">Article selectionné aujourd'hui pour {filterForTitle} :</p>
                    <ul class="space-y-4">
                        <ArticleCard article={articleOfTheDay} on:open={openImmersive} on:likeToggle={handleLikeToggle} on:toggleRead={handleToggleRead} on:thumbsUpToggle={handleThumbsUpToggle}/>
                    </ul>
                </div>
            {/if}

            <!-- Main Article List Section -->
			<div class="mb-6">
                {#if articles.length > 0}
                    <h2 class="text-2xl font-bold text-white flex items-center gap-2">
                        {#if isLikedArticlesView}
                            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6 fill-pink-500 text-pink-500"> <path stroke-linecap="round" stroke-linejoin="round" d="M21 8.25c0-2.485-2.099-4.5-4.688-4.5-1.935 0-3.597 1.126-4.312 2.733-.715-1.607-2.377-2.733-4.313-2.733C5.1 3.75 3 5.765 3 8.25c0 7.22 9 12 9 12s9-4.78 9-12Z" /> </svg>
                            Favoris {#if selectedFilter !== ALL_CATEGORIES_VALUE && selectedFilter}: {filterForTitle}{/if} {#if isViewingSubDiscipline} - {selectedSubDiscipline}{/if}
                        {:else if searchActive}
                            Résultats de recherche
                        {:else if isViewingSubDiscipline}
                            📖 Articles pour {selectedSubDiscipline}
                        {:else}
                            📖 Articles précédents
                        {/if}
                    </h2>
                     <p class="mt-2 mb-4 text-gray-400">
                        {#if isLikedArticlesView}
                            {#if isViewingSubDiscipline}
                                Vos favoris pour {selectedSubDiscipline} ({filterForTitle}) :
                            {:else if searchActive}
                                 Résultats pour "{searchQuery}" dans vos favoris {#if selectedFilter !== ALL_CATEGORIES_VALUE}pour {filterForTitle}{/if} :
                            {:else if selectedFilter !== ALL_CATEGORIES_VALUE}
                                 Vos favoris pour {filterForTitle} :
                            {:else}
                                 Tous vos articles favoris :
                            {/if}
                        {:else if searchActive}
                            Résultats pour "{searchQuery}" dans "{filterForTitle}"{#if isViewingSubDiscipline} - {selectedSubDiscipline}{/if} :
                        {:else if isViewingSubDiscipline}
                            Articles selectionnés pour {selectedSubDiscipline} ({filterForTitle}) :
                        {:else}
                            Articles précédemment selectionnés pour {filterForTitle} :
                        {/if}
                    </p>
                {/if}

                <ul class="space-y-4">
                    {#each articles as article (getArticleId(article))}
                        <ArticleCard {article} on:open={openImmersive} on:likeToggle={handleLikeToggle} on:toggleRead={handleToggleRead} on:thumbsUpToggle={handleThumbsUpToggle}/>
                    {/each}
				</ul>

                {#if !isLoading && articles.length === 0 && articleOfTheDay && !isViewingSubDiscipline}
                    <p class="text-gray-500 italic text-sm ml-1 mt-4">Aucun article précédent trouvé pour cette sélection.</p>
				{/if}
			</div>

            <!-- Load More / All Loaded Section -->
            {#if hasMore || isLoading}
                <div class="mt-8 text-center">
                    {#if isLoading && !isInitialLoading}
                         <div class="flex justify-center items-center py-4" aria-live="polite" aria-busy="true">
                            <div class="animate-spin rounded-full h-8 w-8 border-t-2 border-b-2 border-teal-500"></div>
                         </div>
                    {:else if hasMore}
                        <button
                            on:click={loadMore}
                            disabled={isLoading}
                            class="rounded-lg bg-teal-600 px-5 py-2.5 text-sm font-semibold text-white transition-colors duration-200 hover:bg-teal-700 disabled:opacity-50 disabled:cursor-not-allowed"
                        >
                            {loadMoreButtonText}
                        </button>
                    {/if}
                </div>
            {:else if !isInitialLoading}
                <div class="mt-8 text-center text-gray-500">
                    <span class="inline-flex items-center gap-2 rounded-full bg-gray-800 px-4 py-2 text-sm">
                        <svg class="h-5 w-5 text-green-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"/>
                        </svg>
                        {allArticlesLoadedText}
                    </span>
                </div>
            {/if}
		{/if}

	</div>
</div>

<ArticleImmersiveModal article={immersiveArticle} on:close={closeImmersive} />

<ConfirmationModal
    isOpen={showUnlikeConfirmModal}
    on:confirm={handleConfirmUnlike}
    on:cancel={handleCancelUnlike}
    title="Confirmer le retrait"
    message="Êtes-vous sûr de vouloir retirer cet article de vos favoris ?"
    confirmText="Retirer"
    cancelText="Annuler"
/>


<style>
	button:focus-visible, input:focus-visible {
		outline: 2px solid #14b8a6; /* Teal-500 */
        outline-offset: 2px;
	}
    [data-radix-select-trigger]:focus-visible {
        outline: 2px solid #14b8a6; /* Teal-500 */
        outline-offset: 2px;
    }

	.scrollbar-thin {
		scrollbar-width: thin;
		scrollbar-color: #14b8a6 #1f2937; /* thumb track - Teal-500, Gray-800 */
	}

	.scrollbar-thin::-webkit-scrollbar {
		width: 8px;
		height: 8px;
	}

	.scrollbar-thin::-webkit-scrollbar-track {
		background: #1f2937; /* Gray-800 */
        border-radius: 10px;
	}

	.scrollbar-thin::-webkit-scrollbar-thumb {
		background-color: #14b8a6; /* Teal-500 */
		border-radius: 6px;
		border: 2px solid #1f2937; /* Gray-800 */
	}
</style>
--- End of File ---

--- File Path ---
frontend/src/lib/components/Footer.svelte

<script>
    import { i18n } from '$lib/i18n';
    import userProfileStore from '$lib/stores/user';

    // Fonction pour gérer la déconnexion (si nécessaire)
    function handleLogout() {
        // Logique de déconnexion (à implémenter selon votre système d'authentification)
        userProfileStore.set(null); // Simulé ici, remplacez par votre logique de déconnexion
    }
</script>

<footer class="bg-black py-12 text-white">
    <div class="mx-auto max-w-7xl px-4 sm:px-6 lg:px-8">
        <div class="grid grid-cols-1 gap-8 md:grid-cols-4">
            <!-- Slogan -->
            <div>
                <h3 class="mb-4 text-lg font-semibold">{$i18n.footer.slogan}</h3>
            </div>

            <!-- Liens de navigation -->
            <div>
                <h3 class="mb-4 text-lg font-semibold">Navigation</h3>
                <ul class="space-y-3">
                    <li>
                        <a href="/ma-veille" class="hover:underline">{$i18n.footer.myArticles}</a>
                    </li>
                    <li>
                        <a href="/comite" class="hover:underline">Comité scientifique</a>
                    </li>
                    <li>
                        {#if $userProfileStore}
                            <a href="/account" class="hover:underline">{$i18n.footer.account}</a>
                        {/if}
                    </li>
                </ul>
            </div>

            <!-- Section Soutenez-nous -->
            <div>
                <h3 class="mb-4 text-lg font-semibold">Soutenez-nous</h3>
                <a
                    href="/donations"
                    class="inline-block rounded-full border-2 border-white px-6 py-2 text-white transition-colors duration-200 hover:bg-white hover:text-blue-900"
                >
                    Faire un don
                </a>
            </div>

            <!-- Bouton S'inscrire (si non connecté) -->
            <div>
                {#if !$userProfileStore}
                    <h3 class="mb-4 text-lg font-semibold">Rejoignez-nous</h3>
                    <a
                        href="/signup"
                        class="inline-block rounded-full border-2 border-white px-6 py-2 text-white transition-colors duration-200 hover:bg-white hover:text-blue-900"
                    >
                        {$i18n.footer.signup}
                    </a>
                {/if}
            </div>

            <!-- Section Contact -->
            <div>
                <h3 class="mb-4 text-lg font-semibold">Contact</h3>
                <a
                    href="mailto:contact@veillemedicale.fr"
                    class="mt-2 inline-block text-base text-white hover:underline"
                >
                    contact@veillemedicale.fr
                </a>
            </div>
        </div>

        <!-- Ligne de séparation -->
        <hr class="my-8 border-gray-600" />

        <!-- Mention de droits d'auteur -->
        <div class="text-center text-sm text-gray-400">
            © {new Date().getFullYear()} Veille Médicale. Tous droits réservés.
        </div>
    </div>
</footer>
--- End of File ---

--- File Path ---
frontend/src/lib/components/Header.svelte

<script lang="ts">
	import { i18n } from '$lib/i18n';
	import userProfileStore from '$lib/stores/user';
	import { onMount } from 'svelte';

	let showAccountMenu = false;
	let showMobileMenu = false;
	let showHeader = true;
	let lastScrollY = 0;

	function toggleMobileMenu() {
		showMobileMenu = !showMobileMenu;
	}

	function closeMobileMenu() {
		showMobileMenu = false;
	}

	function handleOutsideClick(event: MouseEvent) {
		const target = event.target as HTMLElement;
		if (showAccountMenu && !target.closest('.account-menu')) {
			showAccountMenu = false;
		}
		if (
			showMobileMenu &&
			!target.closest('.mobile-menu') &&
			!target.closest('.burger-button')
		) {
			showMobileMenu = false;
		}
	}

	onMount(() => {
		lastScrollY = window.scrollY;
		const handleScroll = () => {
			const currentScrollY = window.scrollY;

			if (currentScrollY > lastScrollY && currentScrollY > 80) {
				showHeader = false;
			} else {
				showHeader = true;
			}

			lastScrollY = currentScrollY;
		};

		window.addEventListener('scroll', handleScroll);
		document.addEventListener('click', handleOutsideClick);

		return () => {
			window.removeEventListener('scroll', handleScroll);
			document.removeEventListener('click', handleOutsideClick);
		};
	});
</script>

<header
	class="fixed z-[100] w-screen transition-transform duration-300 ease-in-out"
	class:bg-black={showHeader && lastScrollY === 0}
	class:bg-white={lastScrollY > 0}
	class:shadow-sm={lastScrollY > 0}
	style="transform: translateY({showHeader ? '0%' : '-100%'});"
>
	<nav class="mx-auto flex max-w-7xl items-center justify-between px-4 py-4 sm:px-6 lg:px-8">
		<div class="flex items-center">
			<a
				href="/"
				class="font-sans text-3xl font-bold {lastScrollY > 0 ? 'text-black' : 'text-white'}"
			>
				Veille
			</a>
		</div>

		<div class="hidden items-center space-x-6 md:flex">
			{#if $userProfileStore}
				<a
					href="/donations"
					class="font-sans text-sm font-medium {lastScrollY > 0
						? 'text-black hover:text-gray-700'
						: 'text-white hover:text-gray-300'} transition-colors duration-200"
				>
					{$i18n.header.donate}
				</a>
				<a
					href="/articles"
					class="font-sans text-sm font-medium {lastScrollY > 0
						? 'text-black hover:text-gray-700'
						: 'text-white hover:text-gray-300'} transition-colors duration-200"
				>
					{$i18n.header.articles}
				</a>
				<a
					href="/ma-veille"
					class="rounded-sm px-4 font-sans text-sm font-medium {lastScrollY > 0
						? 'text-black hover:text-gray-700'
						: 'text-white hover:text-gray-300'} transition-colors duration-200"
				>
					{$i18n.header.myVeille}
				</a>
				<a
					href="/favoris"
					class="font-sans text-sm font-medium {lastScrollY > 0
						? 'text-black hover:text-gray-700'
						: 'text-white hover:text-gray-300'} transition-colors duration-200"
				>
					Favoris
				</a>
				<a
					href="/qui-sommes-nous"
					class="font-sans text-sm font-medium {lastScrollY > 0
						? 'text-black hover:text-gray-700'
						: 'text-white hover:text-gray-300'} transition-colors duration-200"
				>
					Qui sommes-nous ?
				</a>
				<a
					href="/comite"
					class="font-sans text-sm font-medium {lastScrollY > 0
						? 'text-black hover:text-gray-700'
						: 'text-white hover:text-gray-300'} transition-colors duration-200"
				>
					Comité scientifique
				</a>
				<div class="account-menu relative">
					<button
						onclick={() => (showAccountMenu = !showAccountMenu)}
						class="flex items-center font-sans text-sm font-medium {lastScrollY > 0
							? 'text-black hover:text-gray-700'
							: 'text-white hover:text-gray-300'} transition-colors duration-200 focus:outline-none"
					>
						{$i18n.header.account}
						<svg class="ml-1 h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
							<path
								stroke-linecap="round"
								stroke-linejoin="round"
								stroke-width="2"
								d="M19 9l-7 7-7-7"
							/>
						</svg>
					</button>
					{#if showAccountMenu}
						<div
							class="animate-fade-in absolute right-0 z-10 mt-2 w-48 rounded-md bg-black py-1 shadow-lg"
						>
							<a href="/account" class="block px-4 py-2 text-sm text-white hover:bg-white/10">
								{$i18n.header.settings}
							</a>
						</div>
					{/if}
				</div>
			{:else}
				<a
					href="/login"
					class="font-sans text-sm font-medium {lastScrollY > 0
						? 'text-black hover:text-gray-700'
						: 'text-white hover:text-gray-300'} transition-colors duration-200"
				>
					{$i18n.header.login}
				</a>
			{/if}
		</div>

		<div class="md:hidden">
			<button onclick={toggleMobileMenu} class="burger-button p-2">
				<svg
					class="h-6 w-6 {lastScrollY > 0 ? 'text-black' : 'text-white'}"
					fill="none"
					stroke="currentColor"
					viewBox="0 0 24 24"
				>
					<path
						stroke-linecap="round"
						stroke-linejoin="round"
						stroke-width="2"
						d={showMobileMenu ? 'M6 18L18 6M6 6l12 12' : 'M4 6h16M4 12h16M4 18h16'}
					/>
				</svg>
			</button>

			{#if showMobileMenu}
				<div
					class="mobile-menu animate-fade-in absolute top-full left-0 z-50 w-full bg-black shadow-lg"
				>
					{#if $userProfileStore}
						<a
							href="/donations"
							onclick={closeMobileMenu}
							class="block px-6 py-3 text-base hover:bg-gray-100"
						>
							{$i18n.header.donate}
						</a>
						<a
							href="/articles"
							onclick={closeMobileMenu}
							class="block px-6 py-3 text-base hover:bg-gray-100"
						>
							{$i18n.header.articles}
						</a>
						<a
							href="/ma-veille"
							onclick={closeMobileMenu}
							class="block px-6 py-3 text-base hover:bg-gray-100"
						>
							{$i18n.header.myVeille}
						</a>
						<a
							href="/favoris"
							onclick={closeMobileMenu}
							class="block px-6 py-3 text-base hover:bg-gray-100"
						>
							Favoris
						</a>
						<a
							href="/qui-sommes-nous"
							onclick={closeMobileMenu}
							class="block px-6 py-3 text-base hover:bg-gray-100"
						>
							Qui sommes-nous ?
						</a>
						<a
							href="/comite"
							onclick={closeMobileMenu}
							class="block px-6 py-3 text-base hover:bg-gray-100"
						>
							Comité scientifique
						</a>
						<a
							href="/account"
							onclick={closeMobileMenu}
							class="block px-6 py-3 text-base hover:bg-gray-100"
						>
							{$i18n.header.settings}
						</a>
					{:else}
						<a
							href="/login"
							onclick={closeMobileMenu}
							class="block px-6 py-3 text-base hover:bg-gray-100"
						>
							{$i18n.header.login}
						</a>
					{/if}
				</div>
			{/if}
		</div>
	</nav>
</header>

<style>
	.animate-fade-in {
		animation: fadeIn 0.2s ease-out;
	}

	@keyframes fadeIn {
		from {
			opacity: 0;
			transform: translateY(-5px);
		}
		to {
			opacity: 1;
			transform: translateY(0);
		}
	}

	/* Ajustements spécifiques pour le style Ledger */
	header.bg-black a,
	header.bg-black button {
		color: white;
	}

	header.bg-white a,
	header.bg-white button {
		color: black;
	}

	header.bg-black {
		background-color: #000000;
		border-bottom: 1px solid #333;
	}

	header.bg-white {
		background-color: #ffffff;
		box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
	}

	.burger-button svg {
		transition: color 0.3s ease;
	}

	.account-menu button svg {
		transition: stroke 0.3s ease;
	}
</style>

--- End of File ---

--- File Path ---
frontend/src/lib/components/auth/MessageDisplay.svelte

<!-- /components/auth/MessageDisplay.svelte -->
<script>
    export let errorMessage = '';
    export let successMessage = '';
  </script>
  
  {#if errorMessage}
    <div class="rounded-lg bg-red-50 p-4 text-red-700 animate-fade-in">
      <span class="font-semibold">Erreur :</span> {errorMessage}
    </div>
  {/if}
  
  {#if successMessage}
    <div class="rounded-lg bg-green-50 p-4 text-green-700 animate-fade-in">
      <span class="font-semibold">Succès :</span> {successMessage}
    </div>
  {/if}
  
  <style>
    .animate-fade-in {
      animation: fadeIn 0.3s ease-out;
    }
  
    @keyframes fadeIn {
      from {
        opacity: 0;
        transform: translateY(-10px);
      }
      to {
        opacity: 1;
        transform: translateY(0);
      }
    }
  </style>
--- End of File ---

--- File Path ---
frontend/src/lib/components/auth/SignUpForm.svelte

<!-- $lib/components/auth/SignUpForm.svelte -->
<script>
	import { createEventDispatcher } from 'svelte';

	export let email = '';
	export let password = '';
	export let disciplines = [];
	export let notificationFreq = 'tous_les_jours';
	export let errorMessage = '';
	export let successMessage = '';
	export let isLoading = false;

	let step = 1;
	let showDisciplineModal = false;
	let showNotificationModal = false;

	const dispatch = createEventDispatcher();

	const availableDisciplines = [
		'Allergie et immunologie',
		'Anesthésie - Réanimation',
		'Cardiologie',
		'Chirurgie cardiaque',
		'Chirurgie digestive',
		'Chirurgie ORL',
		'Chirurgie orthopédique',
		'Chirurgie plastique',
		'Chirurgie thoracique',
		'Chirurgie vasculaire',
		'Dermatologie',
		'Endocrinologie-Diabétologie-Nutrition',
		'Génétique',
		'Gériatrie',
		'Gynécologie-obstétrique',
		'Hématologie',
		'Hépato-Gastroentérologie',
		'Maladies infectieuses',
		'Médecine de la douleur',
		'Médecine du Travail',
		'Médecine Générale',
		'Médecine Interne',
		'Médecine physique et réadaptation',
		'Néphrologie',
		'Neurochirurgie',
		'Neurologie',
		'Oncologie',
		'Ophtalmologie',
		'Pédiatrie',
		'Pneumologie',
		'Psychiatrie',
		'Rhumatologie',
		'Santé Publique',
		'Urgences',
		'Urologie'
	];

	const notificationOptions = [
		'Tous les jours',
		'Tous les 2 jours',
		'Tous les 3 jours',
		'1 fois par semaine',
		'Tous les 15 jours',
		'1 fois par mois'
	];

	let searchQuery = '';
	$: filteredDisciplines = availableDisciplines.filter((discipline) =>
		discipline.toLowerCase().includes(searchQuery.toLowerCase())
	);

	function toggleDiscipline(discipline) {
		if (disciplines.includes(discipline)) {
			disciplines = disciplines.filter((d) => d !== discipline);
		} else {
			disciplines = [...disciplines, discipline];
		}
	}

	function removeDiscipline(discipline) {
		disciplines = disciplines.filter((d) => d !== discipline);
	}

	function nextStep(event) {
		event.preventDefault();
		if (step === 1) {
			if (!email || !password) {
				errorMessage = 'Veuillez remplir l’email et le mot de passe.';
				return;
			}
			step = 2;
			errorMessage = '';
			showDisciplineModal = true;
		} else if (step === 2) {
			if (disciplines.length === 0) {
				errorMessage = 'Veuillez sélectionner au moins une discipline.';
				return;
			}
			step = 3;
			errorMessage = '';
			showDisciplineModal = false;
			showNotificationModal = true;
		}
	}

	function goBack() {
		if (step === 2) {
			step = 1;
			showDisciplineModal = false;
		} else if (step === 3) {
			step = 2;
			showNotificationModal = false;
			showDisciplineModal = true;
		}
		errorMessage = '';
		successMessage = '';
	}
</script>

<!-- Étape 1 : Email et Mot de passe -->
{#if step === 1}
	<form on:submit|preventDefault={nextStep} class="space-y-6">
		<div>
			<label for="email" class="block text-sm font-medium text-gray-700">Email</label>
			<input
				id="email"
				name="email"
				type="email"
				bind:value={email}
				class="mt-1 w-full rounded-lg border border-gray-300 bg-blue-50 px-4 py-2 transition-all duration-200 focus:border-blue-500 focus:ring focus:ring-blue-200"
				placeholder="jperrama@gmail.com"
				required
			/>
		</div>

		<div>
			<label for="password" class="block text-sm font-medium text-gray-700">Mot de passe</label>
			<input
				id="password"
				name="password"
				type="password"
				bind:value={password}
				class="mt-1 w-full rounded-lg border border-gray-300 bg-blue-50 px-4 py-2 transition-all duration-200 focus:border-blue-500 focus:ring focus:ring-blue-200"
				placeholder="••••••"
				required
			/>
		</div>

		<button
			type="submit"
			class="w-full rounded-lg bg-black px-4 py-2 text-white transition-all duration-200 hover:bg-blue-700 focus:ring-2 focus:ring-blue-500 focus:ring-offset-2"
		>
			Suivant
		</button>
	</form>
{/if}

<!-- Modal pour les disciplines (Étape 2) -->
{#if showDisciplineModal}
	<div class="bg-opacity-50 fixed inset-0 z-50 flex items-center justify-center bg-black">
		<div class="mx-4 w-full max-w-md rounded-lg bg-white p-6">
			<h2 class="mb-2 text-xl font-bold text-gray-900">Quelles disciplines voulez-vous suivre ?</h2>
			<p class="mb-4 text-sm text-gray-600">(une ou plusieurs)</p>

			{#if disciplines.length > 0}
				<div class="mb-4 flex flex-wrap gap-2">
					{#each disciplines as discipline}
						<div
							class="flex items-center rounded-full bg-blue-100 px-3 py-1 text-sm font-medium text-blue-800"
						>
							<span>{discipline}</span>
							<button
								type="button"
								on:click={() => removeDiscipline(discipline)}
								class="ml-2 focus:outline-none"
							>
								<svg
									class="h-4 w-4 text-blue-800"
									xmlns="http://www.w3.org/2000/svg"
									fill="none"
									viewBox="0 0 24 24"
									stroke="currentColor"
								>
									<path
										stroke-linecap="round"
										stroke-linejoin="round"
										stroke-width="2"
										d="M6 18L18 6M6 6l12 12"
									/>
								</svg>
							</button>
						</div>
					{/each}
				</div>
			{/if}

			<div class="relative mb-4">
				<input
					type="text"
					bind:value={searchQuery}
					placeholder="Rechercher une discipline..."
					class="w-full rounded-lg border border-gray-300 px-4 py-2 transition-all duration-200 focus:border-blue-500 focus:ring focus:ring-blue-200"
				/>
			</div>

			<div class="mb-4 max-h-48 overflow-y-auto">
				{#each filteredDisciplines as discipline}
					<label class="flex items-center space-x-2 px-4 py-2 hover:bg-gray-100">
						<input
							type="checkbox"
							name="disciplines"
							value={discipline}
							checked={disciplines.includes(discipline)}
							on:change={() => toggleDiscipline(discipline)}
							class="h-4 w-4 border-gray-300 text-blue-600 focus:ring-blue-500"
						/>
						<span class="text-gray-700">{discipline}</span>
					</label>
				{/each}
			</div>

			<div class="flex justify-between">
				<button
					type="button"
					on:click={goBack}
					class="rounded-lg px-4 py-2 text-gray-700 transition-all duration-200 hover:bg-gray-100 focus:ring-2 focus:ring-blue-500 focus:ring-offset-2"
				>
					Retour
				</button>
				<button
					type="button"
					on:click={nextStep}
					class="rounded-lg bg-black px-4 py-2 text-white transition-all duration-200 hover:bg-blue-700 focus:ring-2 focus:ring-blue-500 focus:ring-offset-2"
				>
					Suivant
				</button>
			</div>
		</div>
	</div>
{/if}

<!-- Modal pour la fréquence des notifications (Étape 3) -->
{#if showNotificationModal}
	<form
		method="POST"
		action="/signup"
		class="bg-opacity-50 fixed inset-0 z-50 flex items-center justify-center bg-black"
	>
		<div class="mx-4 w-full max-w-md rounded-lg bg-white p-6">
			<h2 class="mb-2 text-xl font-bold text-gray-900">
				À quelle fréquence souhaitez-vous être alerté ?
			</h2>
			<p class="mb-4 text-sm text-gray-600">
				Ainsi, vous pourrez bénéficier d’une veille personnalisée selon la fréquence que vous
				souhaitez (que vous pouvez modifier par la suite).
			</p>

			<!-- Champs cachés pour envoyer toutes les données -->
			<input type="hidden" name="email" value={email} />
			<input type="hidden" name="password" value={password} />
			<input type="hidden" name="first_name" value={email.split('@')[0] || ''} />
			<input type="hidden" name="last_name" value="" />
			<input type="hidden" name="date_of_birth" value="" />
			{#each disciplines as discipline}
				<input type="hidden" name="disciplines[]" value={discipline} />
			{/each}

			<div class="space-y-2">
				{#each notificationOptions as option}
					<button
						type="button"
						on:click={() => {
							notificationFreq = option.replace(/ /g, '_').toLowerCase();
						}}
						class="flex w-full items-center rounded-lg border px-4 py-2 transition-all duration-200 {notificationFreq ===
						option.replace(/ /g, '_').toLowerCase()
							? 'border-blue-500 bg-blue-100'
							: 'border-gray-300 hover:bg-gray-100'}"
					>
						<span class="flex-1 text-left">{option}</span>
						{#if notificationFreq === option.replace(/ /g, '_').toLowerCase()}
							<svg
								class="h-5 w-5 text-blue-500"
								xmlns="http://www.w3.org/2000/svg"
								fill="none"
								viewBox="0 0 24 24"
								stroke="currentColor"
							>
								<path
									stroke-linecap="round"
									stroke-linejoin="round"
									stroke-width="2"
									d="M5 13l4 4L19 7"
								/>
							</svg>
						{/if}
					</button>
				{/each}
			</div>

			<!-- Champ caché pour notification_frequency -->
			<input type="hidden" name="notification_frequency" value={notificationFreq} />

			<div class="mt-6 flex justify-between">
				<button
					type="button"
					on:click={goBack}
					class="rounded-lg px-4 py-2 text-gray-700 transition-all duration-200 hover:bg-gray-100 focus:ring-2 focus:ring-blue-500 focus:ring-offset-2"
				>
					Retour
				</button>
				<button
					type="submit"
					disabled={isLoading}
					class="rounded-lg bg-black px-4 py-2 text-white transition-all duration-200 hover:bg-blue-700 focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 disabled:cursor-not-allowed disabled:bg-gray-400"
				>
					{#if isLoading}
						<svg class="mr-2 inline-block h-5 w-5 animate-spin text-white" viewBox="0 0 24 24">
							<circle
								class="opacity-25"
								cx="12"
								cy="12"
								r="10"
								stroke="currentColor"
								stroke-width="4"
							/>
							<path
								class="opacity-75"
								fill="currentColor"
								d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
							/>
						</svg>
						Inscription en cours...
					{:else}
						S’inscrire
					{/if}
				</button>
			</div>
		</div>
	</form>
{/if}

<style>
	@media (max-width: 640px) {
		.max-w-md {
			max-width: 100%;
			padding: 1rem;
		}
		h1 {
			font-size: 1.75rem;
		}
		h2 {
			font-size: 1.25rem;
		}
	}
</style>

--- End of File ---

--- File Path ---
frontend/src/lib/components/auth/LoginForm.svelte

<!-- /lib/components/auth/LoginForm.svelte -->
<script>
	import { i18n } from '$lib/i18n';
  
	export let email = '';
	export let password = '';
	export let errorMessage = '';
	export let successMessage = '';
	export let isLoading = false;
  </script>
  
  <div class="space-y-6">
	<div>
	  <label for="email" class="block text-sm font-medium text-gray-700">{$i18n.login.emailLabel}</label>
	  <input
		id="email"
		name="email"
		type="email"
		bind:value={email}
		class="mt-1 w-full rounded-lg border border-gray-300 px-4 py-2 focus:border-blue-500 focus:ring focus:ring-blue-200 transition-all duration-200"
		placeholder={$i18n.login.emailPlaceholder}
		required
	  />
	</div>
  
	<div>
	  <label for="password" class="block text-sm font-medium text-gray-700">{$i18n.login.passwordLabel}</label>
	  <input
		id="password"
		name="password"
		type="password"
		bind:value={password}
		class="mt-1 w-full rounded-lg border border-gray-300 px-4 py-2 focus:border-blue-500 focus:ring focus:ring-blue-200 transition-all duration-200"
		placeholder={$i18n.login.passwordPlaceholder}
		required
	  />
	</div>
  
	<button
	  type="submit"
	  disabled={isLoading}
	  class="w-full rounded-lg bg-black px-4 py-2 text-white hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 transition-all duration-200 disabled:bg-blue-400 disabled:cursor-not-allowed"
	>
	  {#if isLoading}
		<svg class="animate-spin h-5 w-5 mr-2 inline-block text-white" viewBox="0 0 24 24">
		  <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4" />
		  <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z" />
		</svg>
		{$i18n.login.loggingIn}
	  {:else}
		{$i18n.login.submitLogin}
	  {/if}
	</button>
  </div>
--- End of File ---

--- File Path ---
frontend/src/lib/svg/EmbaseSvg.svelte

<svg
					xmlns="http://www.w3.org/2000/svg"
					height="52"
					viewBox="0 0 58 52"
					width="58"
					class="Icon-module_root__A8iJ4 ElsevierProductLogo-module_logo__uGNOJ"
					focusable="false"
					><path
						d="M16.2 24.2c.6-.4 1-.8 1-1.3v-.3a.8.8 0 0 0-.4 0c-.3.3-.8.8-1.2 1l-.6.1s-.1 0 0-.1l1-.8c.2-.2.1-.4-.2-.5-.4 0-.9.1-1.2.4-.7.6-1 1.7-1 2.5l-.3.1c-.1-.5-.2-1 0-1.6l.3-.7c0-.2 0-.4-.2-.5l-.2.1c-.3.9-.8 1.3-1.6 1.8l-.9.5c-.3-.1-.5-.3-.8-.7l-1-1.4a.5.5 0 0 0-.4-.2H7a2 2 0 0 1-1.3-.9c-.3-.4-.4-.4-.7 0l-1 .7a1.7 1.7 0 0 1-.2.3c-.3.1-.4 0-.5-.2-.3-.8-.4-1.6-.4-2.5v-1.3a3 3 0 0 0-.7-.5c-.8-.3-1.4-.9-2-1.5a.6.6 0 0 1-.2-.4s0-.3.3-.4c.4-.3 1-.4 1.5-.4l1.6.2c.4 0 .5-.3.4-.8-.1-1.2.3-2 1-2.6.5-.6.4-1.2.3-1.8 0-.3-.1-.4-.4-.4-.8.2-.8.2-1 1 0 .4-.2.8-.4 1.2L2 13.7c-.1.2-.3.2-.4 0a2.6 2.6 0 0 1-1-3.2c0-.4.3-.8.5-1v.3l-.2.7c-.3.9-.3 1.7.3 2.5l.2.1h.3l1-1c.5-.5.6-1 .5-1.6a10 10 0 0 0-.2-.7v-.2l-.3.1c-.4.4-.5.7-.7 1.3a.5.5 0 0 1-.2.3v-.4c0-.6.2-1.1.6-1.5.2-.3.2-.4 0-.5-1-.2-1.7-.5-2.3-1.3a.7.7 0 0 1-.2-.4c0-.2 0-.3.3-.4.7-.5 1.5-1 2.3-1.3h.6a28 28 0 0 1-1-3.6l.3-1h.7l1 .6c.3.2.4.2.6-.1C5 .9 5.5.4 6 0l.4-.1c.2 0 .3.1.5.4l.8 1.5c.3.5.6.5 1 .2l1.5-1c.4-.4.5-.4 1-.1.4.3.9.8 1.1 1.3 0 .1 1-.4 1.1-.7 0-.4.2-.7.3-1 .3-.5.6-.6.8-.6.3 0 .7.3 1 .5l.9.4c.3.3.4.3.6-.1.3-.4.5-.5 1-.5 1.2 0 2.2.3 3 1.2 0 .2.2.2.4 0 .3-.3.6-.4 1.1-.4h1c.3 0 .4 0 .7-.3.2-.4.6-.8 1-.8.7 0 1.7 1 2.1 1.9l-.2.1a4.5 4.5 0 0 0-.7-.6 6.4 6.4 0 0 0-1.2-.6c-.4-.2-.6 0-.6.5l.4 1.6c.1.5.6.9 1 1.1v.2h-1c-.6.1-1.1.4-1.7.6-.2.1-.2.2 0 .4l1 .9c.9.7 1.8.5 3 .1l.4-.1c.5-.1 1 0 1.3.4l1.1 1c.3.3.4.6.2 1a53 53 0 0 1-1.1 2l-.3.3c-.1 0-.2-.3-.1-.6l.2-.2a4.2 4.2 0 0 0 .7-1.8c0-.5-.2-.8-.7-.6l-.5.1c-.2.1-.3 0-.3-.2L28 7c-.1-.3-.3-.4-.6-.2a3 3 0 0 0-1 1 3.7 3.7 0 0 0-.4 2.3l.1.2a.4.4 0 0 0 .2-.2c.2-.3.2-.7.3-1l.1-.8h.3c.3 0 .4.1.4.3-.5.6-.7 1.4-1 2.2l-.4.2-.4-.2-.6-1.5c-.3-1.6-.4-1.7-.5-1.8A10 10 0 0 0 22 4.8l-.2-.2.3-.1.9-.4c.4-.1.7-.4.9-.8l.3-.6c.2-.3.2-.5 0-.7-.5-.5-1-.6-1.6-.5-.6.1-1 .6-1.2 1.2v.6c0 .3 0 .4.3.2l1.2-.8.2-.1c-.2.5-.5.9-1 1.1a13.8 13.8 0 0 1-.9.6c-.2.1-.3 0-.4-.2V3c0-1-.6-1.8-1.4-2.1l-.8-.4a.8.8 0 0 0-.3.7c0 .6 0 1 .2 1.7l.1.6c.1.3.5.4.8.4.2 0 .4-.3.1-.8l-.4-.7-.1-.3V2l.2.1a5.3 5.3 0 0 1 1.1 2c.2.2 0 .3-.2.4-.7 0-1.4 0-2 .2-1 .2-1.4.6-1.8 1.3l-.2.7 1.4-.1a4 4 0 0 0 1.4-.5l1-1h.4c1.3.6 2.2 1.4 2.8 2.7l.2.3v.2h-.1l-.7-.2-.2-.3-.2-.6c-.2-.2-.2-.2-.5-.2l-.4.2c-.2.1-.3.1-.4 0l-.2-1c0-.3-.2-.3-.5-.2a3 3 0 0 0-1.4 1.4c-.3.6-.4 1-.1 2.5 0 .3.3.7.6.8l2.6.8h.1v.2l-1 .7c-.3 0-.3 0-.4-.2a2 2 0 0 0-1-1c-.3 0-.3 0-.4.2l-.4 1c0 .1-.1.2-.3 0-.7-.5-1.5-.6-2.4-.4-.5 0-.7.1-.6.6.2.7.6 1.2 1.2 1.6l1.1.6a.6.6 0 0 0 .3-.2c.2-.2.1-.4 0-.6l-1.6-1 .3-.3h.3c.7.4 1.2 1 1.8 1.4.2.3.4.3.5-.1l.3-1.1v-.1h.2l.1 1-.2.9c0 .3-.3.4-.5.4-.7-.1-1.3.1-1.9.3a5.6 5.6 0 0 1-.9.1l-.6-.1-.1-.2a1 1 0 0 1 .3 0c.3 0 .7 0 1-.2a1.4 1.4 0 0 0-.4-.3c-.6-.5-1.3 0-1.9.3-.3.2-.3.2-.2.6.2.5.6.6 1 .6h1.3l1-.5h.4l-.1.4-.9.5-.2.1-.3.3c.1.1.2.3.4.3l1.1.3c.7.1 1 0 1-.7l.4-1c.1-.2.3-.2.4 0l1.3 2.3c0 .2 0 .3-.2.3a63.5 63.5 0 0 1-2.9-.4c-.3 0-.6-.3-1-.4-.4-.2-1-.4-1.5-.4s-.8.3-.6.8l.7 2c.2.4.7.6 1.2.7.2 0 .1-.2 0-.3l-.8-1.7v-.2h.2c.4.8.9 1.4 1.3 2v.5l-.4.1c-1-.1-2-.4-2.9-.8l-.2-.4h.6c.2 0 .4 0 .3-.2a1 1 0 0 0-.5-.4 6 6 0 0 0-1.5-.6c-.3 0-.5.1-.4.4 0 .3.2.6.4 1a.5.5 0 0 1 0 .3l-1.1-.2c-.8-.4-.8-.6-.8-1.5v-.7c.1-.3.2-.4.4-.3l2.3.7.7.4c.2 0 .3 0 .3-.2a.7.7 0 0 0-.4-.6l-2.5-1c-.2-.1-.3-.2-.2-.4.4-.6.5-1.2.4-1.9l.1-.2.3.2a.6.6 0 0 1 0 .3c.1.6.5 1 1 1.4.7.8.7.8 1.8.5l.3-.2-.3-.3-.7-.2c-.7-.3-.9-.8-.7-1.6l.7-2 .1-1c0-.3.2-.3.3-.3l1.6-.1c.4 0 .8-.5 1-.8l.5-.8a1 1 0 0 0-.5-.3l-.6.1c.2-.4.3-.7.3-1.1l-.1-.8c-.1-.2-.3-.3-.5-.1-.4.3-.7.7-.8 1.2a24.9 24.9 0 0 0-.3 1.6 1.5 1.5 0 0 0 .3-.2l.5-.2h.4c-.1.2-.3.2-.4.3a3.4 3.4 0 0 1-.8.5c-.3.1-.4 0-.3-.3l.1-.8-.1-1.2-.6-1.6a4.5 4.5 0 0 0-.4-.7c-.1-.2-.3-.1-.6.3-.5.5-.7 1-.9 2v.2l-.4.3-.2-.1.3-1.1c0-.5-.2-.8-.5-1l-.8.6a1 1 0 0 0 0 1.2c.4.6.4 1.3.2 2.1L11.1 9l-.5-1c-.2-.2-.3-.7-.2-1 .2-.3.9-.4 1-.8.3-.3.2-.5.5-.9.2-.2.6-.7 1-.5.8.5 1.8.6 2.8.4.4 0 .5 0 .7-.5 0-.3.1 0 .5-.2.6-.2.9-.7.9-1.4v-1l-.3-1h-.3l-.9 1.4-.3.7c0 .1-.2.2-.3 0a3.3 3.3 0 0 0-.6-.5C15 2.5 15 2 15 1.5c.2 0 .3.2.4.4 0 .3.1.6.4.7.2.2.5-.4.5-.9a.8.8 0 0 0-.1-.3c-.3-.5-1-1-1.5-1s-.9.7-.7 1.3l.2.4c-1.2.6-1.5 1-2 1.6 0 .1-.1.3 0 .4.2.4 0 .6-.4.9a4.2 4.2 0 0 1-.7.3h-.2a.3.3 0 0 1 0-.2l1-2c.3-.7-.4-1.4-1-1.6-.3-.2-.7-.1-1 .2-.6 1-.6 2.1.1 3.2l.1.1c.1.2.1.3-.1.3l-1.6.1a2.1 2.1 0 0 0-1.6.9c-.1.2-.3.2-.4 0-.5-.2-.8-.1-1.2.1L3.7 7l-.5.1L3 7s0-.2.2-.2l.9-.2.3-.1.1-.4-.3-.2A5.3 5.3 0 0 0 3 6c-.9 0-1.5.4-2.1 1-.3.3-.3.6 0 .8.7.5 1.4 1 2.4.8L4 8l.7-.7C5 7 5.6 6.5 6 7c.6.7.7 1.5 1.7 1.3.4 0 .5-.1.7-.5v-.4c0-.3 0-.4-.4-.3l-.5.2h-.3l.1-.4.6-.3a41.6 41.6 0 0 1 2.2-.5.6.6 0 0 1 .2 0v.2c-.3.6-.7.8-1.2 1l-.2.4c-.4 1-.2 2 .5 2.8l.8.7c.6.3.7.8.9 1.3l.4 1c-.4.3-.8.6-1 1-.1.2-.2.1-.3 0l-.2-.7c-.3-.6-.7-1-1.4-1l-.8-.2c-.3 0-.5.1-.6.5-.2.8-.2 1.6.6 2.4l.6.4a4 4 0 0 0-.4.2 4 4 0 0 0-1 .4 2.7 2.7 0 0 0-.8.7c0 .2.4.4.7.5 1 .4 1.8.4 2.7 0 .5-.1.5 0 .6.4l.2 1.1c.1.3 0 .4-.3.3-1.4-.4-3-1-4.2-1.8a7 7 0 0 0-1.5-.5c-.2.1-.4.3-.5.2-.4 0-1.2-.3-1.5-.5a.4.4 0 0 1-.2-.2.4.4 0 0 1 .2 0l1.8.1.3-.1a.5.5 0 0 0-.2-.2c-1-.8-2.1-.6-3.2-.4-.4 0-.5.2-.2.5.6.8 1.3 1.4 2.3 1.5h2c1.1.7 2.3 1.4 3.6 1.8v.2c-.5 0-1 0-1.4.2l-1.3.2c-.4 0-.5.4-.3.8.4.5 1 .8 1.6 1 .5.1 1 0 1.4-.1.6-.3.9-.7 1.4-1 .3-.2.8 0 1.1.1l1.4.4c.7.2 1.5.2 2.3.3h3.2a7.9 7.9 0 0 0-.4 1.2c-.1.2 0 .3.2.3.3 0 .7-.3.9-.6v-.8l.2-.3.5.1-.3.8-.2.4.5.1c.7 0 .8-.1.8-.8a3.9 3.9 0 0 0-.1-.6c0-.5 0-.9.5-1.1.4-.2.9-.2 1.3-.1 1.4.1 2.9 1 3.8 1.7.6.4 0 1 0 1.9v1.3c0 .4.2.7.3.8l1.6 1c.5.4.7.6 1.4.8h.4a1.6 1.6 0 0 0 0-.6l-1.2-.5-.3-.2.4-.2.8-.2a.5.5 0 0 0 .2-.1l-.2-.2-1-.3c-.1 0-.2 0-.2-.2a1 1 0 0 1 .3-.2h.9a.4.4 0 0 0 .2-.2l-.2-.2-1-.5-.2-.3h1.1l.2-.2a.6.6 0 0 0-.1-.2l-.8-.5c-.2 0-.3-.2-.3-.4h.4l.7.2h.3a.3.3 0 0 0-.1-.3l-.4-.2-.6-.6c-.1 0 0-.2 0-.2h.1l.8.2a.7.7 0 0 0 .3 0l-.1-.3-.7-.5v-.4l.3.1h.4l.3.1a.4.4 0 0 0 0-.2 5 5 0 0 0-.2-.6V20h.2l.9.3h.3L31 20l-.2-.4v-.2h.3l1 .5h.3l-.3-.6.1-.1.7.2.7.1a.5.5 0 0 0 .2 0l-.2-.6a.5.5 0 0 1 .3 0c.3 0 .5.3.9.3l1.2-.1c1.6-.3 2.8-.4 4.3-.8a15.5 15.5 0 0 0 1.9-.8h.2c.4 1.1 1.3 1.5 2.2 1.6h.9c.2 0 .3 0 .2-.3-.2-1-.7-1.7-1.4-2.4l-.6-.3c-.2-.3-.2-.6 0-.8l1.7-1a2 2 0 0 0 .9-1.8c0-.2 0-.4-.3-.5a.8.8 0 0 0-.3.2l-.4.9-.2.2-.4.2V13c0-.2 0-.3.2-.5l.9-1v-.3h-.2a2 2 0 0 0-1.1.5l-.7 1-1 2.3-.2.7c-.1.4-.1.6.2.8l1.8 1 .2.3h-.3a2 2 0 0 1-1.5-.6l-.6-.4-1.8.5c-.4 0-.6.2-.8.5 0 .2-.3.3-.6.2l-1.2-.4c-.5-.1-1.1 0-1.7.1H36c-.2.1-.3 0-.2-.2l.2-1v-.4c-.2 0-.4 0-.5.2l-.5 1c-.2.2-.2.2-.5.1a5.1 5.1 0 0 1-1.1-.7l-.7-1.1c0-.2 0-.2.2-.2l1 .8.3.6h.4v-.5c.2-.4.1-1-.2-1.3L33 14c-.8-.5-.9-.4-1.1 0a3 3 0 0 0-.4 1.5c.2 1.2.5 1.7 2 2.4a.4.4 0 0 1-.2.2c0 .1-.1.2-.3.2l-1.8-.1c-.2 0-.3 0-.3-.2-.5-1.8-.2-3.7.7-5.4l.3-.3a18 18 0 0 1 1.1-.6c.2 0 .3 0 .4.2l.2 1.2.1.6c.3 0 .5-.1.6-.3.4-.7.6-1.6.2-2.4 0-.1 0-.3.2-.3l3-1.3c.5 0 1.3 0 2.3.2.2 0 .5.4 1 .6-.6.2-1.2.7-1.7 1.2-.2.1-.3.3-.2.7l.9-.2c.5-.2.7-.2 1.1-.2h.3a.5.5 0 0 1-.1.3c-.2.1-.4 0-.5.2-.2 0-.3.2-.2.4l.4.3c.5 0 1-.1 1.4-.3.2-.2 1-1.3.6-1.4-.3 0-.9 0-1.1-.2a.5.5 0 0 1 .3-.3l1 .1h2c.2-.2.3-.3.2-.4a3 3 0 0 0-1.8-1.6H39l-.3-.2.2-.1 1-.6c.4-.3.7-.7.9-1.3a.6.6 0 0 0 0-.3c-.3-1.1-1-2-2.2-2l-.6-.2c-.2 0-.3.1-.3.3v1c0 .2 0 .3.3.3l1.7.5c.3.2.4.4 0 .7l-1 .6c0 .1-.1 0-.1 0l-.1-.8a.5.5 0 0 0-.1-.2.6.6 0 0 0-.5.4 5.4 5.4 0 0 0-.3.9c0 .4-.3.6-.7.8-.1 0-.3 0-.3-.2l.2-.6a4 4 0 0 0 .3-2V4.6a.4.4 0 0 1 .2-.5l1.7-.6c.1 0 .3 0 .5.2L40.7 5c.3.4.4.4.6 0 .3-.3.5-.7 1-.9.1 0 .1-.2-.1-.3l-1.3-.4-.3-.1-.2-.2.2-.2 1.8-.7.4-.1c.2-.1.3-.3.3-.5l-.2-.7c0-.3-.2-.4-.4-.5-.5 0-1 0-1.4.2a3.8 3.8 0 0 0-1 .7.6.6 0 0 0 0 .6.7.7 0 0 0 .2 0 4.4 4.4 0 0 0 1.1-.5l.4-.4.2.3a35.9 35.9 0 0 1-3.3 1.5l-2 .6h-.2v-.2a58 58 0 0 1 1.2-1.6V2l-.3.6v.2h.2c.6-.1 1.2-.8 1.2-1.5 0-.2-.1-.3-.4-.3-.4 0-.8 0-1.2.2-.7.2-1 .6-1.3 1.3a6.3 6.3 0 0 0-.2.9c0 .3-.4.4-.7.6-.4.3-.7.3-1.1.3a6.9 6.9 0 0 0-1 .3v-.3l.6-1.1c.4-.5.3-.8-.3-1a2 2 0 0 0-2.4.8l-.7 1.6c-.1.3 0 .5.3.5.5.1 1.2 0 1.6-.2v.9l-.4.6c-.2.3-.4.4-.7.3a15.8 15.8 0 0 1-1.6-.9c-.6-.3-1.2-.6-1.8-.6a.9.9 0 0 1-.3 0c-.2 0-.2-.1 0-.2v-.6L26.5 3l-.3-.7.8.3.2 1 .4.6c.1.1.3.2.4.1 0 0 .2-.1.2-.3 0-.3-.4-1 .2-2.3.3-.6 1.2-1.7 1.7-1.7.3 0 .6.1.7.6l.3.8c0 .3.2.3.4.3.5 0 1.3-.4 1.9-.4.4-.1.7.9.9 1.2.3.5.4 1 .8.4a48.5 48.5 0 0 1 1.4-2c.8-.4 1.8-.5 2.6-.4.2 0 .3.1.2.4v.7h.3c0-.2.3-.3.4-.4l.3-.4c.5-.5 1-.8 2-.8.5 0 .9.1 1.3.3.3 0 .4.1.3.4l-.3 1c-.1.4 0 .5.4.7l.8.6.4-.1c.4-.9 1.2-1.7 1.9-2.1.3-.2.4-.2.5.1l.4 1.4V3l.4-.5.7-.7a3 3 0 0 1 1.7-1 5 5 0 0 1 2 .3c.3 0 0 .4-.2.7 0 .2-.2.3-.3.4 0 .2-.1.2-.3 0l-.5-.7c-.3-.3-.9-.1-1.3.1a5.4 5.4 0 0 0-2 2c-.2.5-1.2 1.7-1.6 2h-.3v-.2a7.2 7.2 0 0 0 1.2-3.7c-.2 0-.4 0-.6.2a2.3 2.3 0 0 0-.7.7 7.2 7.2 0 0 0-1 3.2c0 .2 0 .5-.3.6l-1 .5h-.2c.2-.9 0-1.5-.5-2.3 0-.2-.2-.2-.4-.2l-.4.3c-.8.7-1.2 1.7-1.2 3 0 .1.2.1.4 0a1.4 1.4 0 0 0 .3-.4l.7-1.3.3-.2a.5.5 0 0 1 0 .3l-.1.8c-.1.3-.5.8-.9 1l.1.4c.9 0 1.4 0 2.1-.5.8-.4 1.3-.7 1.7-.7l1.5.5-.3.2-.9.7c-.4.3-.5.4-.5 1.1l.2.9.2.2.2-.1 1-1.3.2-.1v.2c0 .5-.3.9-.6 1.2l-.2.3c-.3.3-.3.4 0 .8s.3.9.2 1.4a21.6 21.6 0 0 0-.2 1.4l-1 .4-.8.6c-.4.3-.4.5-.4.6l.2.2.4.2c.4.1 1.2 0 1.4-.5l.1-.5.3.1c.2.5.3.9.7 1.2l-.3.4c-.2.4-.3.6-.6.6h-.3c-.2 0-.4 0-.4.3v.9c0 .3-.1.6-.4.5-.6 0-1-.5-1.7-.4-.5 0-.8-.1-1.1-.3l-.7-.4-2.6.5-2.8.5-2.1.4c-.2 0-.2.2-.3.4 0 .6-.3 1.1-.4 1.7l.2.3.2-.2.4-.6c.2-.3.9 0 1 .4.1.2-.2.3-.2.6 0 .2.4.4.4.7l-.2.5c1 .6 1.2 1.1 1.2 2 0 .2 0 .3.2.4l.4.5c.4.5.8 1.3 1.1 1.4h.9v.2c0 .2-.3.5-.6.5-.7.3-1-.8-1.4-1.3a5 5 0 0 0-.6-.8c-.3.3-.7 1.6-.7 2.3l.3.8.7 1.5c.3.4.7.5 1.1.6.4.2.7.2 1 .1h.4V31l.3-2.4.1-1.6c0-.3.3-.8.7-1.1.4-.3.6-.7.5-1.2a1 1 0 0 1 .2-.5c0-.3-.2-.3-.5-.3-.2 0-.3-.2-.2-.5l1-1.3a3.8 3.8 0 0 0 .4-.7c0-.4 0-1 .3-1h1.4c.4 0 1.1.4 1.3.6v.3l.7.6c.3.3.6 1.1 0 2.5.3.2.3.4.3.7 0 .3 0 .3.3.4.3.1.5.3.7 1 .2.5.9 2 1.3 6-.1 1.1-.3 2-.6 3 .3 1.9.6 4.1.8 7.3l.3 5.6c.5 0 .7.2.8-.3l.1-.4a.6.6 0 0 1 .2-.2.5.5 0 0 1 .2.2l.3 1 .3.6.2.2h.2a2 2 0 0 0 0-.5l.1-.8c0-.1 0-.2.2-.3l.2.2.5 1c0 .2 0 .3.2.4h.2V48l-.2-.7.1-.3a.6.6 0 0 1 .2.1l1.5 2 .1.2h.3a.4.4 0 0 0 .1-.3l-.1-.5v-.3l.4.2.5.6.3.5.3.2a.5.5 0 0 0 0-.4L56 49c.2 0 .4 0 .5.2l.3.4c.2.3.5.6 1.2.7v.1l-.6.3h-2.5a2.9 2.9 0 0 0-1.9.4c-.4.2-.8.2-1.3.2H49c-1.6-.1-2.2.1-3.8.3H44c-.7 0-2.1-.3-2.1-.7l.2-.8c0-.2 0-.2-.3-.3a5.6 5.6 0 0 0-.5 0c-.8-.1-1.7 0-2.5.1-.5 0-1 .2-1.4.3-1.2.1-1.8 0-2.4-.5-.4-.4-.6-.5-.9-1-.5-.7-1.4-1.5-2.4-2.2-1-.8-2.2-2.3-3-3.3-.2-.2-.5-1.2-.6-1.5a3 3 0 0 1-.2-1.3l.4-.2 1.1-.3c.2 0 .4-.2.4-.3v-.1l-.1-.1h-1.2L28 39c0-.2.2-.3.3-.4.7-.1 1.2-.3 1.6-.6a.4.4 0 0 0 0-.2l-1.4-.1-.4-.3c0-.2.2-.2.3-.3l.8-.4.6-.4v-.2c-.5 0-1 0-1.6-.2a1 1 0 0 1-.1-.1.7.7 0 0 1 .2-.3c.3 0 1-.1 1.3-.3a.5.5 0 0 0 .2-.2.6.6 0 0 0-.2-.2 7.8 7.8 0 0 1-1.3-.2c-.1 0-.2 0-.2-.2l.2-.2 1.2-.2a.8.8 0 0 0 .3-.3l-.3-.2-1-.2a1.6 1.6 0 0 1-.3-.1V33l.3-.1.7-.2c.2 0 .4-.2.4-.3a.2.2 0 0 0 0-.2h-1.2L28 32l.3-.2c.3 0 .7-.2 1-.4l.1-.2a.7.7 0 0 0-.2-.1 11.3 11.3 0 0 1-1-.3.7.7 0 0 1 0-.3l.1-.2h.6a3.3 3.3 0 0 0-.3-.6.5.5 0 0 0-.2-.2c-.3-.2-.7-.3-1-.6-.6-.3-1.2-.7-1.7-1.2a3.9 3.9 0 0 1-1.3-2 4.4 4.4 0 0 1 0-1.5c0-.4.3-.8.5-1.2v-.3a6.6 6.6 0 0 0-.9-1 1.6 1.6 0 0 0-.6-.3L22 21c-.4-.1-.7-.2-1-.1a1.9 1.9 0 0 0-.4.7l.3 1.5c.4 0 1 .2 1.5.5.4.3.5.4.7 1 .4 1.2.5 2.7.7 4.3.3 1.6-.5 2.9-2.1 3a3 3 0 0 1-1.1-.2c-.3 0-.6-.2-.7-.6l-.5-1.3c0-.4-.2-.8-.3-1L15.6 30l-3 1.5c-2.1.8-4.4 1.4-6.5 1.4-1.1 0-2.4-.3-3.2-.6-.8-.3-1-.6-1.2-1.6a10.8 10.8 0 0 1 .7-5.3c.3-.6.6-1 1-1.2a6.5 6.5 0 0 1 1.4-.4c.5-.2.9-.2 1.4-.2l1.1.2c.6.3.7.7.7 1.3v1.6c.8.1 2.3 0 3-.1a8 8 0 0 0 2.1-.8c.8-.3 1.8-1.1 3-1.7zM40 37.5l.2 1.2v2.1c-.2 1.2 0 2.5-.2 3.7l-.2 2.4c0 .3 0 .4.3.4.6.2 1 .2 1.3.2.9 0 1.5-.4 1.4-.9l-.2-1c-.2-1-.2-1.4-.2-2.4h.2l.7 2.8c.2.6 0 1.7.2 2.3 1.5.2 3.3 0 4 0 0-1.3 0-2.6-.5-3.1l-1.3-1a6.9 6.9 0 0 1-1.6-1.7c-.7-1-.8-1.4-1.4-2.4l-1.3-2.3a4.3 4.3 0 0 0-.5-.7l-1.4-.3c-.7 0-1.1-.1-1.5-.5-.3-.4-.4-.6-.2-1 0-.3 0-.4-.2-.6-.2-.3-.2-.5 0-.7.5-.4 1.1-.9 1.8-1a.3.3 0 0 0 .1 0l-.1-.6-1.2.2c-.9 0-1.6-.4-1.9-1.5l-.8-2c0-.3 0-.6.2-1l-.7-1c-.5-.2-1-.4-1.3-.8-.2-.2-.3-.2-.4-.1l-.3.3c-.2.2-.5.2-.8 0-.3 0-.5-.4-.5-.7 0-.4.3-.7 0-.9-.2-.3-.5-.7-.1-1l.4-.1a1 1 0 0 0 .5-1.1c0-.4-.2-.5-.6-.5-.5 0-.7-.3-.7-.6 0-.4.4-.6.7-.5.1 0 .3 0 .4.2 0 .1.1.3.3.3.5 0 1-.6 1-1.1 0-.2-.2-.3-.6-.2-.6 0-1.4.3-2.2.6-.4.2-.5.5-.2.9l.1.3c.1.2.1.3 0 .4l-.3.1c-.2.2-.2.4 0 .7a.9.9 0 0 0 .1.2c.2.2.2.3 0 .5s-.2.5-.1.8l.2 1.8v2c0 .4.3.8.7 1.3l1.5 1.7a4 4 0 0 1 1.3 2.6c0 .5.2.7.7 1 1 .3 1.4.8 1.5 1.6.2 1.4-.5 2.7-1.7 2.6-.6 0-1-.5-1-.8 0-.3.2-.7.5-.8a.8.8 0 0 1 .3 0 .6.6 0 0 1 0 .2l-.1.4v.5c.2.1.4.2.7.1.2 0 .4-.3.6-.6.5-1 .2-2.2-.9-2.5h-1.1c-.7.5-1.3.7-1.9 1.2a.4.4 0 0 0 0 .4 56 56 0 0 0 .4 6.8l.2.8.3.3.3-.3.5-.8h.2l.1.1V46l.3.3.2-.3.1-.5a.4.4 0 0 1 .3-.1v1l.3.2.2-.3.3-.5.7-.6a.5.5 0 0 1 .3 0 .6.6 0 0 1 0 .2l-.5 1.2-.2.5h.3s.2 0 .2-.2v-.2l.3-.3a.5.5 0 0 1 .2.3l.2.5.3.2.2-.1.2-.6.3.1.2.4 1.2.1v-3.5l.3-3.2.2-3h.2zm15-20.4l-1.5-.1c-.3 0-.9 0-.9.3l.3.3c.7.5 2.8.6 3.6.5a1.6 1.6 0 0 0 0-.6c-.3-.6-1-1.2-1.7-1.4-.7-.2-1.6-.2-2.2 0l-.2-.5a7.2 7.2 0 0 0 0-2.8c0-.5-.1-.7-.4-1-.1-.2-.3-.2-.4 0a3.2 3.2 0 0 0-.5.4c-.7.9-.6 1.4-.5 2.7l.4.1c.3 0 .3 0 .3-.4l.1-1a.8.8 0 0 1 .1-.2l.3.2v.4c0 .7-.3 1.2-.3 1.5 0 .1.5.3.4.5 0 .2-.8.3-1.3.4-.3-.4-.6-.8-1.2-1-.3-.1-.7-.2-.4-.4l.4-.2c.7-.3.5-.7.4-1.4 0-.2-.1-.3-.3-.3-.4 0-.6 0-1 .2l-.4.4-.8.9H47v-.2l.6-1.6c0-.3.2-.4.4-.4a3 3 0 0 0 3-.7c.2-.4.2-.5-.2-.8-.6-.5-1.4-.8-2.3-.5a1 1 0 0 0-.4.3l-.2.4H49l.3-.1.2.1-.2.2-.6.1-1.2.3c-.2.1-.3 0-.3-.2 0-.3 0-.6.3-.8.5-.4.8-.9 1-1.5 0-.4-.3-.9-.4-1.2v-.2l1.3.6c.2 1.1.9 1.9 2 2.2l1 .4c.4 0 .6 0 .6-.4v-.5l.7-.2c.6 0 1.2.3 1.8.5l.2.3h-.3c-.5 0-.9-.2-1.3-.3-.3 0-.5.1-.6.4.2.3 1 .7 1.4.8.4.1 2 .3 2-.1a5.9 5.9 0 0 0-.2-1.3c0-.4-.4-.6-.7-.7-.7-.2-1.2-.3-2-.3h-.3l-.8.3V9c-.2-.7-.5-.8-1-1v-.5c.5-.3 1-.7 1.2-1l-.7-.4c-.6-.2-.7-.5-1.2-.7a3 3 0 0 0-1-.2c-.4 0-.9 0-1 .2 0 0 0 .2.2.3.3.3 1 .4 1.3.7h.1l-.1.1a3 3 0 0 1-1.3-.3l-.4-.3c-.3-.1-.4 0-.6.3-.1.3 0 .4.3.5.7.4 1.2.7 2.1.8l.2.4a22.7 22.7 0 0 1-1.1-.1 3.4 3.4 0 0 1-.7-.2l-1.5-.8-1-.3c-.1-.1-.2-.2 0-.3l2.7-1.7h.5c.4 0 .6.2 1 .3.3.1.5.2.6 0a4 4 0 0 1 .5-1.5c.4-.6 1-.9 1.7-1.4C54.1 1 55 0 55.3 0c1 0 1.8 1.6 2 2.2.1.5-.6.9-.1.9.4 0 .8 0 .8.4 0 .6-.2 1.3-.5 1.7-.3.4-.7 1-1.2 1.3v.2c.8.5 1.7 1 1.7 1.8 0 .5-.1.8-.4 1-.2.2-.4.4-.4.7v1.5c0 .4-1.2.5-1.3.7a5 5 0 0 1-.4 3l.3.5c1.2.9 1.4 1.7 1.5 2.3-.3.4-.9.7-1 .7-.9 0-2.6-.6-3-.7-.1.3 0 .5.1 1 .2.4.5.7.5 1.2 0 .2 0 .5-.6.6a4 4 0 0 1-2.7-.8l-.4-.2c-.3-.2-.6 0-.7.2l-.2.6c-.1.4-.3.4-.7.3-1.3-.3-1.9-1.6-1.9-2.8l.1-.2.2.1c0 .3 0 .5.2.7 0 .3.1.7.3 1 .3.4.6.7 1 .7.2 0 .3-.1.4-.4.3-.5.6-1 .5-1.6 0-.2-.1-.5-.3-.7l-.4-.4.3-.2c.6.3 1 .2 1.3 0 .3 0 .4-.2.5-.4a20.1 20.1 0 0 1 2-.4c.8 0 1.6.1 2.3.4v.2zM20.9 39c.4 0 1 .2 1 .7a1.4 1.4 0 0 1-.1.2.3.3 0 0 1-.1 0c-.2-.4-.5-.6-1-.5a2 2 0 0 0-1 .6c-.2.2.1.3.4.5l.5.3-.3.6a4 4 0 0 1-.6-.3l.3-.4h.6c0 .5-.7 2.2-.4 2.3.9.1 2-1 2.2-2.7 0-.6.3-1 1-1.1.7-.3 1-.7 1-1.5-.1-.5.1-.3.4-.7l.2-.3c0 .2.2.4.1.6-.2.6 0 1.2.3 1.8l.7 1.7.4.2c.5 1 1.2 2.7 2 3.4.7.6 1.4 1.6 2 2.2.5.3.7 1.2 1.2 1.4.3 0 .3.3.3.6s0 .4.2.4h.7c.2-.1.4 0 .3.2 0 .1-.1.2-.3.2h-.7l-.3.1.1.3 1.2.3.2.1-.2.3a1.2 1.2 0 0 1-.5 0c-.3 0-.7-.3-1-.4l-.3-.3H31v.5l.1.3-.3.1-.9-.6c-.3-.2-.6-.2-1 0l-1 .7c-.4.2-.8.7-1.3.7-.3 0-1-.5-1.2-.6l-1.4-.3c-.5-.1-1 0-1.4.3l-2 .3h-3a4 4 0 0 0-1.2.2H16c-.3 0-.6 0-.8-.2a1.1 1.1 0 0 0-.9-.1h-1c-.3-.4-1-1-1.3-.9-1.2.2-1.8 1-3 .6-.8-.2-1.3-.4-2.1-.1h-1c-.3 0-.4 0-.3-.4v-.1c0-.3-.2-.6-.5-.5-.4.1-.6.5-.9.6-.5.3-1 .2-1.7 0-.4-.2-.8-.1-1.2.1-.3.1-.7.8-1 .8L0 51v-.3c.1-.3.5-.6.7-.7.7-.3 1.4-.4 2.2-.3.4.1.8.2 1.1 0 .3-.1.6-.1.8-.3.5-.2.9-.4 1.4-.2.4-.2.5-.3.7-.6v-1.4l.5-1.2c0-.2.2-.2.3-.2.4.5.8 1 .6 1.5-.1.4.6.6.5 1-.1.2 0 .4.2.4h.2c.2 0 .2-.1.2-.4a8 8 0 0 0-.7-3.3l-.3-.8c-.3-.5-.2-1 0-1.5l.3-1a2 2 0 0 1 1-1.1l.3.1c.7 1 1 2.3.6 3.6l-.2 1.1v.3l.2-.2c.4-.5.8-1 1-1.6.3-.6.8-.8 1.4-1 .6 0 .8 0 .6.6l-.3 1a2 2 0 0 1-1 1.4c-.3 0-.6.3-.8.5a1.4 1.4 0 0 0-.3.2v.3h.5c.2-.3.5-.4.8-.6l1-.6c.2 0 .2 0 .2.3s0 .7-.3.8l-1.1.3a2 2 0 0 0-.5.4l-.4.8v.3h.3l1-1c.3-.2.4-.1.5.2a.9.9 0 0 0 .2.4l.4-.3.2-.4c0-.3.5-1.5.8-1.9l.3.1V47c0 .5.1.6.5.4l1-.5.2-.1h.3v.3l-.4.5v.4h.3l.7-.4h1.1l1.1.4c.3 0 .7 0 1-.2a9.3 9.3 0 0 1 1.5-.6 5 5 0 0 0 2-1.2l.4-.3c.2-.1.3-.6.3-.7v-2l.2-.4h.2v3.5c0 .2-.3.5-.5.5-1.2.5-2.5 1-3.8 1.3-.6.2-1.2.1-1.8.1H18c-.4 0-.9.4-1.3.4l-3 .3-2.7.7a1.6 1.6 0 0 0-.6.3l-.1.2.3.1h.6a33 33 0 0 1 1.8 0l.4.2c.3.2.6.2 1 .2.3-.1.6 0 .9.2.5.4.6.4 1.2.1.5-.3 1-.3 1.5-.2.6 0 1.2 0 1.8.2l1.4.2c.9 0 1.6-.1 2.1-.8l.8-1.1c.2-.3.4-.4.7-.4l2-.2c.3 0 .5.4.5.6 0 .2-.1.4-.3.3h-1.5c-.5-.1-.9 0-1.2.4-.2.2-.1.3.1.4h.4c.2 0 .3.2.4.4 0 .2.4.3.9.3l1.6-.1c.2 0 .4-.4.6-.6.4-.5.6-.7 1.3-.5.5 0 .8-.4 1.2-.4.5 0 .3-.7.1-1a5.4 5.4 0 0 0-.7-1c-.7-.5-1.2-1.5-1.8-2.3-.5-.5-1-.8-1.4-1.4a33.4 33.4 0 0 1-.9-1.6l-.6-1.2-.6-.9c-.3-.3-1 0-1.4.1l-.4.3c1 .8 1 2 .7 2.8 0 .3-.2.3-.5.2l-.7-.3H22l-1.8 1c-.3-.4-.8-1.3-.8-1.7 0-.4.2-.7.3-1a7.5 7.5 0 0 1-1-.6v-.3c.7-.6 1.5-1.2 2.2-1.2zM2 30.2c.1.6.4 1 1 1.3.7.4 1.8.5 2.7.6l3.6-.3c1.9-.4 4.1-1.2 5.8-2a16 16 0 0 1 3.5-1.4 8 8 0 0 1 3.8 0c.6 0 .7 0 .7-.4l-.2-.8c-.1-1-.1-1.8-.5-2.7 0-.1-.2-.3-.5-.4-.3-.2-.6-.3-1-.3a6.5 6.5 0 0 0-1.9 0 9.7 9.7 0 0 0-2.9.9l-2.7 1.5a7.9 7.9 0 0 1-4 1.1l-2.6-.1a9 9 0 0 1-3.8-1c-.2-.2-.4-.1-.5.2l-.2.7c-.2.8-.4 2-.3 3.1zm44.5 10.5a17.5 17.5 0 0 1-1.8.1l.2-.2c.5-.2 1-.4 1.3-.7.2-.2.2-.3.2-.5a8 8 0 0 1-2 .6h-.2l1.7-1.2c.3-.2 0-.3 0-.4l-1.8.6H44l.3-.3 1.7-1v-.2h-.3l-2 .2h-.2a.2.2 0 0 1 0-.1 3.6 3.6 0 0 0 1.1-.8c.1-.2.1-.3 0-.4l-.3.2-1.1.1v-.2l.8-.5.5-.4v-.2a7 7 0 0 1-1.3.3.7.7 0 0 1-.3 0l.1-.2 1.4-.7c.2-.1.3-.3.3-.4h-.2l-1.3.4-.3-.2.2-.2 1.8-.8 1-.8.6-.6v-.1c-1 .5-1.3.8-1.6 1a8.7 8.7 0 0 1-1.6.8.4.4 0 0 1-.2-.1.8.8 0 0 1 0-.2c.2 0 .5-.4.7-.7l1.8-.9.9-.6V31l-2 1v-.3c.5-.3 1.2-.8 1.7-1.4v-.2l-.3.1-1 .4h-.1l.1-.4a6 6 0 0 0 1.3-1.3v-.4c-.4.3-.9.5-1.3.6h-.1v-.2c.5-.5.9-.8 1.2-1.3v-.2l-1.1.3h-.2v-.3l.9-1v-.2a7 7 0 0 1-.7.1c-.1 0-.2 0-.3-.2l.3-.1.4-.3a.6.6 0 0 0 .2-.2l-.3-.1-.9.1c-.6.2-.6.2-.7.4l-.7 2.2c0 .2-.2.4-.4.5-.3.1-.2.3-.3.5-.1.6-.2.6-.4 1l-.6 1H41v-.7l-.3-.9v-.4l.1-.9.1-1.7-.1-.1a.4.4 0 0 0-.1.2l-.3 1.2c-.2.9 0 1.6 0 2.5-.1.7-.3 1.4-.2 2.1v.4l.7-.2c.5-.2.9-.2 1.4-.7.3-.3.3-.9.4-1.4.2-.6.4-.8.6-1l.2.1-.3.9c-.1.3-.3.8 0 .9h.3v.2c-.3.3-.6.7-2 1.1-.2 0-.6.5-.6.7a3.6 3.6 0 0 0 0 .9c.2 1.4.9 2.8 1.7 4.2.7 1.1 1.2 2 2 2.8.3.3.7.5 1.3.3l.8-.5v-.3zm-20-21.1c0 .5 0 .7-.8.5L25 20c-.3-.1-.6-.2-.8-.5-.3-.4-.7-.4-1 0l-.3.2-.2.2v-.3c0-.4.2-.6.5-.8l.8-.3c.7-.2 1-.6 1-1.4l.1-1.5c0-.3 0-.4-.4-.3L23 16a.7.7 0 0 0-.4.4l-.4.9-.1.1-.2-.1-.4-.6a10.1 10.1 0 0 0-.4-.7c-.3-.3-.3-.4 0-.6l1-.8c.4-.4.6-1 .6-1.6v-1c0-.4 0-.5.5-.4.2 0 .5 0 .7.2l1.3.6c.2.2.4.4.4.6 0 .4-.2.6-.5.5a9.2 9.2 0 0 0-1.4-.5c-.3 0-.5 0-.6.3 0 .5.4.5.4.7-.2.4-.8.5-.9.9 0 .3 0 .5.3.4l.9-.3 1.2-.6c.5-.2.8-.1.9.5l.7 4.1v.6zm12-4.3a2.2 2.2 0 0 1 .3-1.1c.2 0 .4 0 .5.2.3.7.9 1.4 1.7 1.8.2.2.5.2.7.2l.2-1.3c0-.5-.2-1-.6-1.3-.3-.4-.8-.7-1.2-1l-.5.1v.4c.2.3.7.6.8.9v.3a.5.5 0 0 1-.2-.1 8.2 8.2 0 0 1-.6-.5 5 5 0 0 1-.8-.8c-.2-.2-.4-.2-.5 0-.4.7-.7 1.4-.7 2.2-.2 1 .3 1.9 1.1 2.3.4.2.7.1.9-.2l.4-1V16l-.7-.7a1 1 0 0 0-.3-.2.4.4 0 0 0 0 .2v1a.6.6 0 0 1 0 .2.6.6 0 0 1-.4-.4l-.1-.7zM4.4 3.4l.5.7c.3.4.4.8.5 1.2.1.3.3.3.5.2a.8.8 0 0 0 .4-.7A2.3 2.3 0 0 0 6 4c-.2-.7 0-1.4.6-1.9.3-.1.4-.4.4-.7l-.3-1c0-.2-.3-.2-.4-.1-.8.4-1.7 1.5-1 2.5V3A1.7 1.7 0 0 1 5 3L3.6 1.6a1.9 1.9 0 0 0-.6-.3c0 .1-.2.5 0 1.3 0 .7.2 1.4.7 2.4l.5.6.6.2v-.6a16.3 16.3 0 0 0-.4-1.4l-.1-.4zm50.5 2.9l1.1-.4c.9-.3 1.4-.9 1.6-1.8.1-.3 0-.4-.3-.5l-.6-.1c-.5-.2-.6 0-.8.6-.2.4-.4.9-.8 1.2-.1.1-.6-.2-.7-.3.8-.5 1.4-1.3 1.8-2.3 0-.1 0-.3-.2-.4a2 2 0 0 0-.9 0c-1 0-2.5 1-3 2.2-.1.1 0 .4 0 .4h.6l.1-.2c.4-.7 1-1 1.7-1.3h.2a.3.3 0 0 1 0 .2 1 1 0 0 1-.3.2l-.7.5-.5.4V5l.3.1h.4l.4.7c.1.2.3.4.6.4zM36.4 6c0 .3-.2.5-.4.4-.6-.2-1-.8-1.6-1-.2-.1-.3 0-.4.3l-.2 1.4c0 1 .5 1.4 1 1.9v.3l-2 1c-.1.1-.4.2-.6 0-.2-.1-.2-.3-.2-.6l.7-2.9c.4-1.5 1-2 2.1-2.1h1c.3 0 .5 0 .5.3v1zm1.4 6.7c0-.7-.6-1-.8-1.6-.3-.6-.5-.6-1-.1s-.9 1-1 1.7c-.3.7-.2 1.4 0 2.1 0 .2.1.5.4.4a.4.4 0 0 0 .2-.4c0-.6.1-1.2.4-1.6l.3-.3v.4l-.2 1.3v.8c.3.3.4.3.5.1.6-.9 1.2-2.2 1.2-2.8zm-31.2 2c0-.7-.2-1.2-.4-1.8-.2-.6-.6-.9-.8-.9-.3 0-.8.6-1 1a3 3 0 0 0-.1 1.3c0 .8.2 1.5.7 2.2 0 .2.3.4.5.2l.7-.7c.2-.4.4-.9.4-1.3zm27 19.3c-.2-1.2-1-2-1.8-2.6l-.4-.3H31v.3l.2 2.4.2 1.7c0 .3.2.4.5.3l1.1-.6c.3-.2.6-.4.4-1.2zm11.7-11.7c-.2-.5-.5-.7-1-.8h-.6l-.9-.2c-.3 0-.5.3-.6.7v.2l.6.2.3.4c0 .1-.2.3-.5.3s-.3.3-.2.6c0 .3.1.6.4.9l.4-.3c.2-.2.2-.4.2-.6 0-.7.3-1.1.8-1.6l-.2 1.1c-.1.8-.4 1.4-1.1 2h.3a.8.8 0 0 0 .7-.2c.3-.3.5-.6.6-1l.2-.4.1.3v1l.4-.3c.3-.7.4-1.7.1-2.3zM54.7 7H54s-.2.4 0 .4c0 .1.1.2.3.2.4 0 .7 0 1.2.2l.3.1-.2.1c-.7.1-1.2.2-1.8-.2l-.2-.1c-.2-.1-.3 0-.2.2 0 .3.3.6.9.8.4.2.8.4 1.2.4L57 9c.3 0 .6-.2.6-.4l-.1-.6-.4-.4c-.6-.6-1-1-2-1 0 0-.2.4-.4.4zm.6 6.7l-.1-1c-.2-.7-.8-1.2-1.5-1.2-.4 0-.5 0-.4.4l.5.7c.2.4.4.7.4 1a1 1 0 0 1-.1.4c-.3-.1-.4-.4-.4-.5-.1-.3-.1-.5-.3-.7 0-.2-.1-.2-.2-.2s-.2 0-.2.2c0 .8.1 1.8 1 2.5l.6.4c.2.1.3 0 .4-.2a6 6 0 0 0 .3-1.8zM6 9.7L5.8 11c0 .4.2.7.6.8 1 .5 2.2.6 3.3.6l.2-.2-.1-.2h-.3L8 11.3a1 1 0 0 1-.4-.2c-.1-.2 0-.4.2-.4l.5.1 1 .5c0 .1.1.2.2 0 .1-.1.2-.2 0-.4l-.7-.6C8 10 7.2 9.7 6 9.8zm23.1 5.8c0 .8 0 1.7-.2 2.6l-.3.3-.3-.3c-.4-1.1-.8-2.2-1-3.4L27 14c0-.3 0-.4.3-.3.6 0 1 .3 1.6.5l.1.4v.8zM4.2 20.4v-.6l.2-1a1.4 1.4 0 0 0 0-.4l-.7.1c-.2.1-.3.3-.3.7v1l.2 1.6c0 .3.2.4.4.2l.5-.5 1-1.2c.4-.4.4-.8.3-1.2-.1-.3-.3-.4-.5-.4-.3 0-.4.2-.5.4 0 .3-.2.5-.3.8a3 3 0 0 1-.3.5zm46.2-2h1c.5.2.7.5.8.7l.1.3a1 1 0 0 1-.9-.1 2.9 2.9 0 0 0-.5-.4c-.3-.1-.7-.2-1 0 0 .2.3.6.5.8.7.5 1 .6 1.6.6h1l.1-.5c0-.6 0-1.2-.5-1.7-.6-.6-1.5-.5-2-.3a1.2 1.2 0 0 0-.4.2.6.6 0 0 0 .2.3zm-20.8-16h.1v.3c-.1.5-.4.9-.8 1.3-.2.1-.2.4 0 .5.2.3.5 0 .7-.1.4-.5.6-1 .8-1.6.3-.6.3-1.5 0-2-.2-.2-.5-.3-.7-.1-.6.6-1.2 1.5-1.2 2.4l.1.4.5-.4.5-.6zm12.2 24.3h.2l.1 1.1v.3l.3-.2.1-.7c.4-1 .1-1.8-.3-2.8 0-.2-.2-.2-.4-.1-.1 0-.2.2-.1.3v.4l-.4 1-.1.5-.1 3.6v.1a.3.3 0 0 0 0 .2.6.6 0 0 0 .2-.1l.2-.6c0-.6.3-.6.3-1.2zM8 3.8a.5.5 0 0 1 0-.2h.6c.3.1.4.1.5-.1.2-.5.1-.9-.3-1a2.3 2.3 0 0 0-.8 0l-1.2.3c-.4.1-.5.5-.2.8.4.4.8.9 1.3 1.2.4.4.8.4 1.3.3.2 0 .3-.1.3-.3a.5.5 0 0 0-.1-.4 1.3 1.3 0 0 0-.3-.2zm-.7 27c0 .2-.1.3-.4.3a4.1 4.1 0 0 1-1-.1c-.3-.1-.3-.2-.4-.4l.1-2 .5-.3 1.1.2c.2 0 .4.4.4.5v.6c0 .5-.2.9-.3 1.1zm33.4 18l.7.2c.4.1.7.2 1 .1.2 0 .4-.2.4-.5 0-.2-.2-.4-.4-.5l-1.9-.4c-.3-.1-.6-.1-.9.1-.4.4-.9.6-1.4.7l-.4.1v.3l.1.2h1.4zm3.3 2c.5 0 .9-.1 1.2-.3l.8-.5.6-.2c.3 0 .5-.3.5-.4 0-.3-.2-.3-.4-.4l-1.5-.2h-.5l-1 .8c-.1.1-.6.3-.7.6-.2.1-.2.3.2.4zM26.9 11.7c0-.3.4-.7.7-.6a.3.3 0 0 1 .1 0l.1.6.2.4c.6 0 1.2-.3 1.4-.8.4-.5.6-1 .8-1.5.1-.2.2-.4.4-.3.1 0 .2.2.1.4l-1 3c-.1.3-.2.3-.5.2l-1.7-.6a.9.9 0 0 1-.6-.8zm12.6 24.7h.3a1 1 0 0 0 .3-.2l.4-.5-.1-2.2-.2-.2h-.9l-1.2 1s-.1.2 0 .2l.2.1.6-.3.4-.2a.3.3 0 0 1 0 .2c-.4.4-.7.9-1.2 1.1v.2l.1.2.6-.3.7-.6c.1.1.2.3 0 .4l-.2.2-.6.5v.2h.1c.2 0 .4 0 .6-.2l.5-.5.2.2zM14 11.2c0 .9-.2 1.7-.6 2.5a1.7 1.7 0 0 1-.3.5l-.3-.6-.6-1.7a2 2 0 0 1-.2-.4l.7-1.1c0-.2.2-.2.3 0zm1.5 17.2c0 .3-.2.5-.6.7-.2.1-.5.3-1 .3 0 0-.2 0-.3-.2 0-.6-.2-1.1-.3-1.6l.2-.4c.4-.4.8-.5 1.3-.5l.5.2zM11 22c-.3 0-1 .4-1 .7v.2c0 .5 0 1 .3 1.4.2.2.3.3.5.1.5-.3 1-.6 1.3-1 .3-.2.5-.6.7-1 0-.2-.2-.3-.4-.4-.3-.1-.7-.1-.8 0-.2 0-.3.2-.3.4a3.6 3.6 0 0 1-.2.6l-.3.4a2 2 0 0 1 0-.6c0-.2 0-.5.2-.8zm4.8 27.5a3.8 3.8 0 0 1-.5 0c0-.2.1-.2.2-.2h.4c.6.1 1-.3 1.6-.4h2.1c.6.3 1.2.5 1.7.1a8.8 8.8 0 0 1 1-.6.6.6 0 0 1 .5 0s.2.3.1.4a.5.5 0 0 1-.3.3c-.9.3-1.8.5-2.8.6-1 0-1.9 0-2.9-.2h-.5zm-12.4-20c0 .2 0 .6.3.8v.2l-1-.1s.3-.3.3-.5l.2-1.9-.2-.3a.4.4 0 0 1 .1-.2c.7.2.8.2 1 .5l.4 1.2a.4.4 0 0 0 .2-.1v-1c0-.2 0-.3.3-.3h.6v.3c-.4 0-.4.1-.6 1l-.1 1-.1.4h-.3a12.5 12.5 0 0 0-.8-1.7h-.1l-.1.4a.9.9 0 0 0 0 .2zm22 4.8a2.7 2.7 0 0 0 0-.6l-.2-.7v-.2c.2-.6.3-1.1.2-1.6a12.6 12.6 0 0 1 0-1.9v-.1c.3 0 .4.1.5.3v.6c.1.5 0 1 0 1.6l-.1 3.2.1.5c.1.3 0 .7-.2 1h-.2c0-.5-.4-1-.5-1.6l.1-.1c.2 0 .3-.2.3-.4zm10.4-8c-.4 0-.8-.3-.8-1l-.7.7c0 .2.6.6 1 .7l.7.8.4-1c0-.8-.1-1.4-.3-1.7-.3-.4-.9-.7-1.4-1-.2.2.1.8.7 1.2-.1.4-.1 1 .5 1.3zM6 25.4l1-.1c.3 0 .6-.1.6-.4 0-.3-.3-.4-.5-.5-.8-.2-2.2-.2-3.2.3l-.6.5c-.3.2-.2.4 0 .5l.8.4.2-.8.5-.4c.4-.2.9-.2 1.4-.2h.2l-.1.2-.4.2-.3.1c0 .2.2.2.4.2zm2.2 5.8l.1-.3v-2.1l.2-.2.2.1.9 1v-1.3c-.1-.3-.3-.5-.1-.5h.8l-.1.5-.2 1 .2 1.3H10a.8.8 0 0 1-.2 0l-1.2-1.3a.4.4 0 0 0-.1.2c0 .3.2.7.4 1 .2.1.2.2-.1.3l-.7.1zm13.2.5c.5 0 1 0 1.4-.4.5-.3.7-1.2.5-1.7a.6.6 0 0 0-.1-.3c-.2-.2-.3-.2-.4.1l-.1.7-.1.4a3.5 3.5 0 0 0-1 0c-.4 0-1.1.3-1.1.7 0 .4.6.5 1 .5zm4.2-5.2l.2.5 1.4 1.2 1 .5a2.5 2.5 0 0 1 1.3 1l.4.4c.2.3.5.5 1 .6h.2c0-.3 0-.3-.3-.5a20 20 0 0 0-2.4-2 29 29 0 0 1-1.5-1l-.7-.4zm-15.4 17a63.2 63.2 0 0 0-.5-1.9l-.2-.1-.1.1-.5 1.4a.7.7 0 0 0 0 .4l.7 2 .3.2.1-.3zm2.6-15.7l.1.4v.2h-.2c-.3-.1-.6-.3-.9-.1v.3l1 .4c.4.1.5.3.4.8 0 .4-.4.6-.8.7a1.6 1.6 0 0 1-.6 0v.4h-.2a4 4 0 0 1-.2-.3l-.1-.7v-.2c.2 0 .3.3.5.4l.7.1.2-.3-.3-.2-.8-.4c-.3-.1-.3-.4-.3-.6 0-.3.1-.6.5-.7l.5-.2.1-.4h.2zM6.4 8.9c-.6 0-1-.2-1.5-.1-.5 0-.9.2-1.3.3l-.2.2.2.2.6.1L8 9.2l.2-.3-.4-.2-1.3-.2-.2.4zm14.3 18.5s-.2 0-.3.2a.8.8 0 0 1-.3.2l-.1-.1.2-.6c.1-.3.2-.3.5-.2l.2.2c.2.2.4.3.6.2.3-.1.1-.4 0-.5l-1-.5c-.3-.2-.4-.4-.4-.7 0-.2.2-.5.5-.6h.5c.2 0 .3 0 .4-.2.1-.1.3-.2.3 0v.9h-.3c-.2-.3-.4-.5-.6-.4-.2 0-.3.1-.2.3l.4.3.6.3c.5.3.4.6.4.9 0 .3-.3.5-.7.5a1.3 1.3 0 0 1-.7-.2zm-1-1v.5c-.2.4-.6.6-1 .6s-.6-.1-.7-.5l-.2-1.3-.5-.1-.1-.2.6-.2c.4 0 .4 0 .5.3l.2 1.4c0 .2.1.3.4.3.2 0 .3 0 .3-.3v-1.1l-.4-.5c-.1-.1-.2-.2 0-.3.7-.2.7-.4.8.4l.2 1zM20 29c0 .3.2 1.2.4 1.4l1.4-.3c.4-.1.6-.5.5-.9 0-.3-.2-.4-.4-.5a1.6 1.6 0 0 0-.3 0c-.6 0-1 .1-1.5.3zM7.4 25.4l-.6.1-.8.1-.8-.2c-.2 0-.4.2-.5.5 0 .3.2.5.5.6a9 9 0 0 0 2 .2c.2 0 .2 0 .2-.2zm16-14.3l-.8-.3-.2-.3V9.4c0-.2.1-.3.3-.2.3 0 .5 0 .8.2.3.1.8 1 .7 1.4-.2.3-.4.3-.8.3zm-5.7 16.4l-.3.3c-.3.2-1 .3-1.4.6-.2.1 0-.3 0-.5l-.3-1.1-.3-.6c-.2-.2.2-.2.3-.3l.7-.2h.2v.2c-.3.2-.3.3-.2.6v.9l.2.4c.2 0 .5-.2.5-.3V27l.2-.2.1.2.3.6zm1.2-6.9c-.1 0-.2 0-.3-.2l-.3-1.3c0-.2 0-.3.3-.3l1.7.5c.2 0 .2.2.1.3l-1.3 1zm25.7-16c0-.5-.5-1.4-.7-1.7-.3-.3-.6-.4-1 0a2.6 2.6 0 0 0-.2.2c-.3.4-.3.5.2.7l.9.5.7.7v-.4zM12.8 43.3a2.9 2.9 0 0 0-1 .8l-.5 1a5 5 0 0 0-.3 1h.1c.3 0 .9-.6 1-.6.4-.5.6-1 .8-2zm44-41.1c-.2-.6-.7-1.3-1-1.6-.2-.3-.3-.4-.6 0a2.5 2.5 0 0 0-.3.2c-.3.4-.5.9 0 1l1.3.1.5.4.2-.1zM6.2 29v1.3c0 .3.1.3.4.3.2 0 .3-.2.3-.5l.2-1c0-.3 0-.5-.2-.5-.3 0-.6.1-.7.4zm4-13.5a4 4 0 0 1-1-.3c-.5-.3-1-.8-.9-1.3 0-.2.2-.3.4-.2l.1.1.9 1c.2.1.4.4.5.7zm3.7 12l.2 1c0 .2.1.4.4.3.3 0 .4-.2.4-.4l-.2-1c0-.3-.2-.5-.5-.4-.2 0-.3 0-.3.4zm14.9-19L28 9.7l-.7.7H27v-.2L28 9l.4-.5h.2l.2.1zm20 10.4l-.1.7-.3-.5c0-.3-.4-.8-.7-1.4v-.2c0-.1.1-.2.2-.1h.3zM51 2.4s.2 0 .3.2v.3l-1.9.8s-.2.1-.1 0c0-.4 1.3-1.3 1.7-1.3zM33.8 24.2c-.3 0-.6.2-.6.5s.4.6.7.6c.3 0 .5-.2.5-.5 0-.4-.2-.6-.6-.6zM7.4 49.4l-.3.2c-.4 0-.5.1-.5.3 0 .2.1.3.3.3.5-.2.8-.2 1.4-.1h.1l.3-.4-.3-.2h-1zm35.2-28.8c0 .1-.2.2-.1.3v.3h.8l1.2.2.2-.1V21c-.4-.2-.9-.4-1.4-.4zm-22-10a15 15 0 0 1-.8-.4v-.3l.5-.7h.3l.4 1c0 .2 0 .3-.4.3zM10 20.5c.2 0 .3 0 .2.2 0 .1 0 .2-.2.2a3.5 3.5 0 0 1-.8.2 4.3 4.3 0 0 1-1 0l-.4-.2a.4.4 0 0 1 .3-.2zm5.7-16h-.2l-1.7-1-.1-.2h.2c.4 0 1 .3 1.4.4.3.2.4.4.4.7zm8.1 11.6c.1 0 .2.2 0 .4-.3.5-.3.9-.5 1.5a1.8 1.8 0 0 1-.2.3l-.2.1v-.2l.2-1 .3-.7c0-.3.2-.4.4-.4zm19.6-6c-.7 0-1.4-.3-2.1-.6a.4.4 0 0 1-.2-.2.5.5 0 0 1 .3 0l2 .5.2.2a.6.6 0 0 1-.2.2zM35 22.9a.7.7 0 0 0-.3-.3c0-.1-.2 0-.4 0a1.8 1.8 0 0 0-.3.3c-.1.2 0 .4.2.6h.6zm-13-9.7l-.2.4a25.5 25.5 0 0 1-.9 1h-.2v-.3a5.4 5.4 0 0 1 .4-.7l.5-.6h.3v.2zm-11.3-2.8l-.3-.2-.8-1.3-.2-.4.3-.3a.5.5 0 0 1 .1.2l.5 1 .4.7zm-.5 6.6l-.4-.2-1 .2a1.4 1.4 0 0 1-.4 0l-.3-.1.6-.3c.2 0 1-.1 1.6 0v.4zm40.5-8.5h.2l1.2 1v.1a.5.5 0 0 1 .1.2 1.3 1.3 0 0 1-.2 0c-.5-.3-1-.5-1.4-1v-.3zM21.5 10v.2l-.2-.2-.2-.6c0-.5 0-.8.3-1 .1-.2.2-.2.2 0V10zm-7.4-1.8v.2l.4 1.7v.6l-.2-.2-.2-.8-.2-1c0-.2 0-.4.2-.5zm34 7.2l.5.5.7.6v.3H49l-1.2-.9v-.4a.4.4 0 0 1 .1 0zM25.3 5.1h.8l.1.2-.1.2h-1.5a1 1 0 0 1-.2-.3l.2-.1zM35 7c.4.5.5 1 .6 1.5v.1h-.1c-.4-.5-.7-.9-.8-1.4l.1-.3h.2zm-6 34.3l.9-.6c.1-.1 0-.1 0-.2 0-.2-.1-.2-.3-.1-.4 0-.6.2-1 .3-.1 0-.2.2 0 .3zM17.2 5.8l.7-.3.8-.4a.4.4 0 0 1 .3.1l-.2.2-1.2.7a2.4 2.4 0 0 1-.4 0 .3.3 0 0 1 0-.3zm-12 9.8l-.1-1a2.6 2.6 0 0 1 0-.7l.2-.2.2.2v1.7h-.2zm26.1-12a8 8 0 0 1 1.4-.8 5 5 0 0 1-1.4 1.4zM25 24.4c0 .3.1.5.3.7l.2-.3v-1.3c0-.2-.2-.2-.2 0-.1.3-.3.6-.3 1zm22 17.4l-1.9.6c.4.5 1.7 0 1.9-.6zM19.6 8c0 .5 0 1.1-.3 1.6l-.2.2v-.3a61 61 0 0 1 .4-1.6zm26 35.4h1a.7.7 0 0 0 .2-.3l.1-.5-.5.3a8.1 8.1 0 0 1-.9.2l-.1.2.1.1zm-3.8-19.8l.4-.8-.2-.3a.8.8 0 0 0-.2 0c-.1.2-.7.9-.6 1h.6zm-31-7.8l.4-1h.2v1a.7.7 0 0 1-.2.4.5.5 0 0 1-.2 0V16zm22.6 7.3c-.2 0-.4.2-.5.4 0 .2.2.4.5.4.2 0 .4-.2.4-.4 0-.3-.1-.4-.4-.4zm-.2 2.5c0-.3-.2-.5-.5-.5-.2 0-.4.2-.4.4s.3.4.5.4c.3 0 .4-.1.4-.3zm-1-2.6c0 .3-.2.4-.4.4s-.5-.2-.5-.4.2-.4.4-.4c.3 0 .5.1.5.4zm.2 1c-.3 0-.4.2-.4.4s.2.4.4.4.4-.2.4-.4-.2-.4-.4-.4zm-2.7 18c-.3 0-.6 0-.5.2 0 .2.2.4.4.4s.3-.2.3-.4 0-.3-.2-.3zm-19-38c-.2-.5-.1-1 0-1.7.3.6.3 1.4 0 1.8zm22.5 17.6c-.2 0-.3.3-.3.3l.2.4a.6.6 0 0 0 .3-.3z"
						fill="#53565A"
					></path></svg
				>
--- End of File ---

--- File Path ---
frontend/src/lib/utils/debounce.ts

// src/lib/utils/debounce.ts
export function debounce<T extends (...args: any[]) => any>(
    func: T,
    wait: number
): (...args: Parameters<T>) => void {
    let timeout: ReturnType<typeof setTimeout> | null = null;

    return function executedFunction(...args: Parameters<T>) {
        const later = () => {
            timeout = null;
            func(...args);
        };

        if (timeout !== null) {
            clearTimeout(timeout);
        }
        timeout = setTimeout(later, wait);
    };
}
--- End of File ---

--- File Path ---
frontend/src/lib/utils/articleUtils.ts

// src/lib/utils/articleUtils.ts

export interface Article {
	id: string | number;
	title: string;
	content: string;
	disciplines: string[]; // Keep track of disciplines associated with the article
	published_at: string;
	journal?: string;
	grade?: string;
	link?: string;
	// Add other potential fields if needed from your API response
	article_id?: string | number; // Handle potential variations in ID naming
	is_read?: boolean; // Track if the article has been read by the user
	is_liked?: boolean; // Track if the article has been liked by the user (heart icon)
	like_count?: number; // Track the number of likes for the article (heart icon)
	read_count?: number; // Track total reads for the article
	is_thumbed_up?: boolean; // <<< NEW: Track if the article has been thumbed up by the user
	thumbs_up_count?: number; // <<< NEW: Track the number of thumbs up for the article
}

export interface ContentSection {
	emoji: string;
	title: string;
	content: string[];
}

export function formatTitle(title: string): string {
	if (!title) return '';
	const words = title.toLowerCase().split(' ');
	if (words.length === 0) return '';
	words[0] = words[0].charAt(0).toUpperCase() + words[0].slice(1);
	return words.join(' ');
}

export function formatDate(publishedAt: string): string {
	if (!publishedAt) return 'Non spécifiée';
	try {
		const date = new Date(publishedAt);
		// Basic validation
		if (isNaN(date.getTime())) {
			return 'Date invalide';
		}
		return `${date.getDate().toString().padStart(2, '0')}/${(date.getMonth() + 1)
			.toString()
			.padStart(2, '0')}/${date.getFullYear()}`;
	} catch (e) {
		console.error('Error formatting date:', publishedAt, e);
		return 'Date invalide';
	}
}

export function extractTitleEmoji(content: string): string {
	if (!content || typeof content !== 'string') return '📝';
	const lines = content.split('\n');
	for (const line of lines) {
		// Check for H1 level emoji title first
		if (
			line.trim().startsWith('# 📝') ||
			line.trim().startsWith('# 📌') ||
			line.trim().startsWith('# 🧪') ||
			line.trim().startsWith('# 📊') ||
			line.trim().startsWith('# 🩺') ||
			line.trim().startsWith('# 📖')
		) {
			const parts = line.trim().split(' ');
			if (parts.length > 1) {
				return parts[1] || '📝'; // Return the emoji after '#'
			}
		}
	}
	return '📝'; // Default emoji
}

export function parseContent(content: string): ContentSection[] {
	if (!content || typeof content !== 'string') return [];

	const sections: ContentSection[] = [];
	// Initialize with default values, matching the original structure
	let currentSection: ContentSection = { emoji: '', title: '', content: [] };
	const lines = content.split('\n');
	let inSection = false; // Use the flag as in the original

	for (const line of lines) {
        const trimmedLine = line.trim();

		// Explicit startsWith checks, identical to the original
		if (
			trimmedLine.startsWith('## 📝') ||
			trimmedLine.startsWith('## 📌') ||
			trimmedLine.startsWith('## 🧪') ||
			trimmedLine.startsWith('## 📊') ||
			trimmedLine.startsWith('## 🩺') ||
			trimmedLine.startsWith('## 📖')
		) {
			// If we were already tracking a section, push the completed one
			if (inSection && (currentSection.title || currentSection.content.length > 0)) {
				sections.push(currentSection);
			}

            // Start a new section
			inSection = true;

            // Extract emoji and title using the original split(' ') method
            // Remove the "##" prefix and any leading space first
            const parts = trimmedLine.replace(/^##\s*/, '').split(' ');
            const emoji = parts[0] || '📝'; // Default emoji if split fails unexpectedly
            const titleParts = parts.slice(1); // Get the rest of the parts for the title

			currentSection = {
                emoji: emoji,
                title: titleParts.join(' ').trim(), // Join remaining parts for title
                content: []
            };
		} else if (trimmedLine && inSection) {
			// If it's a non-empty line and we are inside a section, add to content
            // Optional: Add the check for markdown lines again if needed
            if (trimmedLine !== '---' && trimmedLine !== '***' && trimmedLine !== '___') {
			    currentSection.content.push(trimmedLine);
            }
		}
        // Lines before the first heading or empty lines outside sections are ignored, matching original behaviour
	}

	// Push the very last section after the loop finishes
	if (inSection && (currentSection.title || currentSection.content.length > 0)) {
		sections.push(currentSection);
	}

    // Add the fallback just in case this logic *still* fails for some reason
    if (sections.length === 0 && content?.trim()) {
        console.warn("parseContent (original logic) failed to find sections, returning raw content block.");
        return [{ emoji: '📄', title: 'Contenu', content: content.split('\n').map(l => l.trim()).filter(Boolean) }];
    }

	return sections;
}

// Helper to get a consistent ID, handling both 'id' and 'article_id'
export function getArticleId(article: Article): string | number {
    // Prioritize 'id', then 'article_id', then generate fallback
    const id = article.id ?? article.article_id;
    if (id !== null && id !== undefined) {
        return id;
    }
    // Fallback if no ID is present (should be rare)
    console.warn("Article missing 'id' and 'article_id', generating fallback ID.");
    return Date.now() + Math.random();
}
--- End of File ---

--- File Path ---
frontend/src/lib/utils.ts

import { type ClassValue, clsx } from "clsx";
import { twMerge } from "tailwind-merge";

export function cn(...inputs: ClassValue[]) {
	return twMerge(clsx(inputs));
}

--- End of File ---

--- File Path ---
frontend/src/lib/stores/supabase.ts

import { writable } from 'svelte/store';
import type { SupabaseClient } from '@supabase/supabase-js';

export const supabaseStore = writable<SupabaseClient | null>(null);

--- End of File ---

--- File Path ---
frontend/src/lib/stores/user.ts

import { writable } from 'svelte/store';

export interface UserProfile {
    id: string;
    first_name: string | null;
    last_name: string | null;
    email: string;
    disciplines: string[] | null;
    notification_frequency: string | null;
    date_of_birth: string | null;
    status: string | null;
    specialty: string | null;
}

const userProfile = writable<UserProfile | null>(null);
export default userProfile; 
--- End of File ---

--- File Path ---
frontend/src/lib/stores/user.js

import { writable } from 'svelte/store';

const userProfile = writable(null);
export default userProfile;
--- End of File ---

--- File Path ---
frontend/src/lib/index.ts

// place files you want to import through the `$lib` alias in this folder.

--- End of File ---

--- File Path ---
frontend/src/app.css

@import "tailwindcss";
/* #030712 */
/* ambiance pubmed pour la police */

:root {
    background-color: black;
}

--- End of File ---

--- File Path ---
frontend/src/components/FeedbackModal.svelte

<script lang="ts">
	import { AlertTriangle, CheckCircle, Loader2, X } from 'lucide-svelte';
// Import necessary icons
	import { createEventDispatcher, tick } from 'svelte';

	const dispatch = createEventDispatcher();

	let { isOpen } = $props<{ isOpen: boolean }>();

	// Form state - These will now hold the full French strings
	let contentUseful: string | null = $state(null);
	let formatSuitable: string | null = $state(null);
	let desiredFeatures = $state('');
	let willingToPay: string | null = $state(null); // Will hold "Oui" or "Non"
	let priceSuggestion = $state('');
	let reasonNotToPay = $state('');
	let improvements = $state('');

	// Submission state
	let submissionStatus: 'idle' | 'loading' | 'success' | 'error' = $state('idle');
	let submissionMessage = $state('');

	function closeModal() {
		isOpen = false;
		dispatch('close');
		// Reset state after closing
		resetForm();
	}

	function handleBackdropClick(event: MouseEvent) {
		if (event.target === event.currentTarget && submissionStatus !== 'loading') {
			closeModal();
		}
	}

	function resetForm() {
		contentUseful = null;
		formatSuitable = null;
		desiredFeatures = '';
		willingToPay = null;
		priceSuggestion = '';
		reasonNotToPay = '';
		improvements = '';
		submissionStatus = 'idle';
		submissionMessage = '';
	}

	async function handleSubmit() {
		submissionStatus = 'loading';
		submissionMessage = '';

        // This object now naturally contains the full French answers
		const feedback = {
			contentUseful,
			formatSuitable,
			desiredFeatures,
			willingToPay,
			priceSuggestion,
			reasonNotToPay,
			improvements
		};

		try {
			const response = await fetch('/api/submit-feedback', {
				method: 'POST',
				headers: { 'Content-Type': 'application/json' },
				body: JSON.stringify(feedback)
			});

			const result = await response.json().catch(() => ({}));

			if (!response.ok) {
				throw new Error(result.message || `Erreur ${response.status}: La requête a échoué.`);
			}

			submissionStatus = 'success';
			submissionMessage = result.message || 'Merci, votre retour a bien été envoyé !';

			await tick();
			setTimeout(() => {
				if (submissionStatus === 'success' && isOpen) {
					closeModal();
				}
			}, 2500);

		} catch (err: any) {
			console.error("Feedback submission error:", err);
			submissionStatus = 'error';
			submissionMessage = err.message || "Une erreur inattendue est survenue lors de l'envoi.";
		}
	}

	// Prevent body scroll when modal is open
	$effect(() => {
		const body = document.body;
		let originalOverflow: string | null = null;

		if (isOpen) {
			originalOverflow = body.style.overflow;
			body.style.overflow = 'hidden';
		}

		return () => {
			if (originalOverflow !== null) {
				body.style.overflow = originalOverflow;
			} else {
				body.style.overflow = '';
			}
			if (!isOpen && submissionStatus !== 'idle') {
				resetForm();
			}
		};
	});

</script>

{#if isOpen}
    <div
        class="fixed inset-0 z-50 flex items-start justify-center bg-black bg-opacity-70 backdrop-blur-sm overflow-y-auto pt-10 pb-10"
        on:click={handleBackdropClick}
        role="dialog"
        aria-modal="true"
        aria-labelledby="feedback-modal-title"
    >
        <div class="relative w-full max-w-2xl rounded-lg bg-gray-800 text-white shadow-xl mx-4 my-auto">
            <button
                class="absolute right-4 top-4 rounded-full p-1 text-gray-400 transition-colors hover:bg-gray-700 hover:text-white disabled:opacity-50"
                on:click={closeModal}
                disabled={submissionStatus === 'loading'}
                aria-label="Fermer la fenêtre"
            >
                <X class="h-6 w-6" />
            </button>

            <div class="p-6 sm:p-8">
                <h2 id="feedback-modal-title" class="mb-4 text-xl sm:text-2xl font-bold">🔍 Donne-nous ton avis en 1 minute !</h2>

                {#if submissionStatus !== 'success'}
                    <p class="mb-6 text-sm sm:text-base text-gray-300">
                        On veut rendre notre outil vraiment utile pour toi. Tes retours sont précieux 🙏
                    </p>

                    <form on:submit|preventDefault={handleSubmit} class="space-y-5 sm:space-y-6">
                        <!-- Question 1 -->
                        <fieldset>
                            <legend class="mb-2 font-medium text-sm sm:text-base">1. Est-ce que le contenu proposé t'est utile ?</legend>
                            <div class="space-y-1 sm:space-y-2 text-sm sm:text-base">
                                {#each [
                                    { value: 'Oui, très utile', label: 'Oui, très utile' },
                                    { value: 'Oui, plutôt utile', label: 'Oui, plutôt utile' },
                                    { value: 'Bof, peu utile', label: 'Bof, peu utile' },
                                    { value: 'Pas du tout utile', label: 'Pas du tout utile' }
                                ] as option}
                                <label class="flex items-center cursor-pointer">
                                    <!-- Changed value attribute -->
                                    <input type="radio" name="contentUseful" value={option.value} bind:group={contentUseful} class="mr-2 h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-600 bg-gray-700" />
                                    {option.label}
                                </label>
                                {/each}
                            </div>
                        </fieldset>

                        <!-- Question 2 -->
                        <fieldset>
                            <legend class="mb-2 font-medium text-sm sm:text-base">2. Est-ce que le format te convient ?</legend>
                             <div class="space-y-1 sm:space-y-2 text-sm sm:text-base">
                                {#each [
                                    { value: 'Parfaitement (court, clair, pertinent)', label: 'Parfaitement (court, clair, pertinent)' },
                                    { value: 'Ça pourrait être mieux (trop long/technique…)', label: 'Ça pourrait être mieux (trop long/technique…)' },
                                    { value: 'Pas du tout adapté', label: 'Pas du tout adapté' }
                                ] as option}
                                <label class="flex items-center cursor-pointer">
                                    <!-- Changed value attribute -->
                                    <input type="radio" name="formatSuitable" value={option.value} bind:group={formatSuitable} class="mr-2 h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-600 bg-gray-700" />
                                    {option.label}
                                </label>
                                {/each}
                            </div>
                        </fieldset>

                        <!-- Question 3 (No change needed) -->
                        <div>
                            <label for="desiredFeatures" class="block mb-2 font-medium text-sm sm:text-base">3. Quelles fonctionnalités aimerais-tu voir sur le site ?</label>
                            <textarea id="desiredFeatures"
                                bind:value={desiredFeatures}
                                placeholder="ex : recommandations personnalisées, filtres, recherche, audio…"
                                class="w-full rounded-md bg-gray-700 p-3 text-sm sm:text-base text-white placeholder-gray-400 border border-gray-600 focus:ring-blue-500 focus:border-blue-500"
                                rows="3"
                            ></textarea>
                        </div>

                        <!-- Question 4 -->
                        <fieldset>
                            <legend class="mb-2 font-medium text-sm sm:text-base">4. Serais-tu prêt·e à payer pour cet outil ?</legend>
                            <div class="mb-3 space-y-1 sm:space-y-2 text-sm sm:text-base">
                                {#each [ { value: 'Oui', label: 'Oui' }, { value: 'Non', label: 'Non' } ] as option}
                                <label class="flex items-center cursor-pointer">
                                     <!-- Changed value attribute -->
                                    <input type="radio" name="willingToPay" value={option.value} bind:group={willingToPay} class="mr-2 h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-600 bg-gray-700" />
                                    {option.label}
                                </label>
                                {/each}
                            </div>

                             <!-- Conditional fields based on "Oui" or "Non" -->
                            {#if willingToPay === 'Oui'}
                                <div class="mb-3 transition-opacity duration-300 ease-in-out">
                                    <label for="priceSuggestion" class="block mb-2 text-sm sm:text-base">Si oui, à quel prix (par mois) ?</label>
                                    <input id="priceSuggestion"
                                        type="text"
                                        bind:value={priceSuggestion}
                                        placeholder="ex : 1€, 2€, 5€…"
                                        class="w-full rounded-md bg-gray-700 p-3 text-sm sm:text-base text-white placeholder-gray-400 border border-gray-600 focus:ring-blue-500 focus:border-blue-500"
                                    />
                                </div>
                            {:else if willingToPay === 'Non'}
                                <div class="mb-3 transition-opacity duration-300 ease-in-out">
                                    <label for="reasonNotToPay" class="block mb-2 text-sm sm:text-base">Si non, qu'est-ce qui te manquerait pour envisager de payer ?</label>
                                    <textarea id="reasonNotToPay"
                                        bind:value={reasonNotToPay}
                                        class="w-full rounded-md bg-gray-700 p-3 text-sm sm:text-base text-white placeholder-gray-400 border border-gray-600 focus:ring-blue-500 focus:border-blue-500"
                                        rows="2"
                                    ></textarea>
                                </div>
                            {/if}
                        </fieldset>

                        <!-- Question 5 (No change needed) -->
                        <div>
                            <label for="improvements" class="block mb-2 font-medium text-sm sm:text-base">5. Tu as 30 secondes de plus ? Dis-nous ce qu'on pourrait améliorer 👇</label>
                            <textarea id="improvements"
                                bind:value={improvements}
                                placeholder="Suggestions, bugs rencontrés, idées..."
                                class="w-full rounded-md bg-gray-700 p-3 text-sm sm:text-base text-white placeholder-gray-400 border border-gray-600 focus:ring-blue-500 focus:border-blue-500"
                                rows="3"
                            ></textarea>
                        </div>

                        <!-- Submission Area (No change needed) -->
                        <div class="flex flex-col items-end gap-3 pt-2">
                             {#if submissionStatus === 'error'}
                                <p class="text-sm text-red-400 flex items-center gap-1 w-full justify-start" role="alert">
                                    <AlertTriangle class="h-4 w-4 flex-shrink-0"/> {submissionMessage}
                                </p>
                             {/if}
                             <button
                                type="submit"
                                class="inline-flex items-center justify-center rounded-lg bg-blue-600 px-5 py-2.5 font-semibold text-white transition-colors hover:bg-blue-700 disabled:opacity-60 disabled:cursor-not-allowed"
                                disabled={submissionStatus === 'loading'}
                            >
                                {#if submissionStatus === 'loading'}
                                    <Loader2 class="mr-2 h-5 w-5 animate-spin" />
                                    Envoi en cours...
                                {:else}
                                    Envoyer le retour
                                {/if}
                            </button>
                        </div>
                    </form>

                {:else if submissionStatus === 'success'}
                     <!-- Success State (No change needed) -->
                    <div class="flex flex-col items-center justify-center text-center py-8 px-4">
                        <CheckCircle class="h-16 w-16 text-green-500 mb-4" />
                        <h3 class="text-xl font-semibold mb-2">Retour envoyé !</h3>
                        <p class="text-gray-300 mb-6">{submissionMessage}</p>
                        <p class="text-xs text-gray-400">Cette fenêtre se fermera automatiquement.</p>
                    </div>
                {/if}
            </div>
        </div>
    </div>
{/if}

<style>
 /* Optional: Add some transition for the modal appearance */
    .fixed {
        transition: opacity 0.3s ease-in-out;
    }
</style>
--- End of File ---

--- File Path ---
frontend/src/hooks.server.ts

// hooks.server.ts
import { PUBLIC_SUPABASE_ANON_KEY, PUBLIC_SUPABASE_URL } from '$env/static/public';
import { createServerClient } from '@supabase/ssr';
import { redirect, type Handle } from '@sveltejs/kit';
import { sequence } from '@sveltejs/kit/hooks';

const supabase: Handle = async ({ event, resolve }) => {
  const isProduction = !event.url.hostname.includes('localhost');
  console.log('isProduction:', isProduction);

  event.locals.supabase = createServerClient(PUBLIC_SUPABASE_URL, PUBLIC_SUPABASE_ANON_KEY, {
    cookies: {
      getAll: () => {
        const cookies = event.cookies.getAll();
        // console.log('Cookies getAll:', cookies);
        return cookies;
      },
      setAll: (cookiesToSet) => {
        // console.log('Cookies to set:', cookiesToSet);
        cookiesToSet.forEach(({ name, value, options }) => {
          const cookieOptions = {
            ...options,
            path: '/',
            httpOnly: true,
            secure: isProduction, // Désactivé en local (pas de HTTPS)
            sameSite: isProduction ? 'lax' : 'lax', // 'none' nécessite HTTPS
            domain: isProduction ? '.veillemedicale.fr' : undefined, // Pas de domaine en local
          };
          console.log(`Setting cookie: ${name}=${value}, options:`, cookieOptions);
          event.cookies.set(name, value, cookieOptions);
        });
      },
    },
  });

  event.locals.safeGetSession = async () => {
    const {
      data: { session },
      error: sessionError,
    } = await event.locals.supabase.auth.getSession();
    if (sessionError) {
      console.error('Session error:', sessionError);
      return { session: null, user: null };
    }
    if (!session) {
      console.log('No session found');
      return { session: null, user: null };
    }

    const {
      data: { user },
      error: userError,
    } = await event.locals.supabase.auth.getUser();
    if (userError) {
      console.error('User error:', userError);
      return { session: null, user: null };
    }

    // console.log('Session:', session);
    // console.log('User:', user);
    return { session, user };
  };

  return resolve(event, {
    filterSerializedResponseHeaders(name) {
      return name === 'content-range' || name === 'x-supabase-api-version';
    },
  });
};

const authGuard: Handle = async ({ event, resolve }) => {
  const { session, user } = await event.locals.safeGetSession();
  event.locals.session = session;
  event.locals.user = user;

  if (event.url.pathname.startsWith('/ma-veille') && !session) {
    throw redirect(303, '/login');
  }

  return resolve(event);
};

export const handle: Handle = sequence(supabase, authGuard);
--- End of File ---

--- File Path ---
frontend/src/i18n.json

{
  "fr": {
    "home": {
      "title": "Veille",
      "subtitle": "L'outil de veille scientifique conçu pour les professionnels de santé",
      "description": "Veille notifie les médecins des dernières études pertinentes selon leurs disciplines et préférences. Recevez vos alertes personnalisées et restez à jour en 5 min par jour.",
      "phrase1": "Trop d'études scientifiques, pas assez de temps pour les lire ?",
      "phrase2": "Avec Veille, restez à la pointe de votre spécialité.",
      "hero": {
        "title": "Veille scientifique simple et efficace 🔍",
        "subtitle": "5 min/jour max via newsletter",
        "signup": "S'inscrire",
        "viewArticles": "🚀 Accéder à ma veille",
        "signupForVeille": "S'inscrire afin d'obtenir ma veille"
      },
      "arguments": {
        "cta": "3 min/jour pour rester à la pointe de votre spécialité",
        "list": [
          "Choisissez vos disciplines",
          "Paramétrez vos alertes",
          "Recevez un résumé clair et concis des meilleures études récentes dans votre domaine, à votre rythme, avec un accès direct à l'article original."
        ]
      },
      "createAccount": "Créez votre compte en quelques secondes ⏩"
    },
    "account": {
      "saveChanges": "Enregistrer les modifications",
      "profilePicture": "Photo",
      "status": "Statut",
      "specialty": "Spécialité"
    },
    "login": {
      "title": "S'inscrire",
      "loginTitle": "Connexion",
      "firstName": "Prénom",
      "lastName": "Nom",
      "emailLabel": "Email",
      "loginButton": "Se connecter",
      "emailPlaceholder": "Email@exemple.com",
      "passwordLabel": "Mot de passe",
      "passwordPlaceholder": "********",
      "disciplines": "Disciplines",
      "notifications": "Fréquence des notifications",
      "dateOfBirth": "Date de naissance",
      "status": "Statut",
      "statusOptions": [
        "Pr",
        "Dr",
        "Interne",
        "Étudiant",
        "Médecine",
        "Professeur de médecine",
        "Docteur en médecine", 
        "Interne en médecine",
        "Etudiant en médecine",
        "Diététicien(ne)-nutritionniste",
        "Infirmier(ère)",
        "Kinésithérapeute",
        "Pharmaciens",
        "Professions dentaires", 
        "Psychologue",
        "Sage-femme",
        "Autres"
      ],
      "specialty": "Spécialité",
      "specialtyPlaceholder": "Ex: Médecine générale, diabétologie",
      "notificationOptions": [
        "Tous les jours",
        "Tous les 2 jours",
        "Tous les 3 jours",
        "1 fois par semaine",
        "Tous les 15 jours",
        "1 fois par mois"
      ],
      "notificationsPlaceholder": "Choisissez une fréquence",
      "submitSignup": "S'inscrire",
      "submitLogin": "Se connecter",
      "loggingIn": "Connexion en cours...",
      "forgotPassword": "Mot de passe oublié",
      "successSignup": "Inscription réussie ! Un email de confirmation vous a été envoyé pour valider votre compte. Vérifiez vos spams si vous ne le voyez pas. 🎉",
      "successLogin": "Connexion réussie ! Redirection...",
      "footer": "Recevez l'essentiel adapté à vos besoins 📩",
      "alreadyHaveAccount": "Déjà un compte ? Se connecter",
      "needAccount": "Pas encore de compte ? S'inscrire"
    },
    "header": {
      "myArticles": "Tous les articles",
      "articles": "Tous les articles",
      "myVeille": "Ma veille",
      "account": "Compte",
      "login": "Se connecter",
      "signup": "S'inscrire",
      "settings": "Paramètres",
      "logout": "Déconnexion",
      "searchPlaceholder": "Rechercher un article",
      "donate": "Soutenez nous"
    },
    "articles": {
      "title": "L'actualité 📖",
      "feedbackPrompt": "Qu'avez-vous pensé de cet article ?",
      "pubmedLink": "Lien PubMed",
      "myArticles": "Ma veille",
      "articles": "L'actualité",
      "account": "Compte",
      "donate": "Faire un don",
      "login": "Se connecter",
      "signup": "S'inscrire"
    },
    "myArticles": {
      "title": "Mes favoris 📚"
    },
    "footer": {
      "slogan": "Veille médicale : L'essentiel de la science pour les professionnels de santé 🩺",
      "myArticles": "Ma veille",
      "articles": "L'actualité",
      "account": "Compte",
      "login": "Se connecter",
      "signup": "S'inscrire"
    },
    "us": {
      "title": "🏥 Qui sommes-nous ?",
      "baptiste": {
        "name": "🩺 Baptiste Mazas – Médecin & Co-Fondateur",
        "photo": "https://media.licdn.com/dms/image/v2/D4E03AQFHqu-gquZhQg/profile-displayphoto-shrink_400_400/profile-displayphoto-shrink_400_400/0/1728660013124?e=2147483647&v=beta&t=_OaYKhbvEALv-PN2iHDsOimTPlgZ4KIIC1RcqsqsAps",
        "description": "Je suis médecin spécialisé en diabétologie, nutrition, prévention cardiovasculaire et médecine du sport à Paris (AP-HP). Avec Veille, je veux lutter contre la désinformation et rendre l'information médicale et scientifique accessible à tous. Cet outil est conçu pour répondre à nos problématiques, alors partagez-nous vos retours et suggestions, on est à l'écoute ! À très vite ! Baptiste 💡😊"
      },
      "jeanemmanuel": {
        "name": "👨‍💻 Jean-Emmanuel Perramant – Développeur Full Stack & Co-Fondateur",
        "photo": "https://media.licdn.com/dms/image/v2/D4E03AQEskdlqvwB6gw/profile-displayphoto-shrink_800_800/B4EZXyGn8pHgAc-/0/1743523578891?e=1749686400&v=beta&t=f31Qvtw-X2cBAMUJCihUNJiBvXSZho4PsXhUO5JJxAA",
        "description": "Formé à l'école 42, je suis passionné par le développement web et logiciel. J'adore donner vie à des idées en créant des outils utiles et innovants, tout en explorant de nouvelles technologies. J'espère que Veille vous sera vraiment utile ! N'hésitez pas à nous écrire, on fera de notre mieux pour l'adapter à vos besoins💡😊"
      },
      "alexis": {
        "name": "👨‍💻 Alexis Chatelain - Développeur Fullstack",
        "photo": "https://media.discordapp.net/attachments/499955908810375188/1287735266983022602/1678476774135.png?ex=67fb9dec&is=67fa4c6c&hm=59eb6a593d455e21ce41fd9bdebee8b249c10a7e4d86c51780c762a7180ff6bc&=&format=webp&quality=lossless&width=1600&height=1600",
        "description": "Formé à l'école 42, spécialisé dans le domaine de l'IA et passionné par le développement de logiciels et le machine learning, j'adore mettre le code au service de projet vraiment utile et créer des solutions innovantes. J'espère apporter au travers de Veille, mon expertise au service du domaine médical 💡😊"
      },
      "suggestion": "🎯 Veille évolue avec vous ! Partagez-nous vos suggestions pour en faire l'outil parfait pour votre quotidien : <a href=\"mailto:contact@veillemedicale.fr\">contact@veillemedicale.fr</a> 🚀"
    },
    "donations": {
        "pageTitle": "Soutenir Veille Médicale",
        "metaDescription": "Faites un don pour soutenir le développement et la maintenance de Veille Médicale. Aidez-nous à fournir une veille scientifique de qualité aux professionnels de santé.",
        "introText": "Votre soutien nous aide à maintenir et améliorer cet outil essentiel pour la communauté médicale. Chaque contribution compte !",
        "chooseAmount": "Choisissez un montant (EUR)",
        "customAmountLabel": "Montant personnalisé",
        "customAmountPlaceholder": "Autre montant",
        "paymentDetails": "Informations de paiement",
        "validateButton": "OK",
        "confirmCustomAmount": "Valider le montant personnalisé",
        "donateButton": "Faire un don de",
        "donateButtonFallback": "Faire un don",
        "processing": "Traitement en cours",
        "loadingStripe": "Chargement du module de paiement",
        "loadingPayment": "Initialisation du paiement",
        "redirecting": "Paiement réussi. Redirection...",
        "securityNote": "Les paiements sont sécurisés par Stripe.",
        "errors": {
            "stripeKeyMissing": "Erreur de configuration : Clé Stripe manquante.",
            "stripeLoadFailed": "Impossible de charger le module de paiement Stripe.",
            "clientSecretMissing": "Erreur interne : Impossible de récupérer les informations de paiement.",
            "confirmCustomAmount": "Veuillez valider le montant personnalisé.",
            "intentCreationFailed": "Erreur lors de l'initialisation du paiement.",
            "invalidAmount": "Veuillez entrer un montant valide (min 0.50 €).",
            "selectAmount": "Veuillez sélectionner ou entrer un montant valide (min 0.50 €).",
            "stripeNotReady": "Le système de paiement n'est pas prêt.",
            "paymentElementNotReady": "Le formulaire de paiement n'est pas prêt.",
            "paymentFailed": "Échec du paiement. Veuillez vérifier vos informations ou réessayer."
        },
        "status": {
            "title": "Statut du Don",
            "loadingTitle": "Vérification du paiement...",
            "loadingText": "Veuillez patienter pendant que nous vérifions le statut de votre don.",
            "successTitle": "Merci pour votre soutien !",
            "successText": "Votre don a été traité avec succès. Nous apprécions énormément votre contribution à Veille Médicale.",
            "processingTitle": "Paiement en cours de traitement",
            "processingText": "Votre paiement est en cours de traitement. Nous vous informerons une fois terminé. Vous pouvez fermer cette page.",
            "errorTitle": "Erreur de Paiement",
            "errorGeneric": "Une erreur est survenue lors du traitement de votre paiement. Aucuns frais n'ont été appliqués.",
            "errorMissingParams": "Paramètres de paiement manquants ou invalides.",
            "backHomeButton": "Retour à l'accueil",
            "retryButton": "Réessayer le don"
        }
    }
  }
}
--- End of File ---

--- File Path ---
frontend/src/app.html

<!doctype html>
<html lang="en">
	<head>
		<meta charset="utf-8" />
		<link rel="icon" href="%sveltekit.assets%/favicon.png" />
		<meta name="viewport" content="width=device-width, initial-scale=1" />
		%sveltekit.head%
	</head>
	<body data-sveltekit-preload-data="hover">
		<div style="display: contents">%sveltekit.body%</div>
	</body>
</html>

--- End of File ---

--- File Path ---
frontend/src/routes/donation-status/+page.svelte

--- File Path ---
frontend/src/routes/donation-status/+page.svelte

<script lang="ts">
    import { page } from '$app/stores';
    import { onMount } from 'svelte';
    import { CheckCircle, XCircle, Loader } from 'lucide-svelte'; // Using lucide icons
    import { i18n } from '$lib/i18n';

    let status: 'loading' | 'success' | 'error' | 'processing' = $state('loading');
    let errorMessage = $state('');
    let paymentIntentId = $state<string | null>(null);
    let donationAmount = $state<number | null>(null);

    onMount(async () => {
        const clientSecret = $page.url.searchParams.get('payment_intent_client_secret');
        paymentIntentId = $page.url.searchParams.get('payment_intent');
        const redirectStatus = $page.url.searchParams.get('redirect_status');

        if (!clientSecret || !paymentIntentId) {
            errorMessage = $i18n.donations.status.errorMissingParams;
            status = 'error';
            return;
        }

        // No need to fetch Stripe client-side here if just checking status
        // Can add if needed for more details later

        if (redirectStatus === 'succeeded') {
            status = 'success';
            // Optionally fetch amount from backend if needed, but for now just show success
            // Try to get amount from local storage or pass via state if possible
        } else if (redirectStatus === 'processing') {
            status = 'processing';
        } else {
            status = 'error';
            // Try to get a more specific error message if provided by Stripe
            errorMessage = $page.url.searchParams.get('error_message') || $i18n.donations.status.errorGeneric;
        }
    });
</script>

<svelte:head>
    <title>{$i18n.donations.status.title} - Veille Médicale</title>
</svelte:head>

<main class="flex min-h-screen flex-col items-center justify-center bg-black px-4 py-12 text-white">
    <div class="w-full max-w-md rounded-lg bg-gray-800 p-8 text-center shadow-lg">
        {#if status === 'loading'}
            <Loader class="mx-auto mb-4 h-16 w-16 animate-spin text-orange-500" />
            <h1 class="mb-2 text-2xl font-semibold">{$i18n.donations.status.loadingTitle}</h1>
            <p class="text-gray-400">{$i18n.donations.status.loadingText}</p>
        {:else if status === 'success'}
            <CheckCircle class="mx-auto mb-4 h-16 w-16 text-green-500" />
            <h1 class="mb-2 text-2xl font-semibold">{$i18n.donations.status.successTitle}</h1>
            <p class="text-gray-300">
                {$i18n.donations.status.successText}
                {#if paymentIntentId}
                    <span class="mt-2 block text-xs text-gray-500">ID: {paymentIntentId}</span>
                {/if}
            </p>
            <a href="/" class="mt-6 inline-block rounded-lg bg-orange-600 px-6 py-2 font-medium text-white transition hover:bg-orange-700">
                {$i18n.donations.status.backHomeButton}
            </a>
        {:else if status === 'processing'}
             <Loader class="mx-auto mb-4 h-16 w-16 animate-spin text-orange-500" />
             <h1 class="mb-2 text-2xl font-semibold">{$i18n.donations.status.processingTitle}</h1>
             <p class="text-gray-300">{$i18n.donations.status.processingText}</p>
             {#if paymentIntentId}
                <span class="mt-2 block text-xs text-gray-500">ID: {paymentIntentId}</span>
             {/if}
             <a href="/" class="mt-6 inline-block rounded-lg bg-gray-600 px-6 py-2 font-medium text-white transition hover:bg-gray-700">
                {$i18n.donations.status.backHomeButton}
            </a>
        {:else if status === 'error'}
            <XCircle class="mx-auto mb-4 h-16 w-16 text-red-500" />
            <h1 class="mb-2 text-2xl font-semibold">{$i18n.donations.status.errorTitle}</h1>
            <p class="text-gray-300">
                {errorMessage || $i18n.donations.status.errorGeneric}
            </p>
             {#if paymentIntentId}
                <span class="mt-2 block text-xs text-gray-500">ID: {paymentIntentId}</span>
             {/if}
            <a href="/donations" class="mt-6 inline-block rounded-lg bg-orange-600 px-6 py-2 font-medium text-white transition hover:bg-orange-700">
                {$i18n.donations.status.retryButton}
            </a>
        {/if}
    </div>
</main>
--- End of File ---

--- File Path ---
frontend/src/routes/signup/+page.svelte

<!-- +page.svelte -->
<script>
    import MessageDisplay from '$lib/components/auth/MessageDisplay.svelte';
    import SignUpForm from '$lib/components/auth/SignUpForm.svelte';
    import { i18n } from '$lib/i18n';

    // Variables pour les étapes
    let email = '';
    let password = '';
    let disciplines = [];
    let notificationFreq = 'tous_les_jours';
    let errorMessage = '';
    let successMessage = '';
    let isLoading = false;
</script>

<main class="flex min-h-screen items-center justify-center bg-black px-4 py-12">
    <div
        class="hover:shadow-3xl flex w-full max-w-md shadow-2xl transition-all duration-300 sm:max-w-[60vw]"
    >
        <div class="w-full rounded-lg bg-white p-8">
            <h1 class="mb-6 text-left text-3xl font-bold tracking-tight capitalize">
                {$i18n.login.title}
            </h1>

            <MessageDisplay bind:errorMessage bind:successMessage />
            {#if isLoading}
                <div class="mb-4 flex items-center justify-center space-x-2 rounded-lg bg-blue-50 p-4">
                    <div class="h-5 w-5 animate-spin rounded-full border-4 border-t-blue-500"></div>
                    <p class="font-medium text-blue-600">Inscription en cours...</p>
                </div>
            {/if}
            <SignUpForm
                bind:email
                bind:password
                bind:disciplines
                bind:notificationFreq
                bind:errorMessage
                bind:successMessage
                bind:isLoading
            />
            <a href="/login">
                <p class="mt-4 text-center text-sm text-gray-500">
                    {$i18n.login.alreadyHaveAccount}
                </p>
            </a>
        </div>
    </div>
</main>
--- End of File ---

--- File Path ---
frontend/src/routes/signup/+page.server.ts

import { PUBLIC_SUPABASE_ANON_KEY } from '$env/static/public';
import type { Actions } from '@sveltejs/kit';
import { fail, redirect } from '@sveltejs/kit';

export const actions: Actions = {
    default: async ({ request, locals: { supabase } }) => {
        console.log('Signup action started');

        const formData = await request.formData();
        const first_name = formData.get('first_name')?.toString();
        const last_name = formData.get('last_name')?.toString() || '';
        const email = formData.get('email')?.toString();
        const password = formData.get('password')?.toString();
        const disciplines = formData.getAll('disciplines[]') as string[];
        const notification_frequency = formData
            .get('notification_frequency')
            ?.toString()
            ?.toLowerCase();
        const date_of_birth = formData.get('date_of_birth')?.toString() || null;

        // Validation
        if (!first_name || !email || !password || !notification_frequency) {
            console.log('Validation failed: Missing required fields');
            return fail(400, { error: 'Tous les champs obligatoires doivent être remplis.' });
        }

        if (!disciplines || disciplines.length === 0) {
            console.log('Validation failed: No disciplines selected');
            return fail(400, { error: 'Veuillez sélectionner au moins une discipline.' });
        }

        console.log('Attempting Supabase signUp');
        const { data: signUpData, error: signUpError } = await supabase.auth.signUp({
            email,
            password,
        });

        if (signUpError) {
            console.error('SignUp error:', JSON.stringify(signUpError, null, 2));
            return fail(400, { error: signUpError.message });
        }

        if (!signUpData.user) {
            console.error('No user returned by signUp');
            return fail(500, { error: 'Erreur lors de la création de l’utilisateur' });
        }

        const { session } = signUpData;
        if (!session) {
            console.log('User signed up, awaiting email confirmation');
            return fail(400, {
                error: 'Inscription réussie. Veuillez vérifier votre email pour confirmer votre compte.',
            });
        }

        console.log('Creating user profile');
        const newUserProfile = {
            id: signUpData.user.id,
            first_name,
            last_name,
            email,
            disciplines,
            notification_frequency,
            date_of_birth,
        };

        const { data: profileData, error: profileError } = await supabase
            .from('user_profiles')
            .insert(newUserProfile)
            .select('*')
            .single();

        if (profileError) {
            console.error('Profile insertion error:', JSON.stringify(profileError, null, 2));
            if (profileError.code === '23505') {
                return fail(400, { error: 'Cet utilisateur existe déjà.' });
            } else if (profileError.code === '23502') {
                return fail(500, { error: 'Un champ requis est manquant ou invalide.' });
            } else {
                return fail(500, { error: profileError.message });
            }
        }

        // 1. Trigger send-welcome-email Edge Function
        try {
            console.log('Triggering send-welcome-email Edge Function');
            const welcomeEdgeUrl =
                'https://etxelhjnqbrgwuitltyk.supabase.co/functions/v1/send-welcome-email';
            const welcomeResponse = await fetch(welcomeEdgeUrl, {
                method: 'POST',
                headers: {
                    Authorization: `Bearer ${PUBLIC_SUPABASE_ANON_KEY}`,
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    user_id: signUpData.user.id,
                    email,
                    first_name, // Required by the Edge Function, even if not used in the template
                }),
            });

            if (!welcomeResponse.ok) {
                const errorText = await welcomeResponse.text();
                console.error('Error triggering send-welcome-email:', errorText);
            } else {
                console.log('send-welcome-email triggered successfully');
            }
        } catch (e) {
            console.error('Exception in send-welcome-email:', e);
        }

        // 2. Fetch one article per discipline for the user using database function
        let selectedArticles: { id: number; title: string; journal: string; discipline: string }[] = [];
        try {
            // change this logic
            console.log('Fetching articles using database function for disciplines:', disciplines);
            const { data, error } = await supabase.rpc('fetch_articles_by_disciplines', {
                p_user_id: signUpData.user.id,
                p_disciplines: disciplines,
            });

            if (error) {
                console.error('Error calling fetch_articles_by_disciplines:', JSON.stringify(error, null, 2));
            } else if (data) {
                // Parse the JSON array returned by the function
                const articlesArray = Array.isArray(data) ? data : (data as any).fetch_articles_by_disciplines || [];
                selectedArticles = articlesArray.map((article: any) => ({
                    id: article.id,
                    title: article.title,
                    journal: article.journal,
                    discipline: article.discipline,
                }));
                selectedArticles.forEach((article, index) => {
                    console.log(`Selected article ${index + 1} for discipline ${article.discipline}:`, article);
                });
            } else {
                console.log('No articles returned by fetch_articles_by_disciplines');
            }
        } catch (e) {
            console.error('Exception in fetching articles:', e);
        }

        // 3. Trigger send-notification Edge Function and insert into user_sent_articles
        if (selectedArticles.length > 0) {
            // Insert into user_sent_articles for each selected article
            for (const article of selectedArticles) {
                const { error: sentArticleError } = await supabase
                    .from('user_sent_articles')
                    .insert({
                        user_id: signUpData.user.id,
                        article_id: article.id,
                        sent_at: new Date().toISOString(),
                        discipline: article.discipline, // Include discipline as per schema
                    });

                if (sentArticleError) {
                    console.error(
                        `Error inserting article ${article.id} into user_sent_articles:`,
                        sentArticleError
                    );
                } else {
                    console.log(
                        `Inserted article ${article.id} into user_sent_articles for discipline ${article.discipline}`
                    );
                }
            }

            // Trigger send-notification Edge Function
            try {
                console.log('Triggering send-notification Edge Function with articles:', selectedArticles);
                const notificationEdgeUrl =
                    'https://etxelhjnqbrgwuitltyk.supabase.co/functions/v1/send-notification';
                const notificationResponse = await fetch(notificationEdgeUrl, {
                    method: 'POST',
                    headers: {
                        Authorization: `Bearer ${PUBLIC_SUPABASE_ANON_KEY}`,
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        user_id: signUpData.user.id,
                        email,
                        first_name, // Required by the Edge Function, even if not used in the template
                        articles: selectedArticles,
                    }),
                });

                if (!notificationResponse.ok) {
                    const errorText = await notificationResponse.text();
                    console.error('Error triggering send-notification:', errorText);
                } else {
                    console.log('send-notification triggered successfully with articles:', selectedArticles);
                }
            } catch (e) {
                console.error('Exception in send-notification:', e);
            }
        } else {
            console.log('No articles selected, skipping send-notification');
        }

        console.log('User signed up successfully:', JSON.stringify(profileData, null, 2));
        console.log('Throwing redirect to /ma-veille');
        throw redirect(302, '/ma-veille');
    },
};
--- End of File ---

--- File Path ---
frontend/src/routes/+layout.server.ts

// +layout.server.ts
import type { LayoutServerLoad } from './$types';

export const load: LayoutServerLoad = async ({ locals: { safeGetSession }, cookies }) => {
  const { session, user } = await safeGetSession();
  // console.log('Layout server session:', session);
  // console.log('Layout server user:', user);

  return {
    session,
    user,
    cookies: cookies.getAll(),
  };
};
--- End of File ---

--- File Path ---
frontend/src/routes/articles/+page.svelte

<script lang="ts">
	import ArticleListView from '$lib/components/articles/ArticleListView.svelte';

	// Get data loaded by +page.server.ts (list of all disciplines)
	const { data } = $props();

	// Prepare filters from all available disciplines
    const allDisciplines = $derived(data.disciplines || []);
	const filterOptions = $derived(
		[...allDisciplines]
			.sort((a, b) => a.name.localeCompare(b.name, 'fr', { sensitivity: 'base' }))
			.map((discipline: { name: string }) => ({
				value: discipline.name,
				label: discipline.name
			}))
	);

	// Determine initial filter (first discipline in the sorted list)
	const initialFilter = $derived(filterOptions[0]?.value ?? null);

    // Define template strings with proper typing
    const articleOfTheDayTitleTemplate = '🔥 Article du jour pour {filter} :';
    const previousArticlesTitleTemplate = '📖 Articles pour {filter} :';
</script>

<!-- Use the shared component, passing specific props for 'Tous les articles' -->
<ArticleListView
	pageTitle="Tous les articles"
	filters={filterOptions}
	initialFilterValue={initialFilter}
	filterSelectLabel="Spécialités"
	subDisciplineFetchMode="public"
	showSignupPromptProp={false}
	enableSearch={true}
    {articleOfTheDayTitleTemplate}
    {previousArticlesTitleTemplate}
/>
--- End of File ---

--- File Path ---
frontend/src/routes/articles/[id]/+page.server.js

export async function load({ params, locals }) {
	const { id } = params;
	const { session, user } = await locals.safeGetSession();
  
	const { data: articleData, error: articleError } = await locals.supabase
	  .from('articles')
	  .select(
		`
		  id,
		  title,
		  content,
		  published_at,
		  link,
		  grade,
		  journal,
		  article_disciplines (
			discipline_id,
			disciplines (name)
		  )
		`
	  )
	  .eq('id', id)
	  .single();
  
	if (articleError || !articleData) {
	  console.error('Error fetching article:', articleError);
	  return {
		article: null,
		comments: [],
		likesCount: 0,
		dislikesCount: 0,
		userHasLiked: false,
		userHasDisliked: false,
		isSaved: false,
		error: articleError?.message || 'Article non trouvé'
	  };
	}
  
	// Récupérer les commentaires associés à l'article avec les détails de l'utilisateur
	const { data: commentsData, error: commentsError } = await locals.supabase
	  .from('comments')
	  .select(
		`
		  id,
		  content,
		  created_at,
		  user_id,
		  user_profiles (id, first_name, last_name, status, specialty)
		`
	  )
	  .eq('article_id', id)
	  .order('created_at', { ascending: false });
  
	if (commentsError) {
	  console.error('Error fetching comments:', commentsError);
	  return {
		article: null,
		comments: [],
		likesCount: 0,
		dislikesCount: 0,
		userHasLiked: false,
		userHasDisliked: false,
		isSaved: false,
		error: commentsError.message
	  };
	}
  
	// Compter le nombre de likes pour l'article
	const { count: likesCount, error: likesCountError } = await locals.supabase
	  .from('article_likes')
	  .select('id', { count: 'exact' })
	  .eq('article_id', id);
  
	if (likesCountError) {
	  console.error('Error counting likes:', likesCountError);
	  return {
		article: null,
		comments: [],
		likesCount: 0,
		dislikesCount: 0,
		userHasLiked: false,
		userHasDisliked: false,
		isSaved: false,
		error: likesCountError.message
	  };
	}
  
	// Compter le nombre de dislikes pour l'article
	const { count: dislikesCount, error: dislikesCountError } = await locals.supabase
	  .from('article_dislikes')
	  .select('id', { count: 'exact' })
	  .eq('article_id', id);
  
	if (dislikesCountError) {
	  console.error('Error counting dislikes:', dislikesCountError);
	  return {
		article: null,
		comments: [],
		likesCount: 0,
		dislikesCount: 0,
		userHasLiked: false,
		userHasDisliked: false,
		isSaved: false,
		error: dislikesCountError.message
	  };
	}
  
	// Vérifier si l'utilisateur actuel a liké l'article
	let userHasLiked = false;
	if (user) {
	  const { data: likeData, error: likeError } = await locals.supabase
		.from('article_likes')
		.select('id')
		.eq('article_id', id)
		.eq('user_id', user.id)
		.single();
  
	  if (likeError && likeError.code !== 'PGRST116') {
		console.error('Error checking like:', likeError);
		return {
		  article: null,
		  comments: [],
		  likesCount: 0,
		  dislikesCount: 0,
		  userHasLiked: false,
		  userHasDisliked: false,
		  isSaved: false,
		  error: likeError.message
		};
	  }
	  userHasLiked = !!likeData;
	}
  
	// Vérifier si l'utilisateur actuel a disliké l'article
	let userHasDisliked = false;
	if (user) {
	  const { data: dislikeData, error: dislikeError } = await locals.supabase
		.from('article_dislikes')
		.select('id')
		.eq('article_id', id)
		.eq('user_id', user.id)
		.single();
  
	  if (dislikeError && dislikeError.code !== 'PGRST116') {
		console.error('Error checking dislike:', dislikeError);
		return {
		  article: null,
		  comments: [],
		  likesCount: 0,
		  dislikesCount: 0,
		  userHasLiked: false,
		  userHasDisliked: false,
		  isSaved: false,
		  error: dislikeError.message
		};
	  }
	  userHasDisliked = !!dislikeData;
	}
  
	// Vérifier si l'article est enregistré par l'utilisateur via saved_articles
	let isSaved = false;
	if (user) {
	  const { data: savedData, error: savedError } = await locals.supabase
		.from('saved_articles')
		.select('id')
		.eq('article_id', id)
		.eq('user_id', user.id)
		.single();
  
	  if (savedError && savedError.code !== 'PGRST116') {
		console.error('Error checking saved article:', savedError);
		return {
		  article: null,
		  comments: [],
		  likesCount: 0,
		  dislikesCount: 0,
		  userHasLiked: false,
		  userHasDisliked: false,
		  isSaved: false,
		  error: savedError.message
		};
	  }
	  isSaved = !!savedData;
	}
  
	// Formater les données pour inclure les disciplines et les commentaires
	const formattedArticle = {
	  ...articleData,
	  disciplines: articleData.article_disciplines.map((ad) => ad.disciplines.name),
	  journal: articleData.journal
	};
  
	const formattedComments = commentsData.map((comment) => ({
	  id: comment.id,
	  content: comment.content,
	  created_at: comment.created_at,
	  user_id: comment.user_id,
	  user: {
		id: comment.user_profiles.id,
		first_name: comment.user_profiles.first_name || 'Utilisateur',
		last_name: comment.user_profiles.last_name || 'Inconnu',
		status: comment.user_profiles.status,
		specialty: comment.user_profiles.specialty
	  }
	}));
  
	return {
	  article: formattedArticle,
	  comments: formattedComments,
	  likesCount,
	  dislikesCount,
	  userHasLiked,
	  userHasDisliked,
	  isSaved
	};
  }
--- End of File ---

--- File Path ---
frontend/src/routes/articles/[id]/+page.svelte

<!-- article/[id]/+page.svelte -->
<script lang="ts">
	import { i18n } from '$lib/i18n';
	import { goto } from '$app/navigation';
	import userProfileStore from '$lib/stores/user';
	import { onMount } from 'svelte';
	import { supabase } from '$lib/supabase';

	export let data;

	// Définir les variables d'état
	let newComment = '';
	let comments = data.comments || [];
	let likesCount = data.likesCount || 0;
	let dislikesCount = data.dislikesCount || 0;
	let userHasLiked = data.userHasLiked || false;
	let userHasDisliked = data.userHasDisliked || false;
	let isSaved = data.isSaved || false;
	let isLoadingLike = false;
	let isLoadingDislike = false;
	let isLoadingSave = false;
	let isLoadingComment = false;
	// Utiliser un objet pour gérer l'état de chargement de suppression par commentaire
	let isLoadingDelete = {};

	// Liste des disciplines (doit correspondre à celles utilisées dans la DB)
	const disciplineOptions = [
		'Médecine Générale',
		'Urgences',
		'Médecine du Travail',
		'Santé Publique',
		'Médecine Interne',
		'Endocrinologie-Diabétologie-Nutrition',
		'Cardiologie',
		'Dermatologie',
		'Hépato-Gastroentérologie',
		'Génétique',
		'Gériatrie',
		'Hématologie',
		'Maladies infectieuses',
		'Néphrologie',
		'Neurologie',
		'Oncologie',
		'Médecine physique et réadaptation',
		'Pneumologie',
		'Gynécologie-obstétrique',
		'Pédiatrie',
		'Psychiatrie',
		'Anesthésie - Réanimation',
		'Rhumatologie',
		'Chirurgie cardiaque',
		'Chirurgie digestive',
		'Chirurgie ORL',
		'Neurochirurgie',
		'Ophtalmologie',
		'Chirurgie orthopédique',
		'Chirurgie thoracique',
		'Urologie',
		'Chirurgie vasculaire',
		'Médecine de la douleur'
	];

	// Fonction pour formater les titres : première lettre en majuscule, le reste en minuscule
	function formatTitle(title: string) {
		if (!title) return '';
		const words = title.toLowerCase().split(' ');
		if (words.length === 0) return '';
		words[0] = words[0].charAt(0).toUpperCase() + words[0].slice(1);
		return words.join(' ');
	}

	// Fonction pour parser le contenu Markdown ou structuré
	function parseContent(content) {
		if (!content) return [];

		const sections = [];
		let currentSection = { title: '', content: [] };
		const lines = content.split('\n');

		for (const line of lines) {
			if (line.startsWith('##')) {
				if (currentSection.title || currentSection.content.length > 0) {
					sections.push(currentSection);
				}
				currentSection = { title: line.replace(/^##\s+/, '').trim(), content: [] };
			} else if (line.trim()) {
				currentSection.content.push(line.trim());
			}
		}

		if (currentSection.title || currentSection.content.length > 0) {
			sections.push(currentSection);
		}

		return sections;
	}

	$: parsedContent = parseContent(data.article?.content);

	function goBack() {
		goto('/ma-veille');
	}

	async function handleToggleLike() {
		if (!$userProfileStore) {
			alert('Veuillez vous connecter pour liker cet article.');
			return;
		}

		if (isLoadingLike) return;
		isLoadingLike = true;

		try {
			if (userHasDisliked) {
				const { error: deleteError } = await supabase
					.from('article_dislikes')
					.delete()
					.eq('article_id', data.article.id)
					.eq('user_id', $userProfileStore.id);

				if (deleteError) throw deleteError;

				dislikesCount -= 1;
				userHasDisliked = false;
			}

			if (userHasLiked) {
				const { error: deleteError } = await supabase
					.from('article_likes')
					.delete()
					.eq('article_id', data.article.id)
					.eq('user_id', $userProfileStore.id);

				if (deleteError) throw deleteError;

				likesCount -= 1;
				userHasLiked = false;
			} else {
				const { error: insertError } = await supabase.from('article_likes').insert({
					article_id: data.article.id,
					user_id: $userProfileStore.id
				});

				if (insertError) throw insertError;

				likesCount += 1;
				userHasLiked = true;
			}
		} catch (error) {
			console.error('Error toggling like:', error);
			alert('Erreur lors de la mise à jour du like.');
		} finally {
			isLoadingLike = false;
		}
	}

	async function handleToggleDislike() {
		if (!$userProfileStore) {
			alert('Veuillez vous connecter pour disliker cet article.');
			return;
		}

		if (isLoadingDislike) return;
		isLoadingDislike = true;

		try {
			if (userHasLiked) {
				const { error: deleteError } = await supabase
					.from('article_likes')
					.delete()
					.eq('article_id', data.article.id)
					.eq('user_id', $userProfileStore.id);

				if (deleteError) throw deleteError;

				likesCount -= 1;
				userHasLiked = false;
			}

			if (userHasDisliked) {
				const { error: deleteError } = await supabase
					.from('article_dislikes')
					.delete()
					.eq('article_id', data.article.id)
					.eq('user_id', $userProfileStore.id);

				if (deleteError) throw deleteError;

				dislikesCount -= 1;
				userHasDisliked = false;
			} else {
				const { error: insertError } = await supabase.from('article_dislikes').insert({
					article_id: data.article.id,
					user_id: $userProfileStore.id
				});

				if (insertError) throw insertError;

				dislikesCount += 1;
				userHasDisliked = true;
			}
		} catch (error) {
			console.error('Error toggling dislike:', error);
			alert('Erreur lors de la mise à jour du dislike.');
		} finally {
			isLoadingDislike = false;
		}
	}

	async function handleToggleSave() {
		if (!$userProfileStore) {
			alert('Veuillez vous connecter pour enregistrer cet article.');
			return;
		}

		if (isLoadingSave) return;
		isLoadingSave = true;

		try {
			if (isSaved) {
				const { error } = await supabase
					.from('saved_articles')
					.delete()
					.eq('article_id', data.article.id)
					.eq('user_id', $userProfileStore.id);

				if (error) throw error;

				isSaved = false;
			} else {
				const { error } = await supabase.from('saved_articles').insert({
					article_id: data.article.id,
					user_id: $userProfileStore.id
				});

				if (error) throw error;

				isSaved = true;
			}
		} catch (error) {
			console.error('Error toggling save:', error);
			alert('Erreur lors de la mise à jour de l’enregistrement.');
		} finally {
			isLoadingSave = false;
		}
	}

	// Fonction corrigée pour ajouter un commentaire
	async function handleCommentSubmit() {
		if (!$userProfileStore) {
			alert('Veuillez vous connecter pour laisser un commentaire.');
			return;
		}

		if (newComment.trim() === '') {
			alert('Veuillez entrer un commentaire.');
			return;
		}

		if (isLoadingComment) return;
		isLoadingComment = true;

		try {
			const { data: commentData, error } = await supabase
				.from('comments')
				.insert({
					article_id: data.article.id,
					user_id: $userProfileStore.id,
					content: newComment
				})
				.select('id, user_id')
				.single();

			if (error) throw error;

			// Ajouter le commentaire à la liste avec user_id
			comments = [
				{
					id: commentData.id,
					content: newComment,
					created_at: new Date().toISOString(),
					user_id: $userProfileStore.id, // Ajouter user_id ici
					user: {
						first_name: $userProfileStore.first_name || 'Utilisateur',
						last_name: $userProfileStore.last_name || 'Inconnu',
						status: $userProfileStore.status,
						specialty: $userProfileStore.specialty
					}
				},
				...comments
			];
			newComment = '';
		} catch (error) {
			console.error('Error adding comment:', error);
			alert('Erreur lors de l’ajout du commentaire.');
		} finally {
			isLoadingComment = false;
		}
	}

	// Fonction pour supprimer un commentaire
	async function handleDeleteComment(commentId) {
		if (!$userProfileStore) {
			alert('Veuillez vous connecter pour supprimer un commentaire.');
			return;
		}

		if (!confirm('Êtes-vous sûr de vouloir supprimer ce commentaire ?')) {
			return;
		}

		// Vérifier si une suppression est déjà en cours pour ce commentaire
		if (isLoadingDelete[commentId]) return;

		// Mettre à jour l'état de chargement pour ce commentaire
		isLoadingDelete = { ...isLoadingDelete, [commentId]: true };

		try {
			const { error } = await supabase
				.from('comments')
				.delete()
				.eq('id', commentId)
				.eq('user_id', $userProfileStore.id);

			if (error) throw error;

			// Supprimer le commentaire de la liste localement
			comments = comments.filter((comment) => comment.id !== commentId);
		} catch (error) {
			console.error('Error deleting comment:', error);
			alert('Erreur lors de la suppression du commentaire.');
		} finally {
			// Réinitialiser l'état de chargement pour ce commentaire
			isLoadingDelete = { ...isLoadingDelete, [commentId]: false };
		}
	}
</script>

<div class="min-h-screen bg-white px-4 py-12">
	<div class="mx-auto max-w-4xl">
		<!-- Bouton de retour -->
		<button on:click={goBack} class="mb-6 flex items-center text-black hover:text-gray-800">
			<svg
				class="mr-2 h-6 w-6"
				fill="none"
				stroke="currentColor"
				viewBox="0 0 24 24"
				xmlns="http://www.w3.org/2000/svg"
			>
				<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7" />
			</svg>
			Retour
		</button>

		{#if data.error}
			<p class="text-black">Erreur : {data.error}</p>
		{:else if !data.article}
			<p class="text-black">Article non trouvé.</p>
		{:else}
			<!-- Titre, métadonnées et likes/dislikes de l’article -->
			<div class="mb-10 flex flex-col">
				<h1 class="mb-4 text-3xl font-bold text-black">{formatTitle(data.article.title)}</h1>
				<p class="mb-6 text-black">
					Publié le {new Date(data.article.published_at).toLocaleDateString()} par
					{data.article.journal}
					• Grade de recommandation
					<span class="inline-block py-1 text-black">{data.article.grade}</span>
					• {data.article.disciplines.join(' • ')}
				</p>
				<!-- Contenu de l’article -->
				<div class="prose mb-16 max-w-none">
					{#each parsedContent as section}
						{#if section.title}
							<h2 class="mt-6 mb-2 text-xl font-semibold text-black">{section.title}</h2>
						{/if}
						{#each section.content as paragraph}
							<p class="mb-4 text-black">{paragraph}</p>
						{/each}
					{/each}
				</div>

				<!-- Référence avec lien PubMed -->
				<div>
					{#if data.article.link}
						<div class="flex items-center text-sm text-gray-600">
							<svg
								class="mr-1 h-4 w-4"
								fill="none"
								stroke="currentColor"
								viewBox="0 0 24 24"
								xmlns="http://www.w3.org/2000/svg"
							>
								<path
									stroke-linecap="round"
									stroke-linejoin="round"
									stroke-width="2"
									d="M13.828 10.172a4 4 0 00-5.656 0l-4 4a4 4 0 105.656 5.656l1.102-1.101m-.758-4.899a4 4 0 005.656 0l4-4a4 4 0 00-5.656-5.656l-1.1 1.1"
								/>
							</svg>
							<span class="mr-1">Lien :</span>
							<a
								href={data.article.link}
								target="_blank"
								rel="noopener noreferrer"
								class="max-w-xs truncate text-blue-600 hover:underline"
							>
								{data.article.link}
							</a>
						</div>
					{/if}
				</div>
			</div>

			<!-- Séparation claire -->
			<hr class="border-t border-gray-400" />

			<!-- Section des interactions sociales -->
			<div class="mt-20 mb-16">
				<!-- Boutons Like, Dislike, et Enregistrer -->
				<h2 class="mb-4 text-xl font-semibold text-black">{$i18n.articles.feedbackPrompt}</h2>
				<div class="mb-10 flex items-center space-x-4">
					<!-- Bouton pouce vers le haut (Like) -->
					<button
						on:click={handleToggleLike}
						class="relative flex items-center text-black hover:text-gray-800"
					>
						{#if isLoadingLike}
							<svg class="absolute mr-2 h-5 w-5 animate-spin text-black" viewBox="0 0 24 24">
								<circle
									class="opacity-25"
									cx="12"
									cy="12"
									r="10"
									stroke="currentColor"
									stroke-width="4"
								/>
								<path
									class="opacity-75"
									fill="currentColor"
									d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
								/>
							</svg>
						{/if}
						<span class="mr-2 text-2xl {isLoadingLike ? 'opacity-0' : ''}">👍</span>
						<span class={isLoadingLike ? 'opacity-0' : ''}>{likesCount}</span>
					</button>

					<!-- Bouton pouce vers le bas (Dislike) -->
					<button
						on:click={handleToggleDislike}
						class="relative flex items-center text-black hover:text-gray-800"
					>
						{#if isLoadingDislike}
							<svg class="absolute mr-2 h-5 w-5 animate-spin text-black" viewBox="0 0 24 24">
								<circle
									class="opacity-25"
									cx="12"
									cy="12"
									r="10"
									stroke="currentColor"
									stroke-width="4"
								/>
								<path
									class="opacity-75"
									fill="currentColor"
									d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
								/>
							</svg>
						{/if}
						<span class="mr-2 text-2xl {isLoadingDislike ? 'opacity-0' : ''}">👎</span>
						<span class={isLoadingDislike ? 'opacity-0' : ''}>{dislikesCount}</span>
					</button>

					<!-- Bouton cœur (Enregistrer) -->
					<button
						on:click={handleToggleSave}
						class="relative flex items-center text-black hover:text-gray-800"
					>
						{#if isLoadingSave}
							<svg class="absolute mr-2 h-5 w-5 animate-spin text-black" viewBox="0 0 24 24">
								<circle
									class="opacity-25"
									cx="12"
									cy="12"
									r="10"
									stroke="currentColor"
									stroke-width="4"
								/>
								<path
									class="opacity-75"
									fill="currentColor"
									d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
								/>
							</svg>
						{/if}
						<span class="mr-2 text-2xl {isLoadingSave ? 'opacity-0' : ''}"
							>{isSaved ? '❤️' : '🤍'}</span
						>
						<span class={isLoadingSave ? 'opacity-0' : ''}
							>{isSaved ? 'Enregistré' : 'Enregistrer'}</span
						>
					</button>
				</div>

				<!-- Section des commentaires -->
				<div class="mt-12">
					{#if !$userProfileStore}
						<p class="mb-8 text-black">
							Veuillez <a href="/signup" class="text-black hover:underline">vous connecter</a> pour laisser
							un commentaire.
						</p>
					{:else}
						<!-- Formulaire pour ajouter un commentaire -->
						<div class="mb-10">
							<textarea
								name="content"
								bind:value={newComment}
								rows="4"
								class="mb-4 w-full rounded border border-gray-400 bg-white p-3 text-black transition-all duration-200 focus:border-black focus:ring focus:ring-gray-300"
								placeholder="Écrire un commentaire..."
							></textarea>
							<button
								on:click={handleCommentSubmit}
								disabled={isLoadingComment}
								class="relative rounded bg-black px-6 py-2 text-white transition-colors duration-200 hover:bg-gray-800 hover:text-white disabled:cursor-not-allowed disabled:bg-gray-600"
							>
								{#if isLoadingComment}
									<svg
										class="absolute top-1/2 left-4 mr-2 h-5 w-5 -translate-y-1/2 transform animate-spin text-white"
										viewBox="0 0 24 24"
									>
										<circle
											class="opacity-25"
											cx="12"
											cy="12"
											r="10"
											stroke="currentColor"
											stroke-width="4"
										/>
										<path
											class="opacity-75"
											fill="currentColor"
											d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
										/>
									</svg>
									<span class="opacity-0">Publier</span>
								{/if}
								<span class={isLoadingComment ? 'opacity-0' : ''}>Publier</span>
							</button>
						</div>
					{/if}

					<!-- Liste des commentaires -->
					{#if comments.length === 0}
						<p class="text-black">Aucun commentaire pour le moment.</p>
					{:else}
						<ul class="mt-10 space-y-8">
							{#each comments as comment (comment.id)}
								<li
									class="relative overflow-hidden rounded-lg border border-gray-400 bg-white p-6 shadow-sm"
								>
									<p class="mb-3">{comment.content}</p>
									<p class="text-sm text-black">
										Par {comment.user.status ? `${comment.user.status} ` : ''}{comment.user
											.first_name}
										{comment.user.last_name}{comment.user.specialty
											? `, ${comment.user.specialty}`
											: ''} •
										{new Date(comment.created_at).toLocaleDateString()}
									</p>
									{#if $userProfileStore && $userProfileStore.id === comment.user_id}
										<button
											on:click={() => handleDeleteComment(comment.id)}
											class="absolute top-4 right-4 text-black hover:text-gray-800"
											disabled={isLoadingDelete[comment.id]}
										>
											{#if isLoadingDelete[comment.id]}
												<svg class="h-5 w-5 animate-spin text-black" viewBox="0 0 24 24">
													<circle
														class="opacity-25"
														cx="12"
														cy="12"
														r="10"
														stroke="currentColor"
														stroke-width="4"
													/>
													<path
														class="opacity-75"
														fill="currentColor"
														d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
													/>
												</svg>
											{:else}
												<svg
													class="h-5 w-5"
													fill="none"
													stroke="currentColor"
													viewBox="0 0 24 24"
													xmlns="http://www.w3.org/2000/svg"
												>
													<path
														stroke-linecap="round"
														stroke-linejoin="round"
														stroke-width="2"
														d="M6 18L18 6M6 6l12 12"
													/>
												</svg>
											{/if}
										</button>
									{/if}
								</li>
							{/each}
						</ul>
					{/if}
				</div>
			</div>
		{/if}
	</div>
</div>

<style>
	.prose :where(h2):not(:where([class~='not-prose'], [class~='not-prose'] *)) {
		font-size: 1.25rem;
		font-weight: 600;
		margin-top: 1.5rem;
		margin-bottom: 0.5rem;
		color: black;
	}
	.prose :where(p):not(:where([class~='not-prose'], [class~='not-prose'] *)) {
		margin-bottom: 1rem;
		color: black;
	}
</style>

--- End of File ---

--- File Path ---
frontend/src/routes/articles/+page.server.ts

export async function load({ locals }) {
	const { session, user } = await locals.safeGetSession();

	if (!user || !session) {
		console.log('No user or session found, returning empty data');
		return {
			disciplines: [],
			error: 'Utilisateur non connecté.'
		};
	}

	const { data: disciplineData, error: disciplineError } = await locals.supabase
		.from('disciplines')
		.select('name');

	if (disciplineError) {
		console.error('Discipline fetch failed:', disciplineError.message);
		return {
			disciplines: [],
			error: disciplineError.message || 'Profil utilisateur non trouvé.'
		};
	}

	return {
		disciplines: disciplineData,
		error: null
	};
}

--- End of File ---

--- File Path ---
frontend/src/routes/qui-sommes-nous/+page.svelte

<script>
	import { i18n } from '$lib/i18n';

	// Définir les données statiques pour les co-fondateurs
	const founders = [
		{
			name: $i18n.us.baptiste.name,
			photo: $i18n.us.baptiste.photo,
			description: $i18n.us.baptiste.description
		},
		{
			name: $i18n.us.jeanemmanuel.name,
			photo: $i18n.us.jeanemmanuel.photo,
			description: $i18n.us.jeanemmanuel.description
		},
		{
			name: $i18n.us.alexis.name,
			photo: $i18n.us.alexis.photo,
			description: $i18n.us.alexis.description
		}
	];

	// Préparer le contenu de suggestion avec des classes Tailwind
	const suggestionHtml = $i18n.us.suggestion.replace(
		'<a href="mailto:contact@veillemedicale.fr">contact@veillemedicale.fr</a>',
		'<a href="mailto:contact@veillemedicale.fr" class="text-teal-400 font-semibold hover:underline hover:text-teal-300">contact@veillemedicale.fr</a>'
	);
</script>

<svelte:head>
	<title>{$i18n.us.title} - Veille Médicale</title>
	<meta
		name="description"
		content="Découvrez l'équipe derrière Veille Médicale, un outil conçu pour les médecins par Baptiste Mazas et Jean-Emmanuel Perramant."
	/>
	<link rel="preconnect" href="https://fonts.googleapis.com" />
	<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
	<link
		href="https://fonts.googleapis.com/css2?family=Montserrat:ital,wght@0,100..900;1,100..900&display=swap"
		rel="stylesheet"
	/>
</svelte:head>

<div class="min-h-screen bg-black px-4 py-12 text-white">
	<div class="mx-auto max-w-4xl">
		<!-- En-tête -->
		<header class="py-10 text-center">
			<h1 class="mb-4 text-4xl font-bold text-white sm:text-5xl">{$i18n.us.title}</h1>
		</header>

		<!-- Contenu principal -->
		<main class="space-y-12">
			{#each founders as founder}
				<section
					class="flex flex-col items-center rounded-lg bg-gray-800 p-6 shadow-md transition-all duration-300 hover:shadow-lg md:flex-row"
				>
					<img
						src={founder.photo}
						alt="{founder.name} photo"
						class="mb-6 h-40 w-40 rounded-md border-2 border-teal-500 object-cover md:mr-6 md:mb-0"
						loading="lazy"
					/>
					<div class="flex-1 text-center md:text-left">
						<h2 class="mb-2 text-2xl font-semibold text-white sm:text-3xl">{founder.name}</h2>
						<p class="text-base font-normal text-gray-300 sm:text-lg">
							{@html founder.description}
						</p>
					</div>
				</section>
			{/each}

			<section class="rounded-lg bg-gray-800 p-6 text-center shadow-md">
				<p class="text-lg font-medium text-gray-200 sm:text-xl">{@html suggestionHtml}</p>
			</section>
		</main>
	</div>
</div>

<style>
	/* Style général */
	button:focus {
		outline: none;
	}
	.animate-bounce {
		animation: bounce 2s infinite;
	}

	@keyframes bounce {
		0%,
		20%,
		50%,
		80%,
		100% {
			transform: translateY(0);
		}
		40% {
			transform: translateY(-10px);
		}
		60% {
			transform: translateY(-5px);
		}
	}

	/* Animation d'entrée pour le modal (si nécessaire) */
	.modal-enter-active {
		animation: fadeIn 0.3s ease-out;
	}

	@keyframes fadeIn {
		0% {
			opacity: 0;
			transform: scale(0.95);
		}
		100% {
			opacity: 1;
			transform: scale(1);
		}
	}
</style>

--- End of File ---

--- File Path ---
frontend/src/routes/payment-test/+page.svelte

<script>
    import { onMount } from 'svelte';
    import { loadStripe } from '@stripe/stripe-js';
    import { goto } from '$app/navigation';

    let stripe;
    let elements;
    let paymentRequest;
    let paymentRequestButton;
    let ibanElement;
    let clientSecret;
    let paymentError = '';
    let paymentSuccess = '';

    onMount(async () => {
        // Charger Stripe avec la clé publique de test
        stripe = await loadStripe('pk_test_51PKxSICA4R4AS5AvZ1R27K63b98kvj9wr0QE4IhfsXtcEDwI7K0myfhlY8mZAST7kkFOu3wD7eF9k17JU1tDzJQs00vYGXcbqE');

        // Créer un Payment Intent au chargement de la page (par défaut mensuel)
        await createPaymentIntent('monthly');

        // Configurer le PaymentRequestButton pour Apple Pay, Revolut Pay, et Link
        paymentRequest = stripe.paymentRequest({
            country: 'FR', // Remplacez par le pays cible (ex: 'FR' pour France)
            currency: 'eur', // Devise utilisée
            total: {
                label: 'Abonnement Mensuel',
                amount: 99 // 0,99 € en centimes
            },
            requestPayerName: true,
            requestPayerEmail: true,
            requestPayerPhone: true,
            paymentMethodTypes: ['apple_pay', 'revolut_pay', 'link'] // Inclure Apple Pay, Revolut Pay, et Link
        });

        // Vérifier si le PaymentRequestButton est disponible
        const canMakePayment = await paymentRequest.canMakePayment();
        if (canMakePayment) {
            elements = stripe.elements({ clientSecret });
            paymentRequestButton = elements.create('paymentRequestButton', {
                paymentRequest
            });
            paymentRequestButton.mount('#payment-request-button');
        } else {
            paymentError = 'Aucune méthode de paiement express (Apple Pay, Revolut Pay, Link) n’est disponible sur cet appareil.';
        }

        // Configurer SEPA Direct Debit (RIB)
        elements = stripe.elements({ clientSecret });
        ibanElement = elements.create('iban', { supportedCountries: ['SEPA'] });
        ibanElement.mount('#iban-element');

        // Écouter les événements de paiement du PaymentRequestButton
        paymentRequest.on('paymentmethod', async (ev) => {
            const { paymentIntent, error } = await stripe.confirmPayment({
                elements,
                clientSecret,
                confirmParams: {
                    return_url: `${window.location.origin}/thank-you`
                },
                redirect: 'if_required'
            });

            if (error) {
                paymentError = error.message;
                ev.complete('fail');
            } else {
                paymentSuccess = 'Paiement réussi !';
                ev.complete('success');
                await goto('/thank-you');
            }
        });
    });

    // Créer un Payment Intent
    async function createPaymentIntent(plan) {
        paymentError = '';
        paymentSuccess = '';
        const amount = plan === 'yearly' ? 1000 : 99; // 10 € ou 0,99 €
        const response = await fetch('/api/create-payment-intent', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ amount, currency: 'eur', plan })
        });

        const { clientSecret: newClientSecret } = await response.json();
        clientSecret = newClientSecret;

        // Mettre à jour le montant dans le PaymentRequestButton
        if (paymentRequest) {
            paymentRequest.update({
                total: {
                    label: plan === 'yearly' ? 'Abonnement Annuel' : 'Abonnement Mensuel',
                    amount
                }
            });
        }
    }

    // Confirmer le paiement SEPA
    async function confirmSepaPayment() {
        if (!stripe || !clientSecret) return;

        try {
            const result = await stripe.confirmSepaDebitPayment(clientSecret, {
                payment_method: {
                    iban: ibanElement,
                    billing_details: { name: 'Test User' }
                }
            });

            if (result.error) {
                paymentError = result.error.message;
            } else {
                paymentSuccess = 'Paiement SEPA réussi !';
                await goto('/thank-you');
            }
        } catch (error) {
            paymentError = error.message;
        }
    }
</script>

<div class="max-w-md mx-auto p-6 space-y-6">
    <h1 class="text-2xl font-bold">Page de test - Abonnement</h1>

    <!-- Sélection du plan -->
    <div class="space-y-4">
        <button
            on:click={() => createPaymentIntent('monthly')}
            class="w-full bg-blue-500 text-white py-2 rounded hover:bg-blue-600"
        >
            0,99 €/mois (sans engagement)
        </button>
        <button
            on:click={() => createPaymentIntent('yearly')}
            class="w-full bg-green-500 text-white py-2 rounded hover:bg-green-600"
        >
            10 €/an
        </button>
    </div>

    <!-- Options de paiement -->
    <div class="space-y-4">
        <h2 class="text-lg font-semibold">Choisissez une méthode de paiement :</h2>

        <!-- PaymentRequestButton pour Apple Pay, Revolut Pay, et Link -->
        <div id="payment-request-button" class="border p-2 rounded">
            <!-- Le bouton sera affiché ici si une méthode de paiement express est disponible -->
            {#if !paymentRequestButton}
                <p class="text-gray-500">Aucun bouton de paiement express disponible (vérifiez Apple Pay ou Revolut Pay sur cet appareil).</p>
            {/if}
        </div>

        <!-- SEPA Direct Debit (RIB) -->
        <div>
            <label class="block text-sm font-medium text-gray-700">IBAN</label>
            <div id="iban-element" class="border p-2 rounded"></div>
            <button
                on:click={confirmSepaPayment}
                class="mt-2 w-full bg-gray-500 text-white py-2 rounded hover:bg-gray-600"
                disabled={!clientSecret}
            >
                Payer avec SEPA Direct Debit
            </button>
        </div>
    </div>

    <!-- Messages de feedback -->
    {#if paymentError}
        <p class="text-red-500">{paymentError}</p>
    {/if}
    {#if paymentSuccess}
        <p class="text-green-500">{paymentSuccess}</p>
    {/if}
</div>
--- End of File ---

--- File Path ---
frontend/src/routes/favoris/+page.svelte

<!-- src/routes/favoris/+page.svelte -->
<script lang="ts">
    import ArticleListView from '$lib/components/articles/ArticleListView.svelte';
    import userProfileStore from '$lib/stores/user';

    // Get data from +page.server.ts
    const { data } = $props();

    const currentUserId = $derived($userProfileStore?.id ?? null);

    // Define the custom empty state message for this page
    const noLikedArticlesMessage = `Vous n'avez pas encore ajouté d'articles à vos favoris.<br>Cliquez sur ❤️ sur un article pour le retrouver ici !`;

    // Use the filters loaded from the server
    const filtersForView = $derived(data.likedFilters || []);

    // Define the special value for clarity
    const ALL_CATEGORIES_VALUE = "__ALL__";
</script>

{#if currentUserId}
    <ArticleListView
        pageTitle="Mes articles favoris"
        filters={filtersForView}
        initialFilterValue={ALL_CATEGORIES_VALUE}
        filterSelectLabel="Filtrer par discipline"
        showAllCategoriesOption={true}
        apiEndpoint="/api/get-liked-articles"
        userId={currentUserId}
        subDisciplineFetchMode="public"
        enableSearch={true}
        searchPlaceholder="Rechercher dans mes favoris..."
        showAllSubDisciplinesOption={true}
        subDisciplineSelectLabel="Affiner par sous-spécialité"
        allArticlesLoadedText="Tous vos articles favoris sont chargés"
        itemsPerPage={10}
        emptyStateMessage={noLikedArticlesMessage}
    />
{:else}
     <!-- Optional: Show message or loader while user store initializes -->
     <div class="flex justify-center items-center min-h-screen text-white">
         <p>Chargement des favoris...</p>
     </div>
{/if}

<style>
    /* Page-specific styles if needed */
</style>
--- End of File ---

--- File Path ---
frontend/src/routes/favoris/+page.server.ts

// src/routes/favoris/+page.server.ts
import { error, redirect } from '@sveltejs/kit';

export const load = async ({ locals: { supabase, safeGetSession } }) => {
    const { user } = await safeGetSession();

    if (!user) {
        throw redirect(303, '/login?redirect=/favoris');
    }

    // --- Fetch distinct disciplines for liked articles ---
    const { data: disciplineData, error: dbError } = await supabase
        .from('article_likes')
        .select(`
            articles!inner (
                article_disciplines!inner (
                    disciplines!inner ( id, name )
                )
            )
        `)
        .eq('user_id', user.id); // Filter by the current user

    if (dbError) {
        console.error("Error fetching liked disciplines:", dbError);
        throw error(500, "Could not load disciplines for liked articles.");
    }

    // --- Process data to get unique, sorted disciplines ---
    const likedDisciplinesMap = new Map<number, { value: string; label: string }>();
    if (disciplineData) {
        for (const like of disciplineData) {
            // Navigate through the nested structure
            const discipline = like.articles?.article_disciplines[0]?.disciplines;
            if (discipline && !likedDisciplinesMap.has(discipline.id)) {
                likedDisciplinesMap.set(discipline.id, { value: discipline.name, label: discipline.name });
            }
        }
    }

    const likedFilters = Array.from(likedDisciplinesMap.values())
                              .sort((a, b) => a.label.localeCompare(b.label, 'fr', { sensitivity: 'base' }));

    console.log("Liked Filters for User:", likedFilters);

    return {
        // Pass the distinct list of disciplines where the user has liked articles
        likedFilters: likedFilters
    };
};
--- End of File ---

--- File Path ---
frontend/src/routes/test-session/+page.svelte

<!-- /routes/test-session/+page.svelte -->
<script>
  import { supabase } from '$lib/supabase';
  import { onMount } from 'svelte';

  let session = null;
  let user = null;
  let sessionError = null;
  let userError = null;
  let serverCookies = null;
  let manualSession = null;
  export let data;

  console.log('Server-side session from data:', data.session);
  console.log('Server-side user from data:', data.user);

  onMount(async () => {
    // Test cookie transmission via same-origin request
    console.log('Fetching cookies from /api/cookies');
    const cookieResponse = await fetch('/api/cookies');
    serverCookies = await cookieResponse.json();
    console.log('Server cookies received:', serverCookies);

    // Manual fetch to Supabase Auth API
    console.log('Attempting manual fetch to Supabase Auth API');
    try {
      const manualResponse = await fetch(`${PUBLIC_SUPABASE_URL}/auth/v1/session`, {
        method: 'GET',
        headers: {
          'apikey': PUBLIC_SUPABASE_ANON_KEY,
          'Authorization': `Bearer ${serverCookies.accessToken}`,
        },
        credentials: 'include',
      });
      manualSession = await manualResponse.json();
      console.log('Manual fetch session response:', manualSession);
    } catch (err) {
      console.error('Manual fetch error:', err);
    }

    // Client-side session retrieval
    console.log('Attempting client-side session retrieval');
    const { data: sessionData, error: sessError } = await supabase.auth.getSession();
    if (sessError) {
      console.error('Client-side session retrieval error:', sessError);
      sessionError = sessError.message;
    }
    session = sessionData.session;
    console.log('Client-side session:', session);

    // Client-side user retrieval
    console.log('Attempting client-side user retrieval');
    const { data: userData, error: usrError } = await supabase.auth.getUser();
    if (usrError) {
      console.error('Client-side user retrieval error:', usrError);
      userError = usrError.message;
    }
    user = userData.user;
    console.log('Client-side user:', user);
  });
</script>

<h1>Test Session</h1>
<p>Server-side session: {data.session ? 'Present' : 'Missing'}</p>
<p>Server-side user: {data.user ? 'Present' : 'Missing'}</p>
<p>Server cookies: {serverCookies ? JSON.stringify(serverCookies) : 'Loading...'}</p>
<p>Manual fetch session: {manualSession ? JSON.stringify(manualSession) : 'Not fetched'}</p>
<p>Client-side session: {session ? 'Present' : 'Missing'}</p>
<p>Client-side user: {user ? 'Present' : 'Missing'}</p>
{#if sessionError}
  <p>Session Error: {sessionError}</p>
{/if}
{#if userError}
  <p>User Error: {userError}</p>
{/if}
--- End of File ---

--- File Path ---
frontend/src/routes/test-session/+page.server.ts

// /routes/test-session/+page.server.ts
import type { PageServerLoad } from './$types';

export const load: PageServerLoad = async ({ locals }) => {
  console.log('Test-session load started');

  const {
    data: { session },
    error: sessionError,
  } = await locals.supabase.auth.getSession();
  console.log('Server-side getSession result:', { session, sessionError });

  if (sessionError) {
    console.error('Server-side error getting session:', sessionError);
    return { session: null, user: null };
  }

  if (!session) {
    console.log('Server-side: No session found');
    return { session: null, user: null };
  }

  const {
    data: { user },
    error: userError,
  } = await locals.supabase.auth.getUser();
  console.log('Server-side getUser result:', { user, userError });

  if (userError) {
    console.error('Server-side error getting user:', userError);
    return { session: null, user: null };
  }

  return { session, user };
};
--- End of File ---

--- File Path ---
frontend/src/routes/comite/+page.svelte

<!-- frontend/src/routes/comite/+page.svelte -->
<script lang="ts">
	import { AlertTriangle, CheckCircle, Loader2, X } from 'lucide-svelte';

	// Define the referent data directly in the script
	// Ensure the initial array is sorted by specialty, then maybe by name for consistency
	const referents = [
        {
            specialty: 'Chirurgie orthopédique',
            name: 'Dr Félix Barbier',
            title: 'Docteur Junior en chirurgie orthopédique',
            affiliation: 'AP-HP',
            focus: 'Spécialiste en chirurgie de la main'
        },
		{
			specialty: 'Chirurgie pédiatrique',
			name: 'Dr Camille Girardin',
			title: 'Docteur Junior en chirurgie pédiatrique',
            affiliation: 'CHU de Lille',
			focus: 'Spécialiste en chirurgie ortho-pédiatrique'
		},
		{
			specialty: 'Endocrinologie – Diabétologie – Nutrition',
			name: 'Dr Baptiste Mazas',
			title: 'Interne en Endocrinologie-Diabétologie-Nutrition',
            affiliation: 'AP-HP',
			focus: 'Diabétologie, Nutrition, Prévention Cardiovasculaire, Médecine du Sport'
		},
        {
			specialty: 'Endocrinologie – Diabétologie – Nutrition',
			name: 'Dr Flora Lambert',
			title: 'Interne en Endocrinologie-Diabétologie-Nutrition',
            affiliation: 'AP-HP',
			focus: null // No specific focus listed
		},
        {
			specialty: 'Hématologie',
			name: 'Dr Alexis Talbot',
			title: 'MCU-PH, service d\'Immuno-Hématologie',
            affiliation: 'Hôpital Saint-Louis (AP-HP)',
			focus: 'Spécialiste en myélome multiple, immunothérapie, CAR-T cells'
		},
		{
			specialty: 'Neurochirurgie',
			name: 'Dr Gonzague Defrance',
			title: 'Docteur Junior en neurochirurgie',
            affiliation: 'AP-HP',
			focus: 'Spécialiste en chirurgie fonctionnelle'
		},
		{
			specialty: 'Rhumatologie',
			name: 'Dr Elisabetta Lanciano',
			title: 'Rhumatologie',
            affiliation: 'CH d\'Angoulême',
			focus: null // No specific focus listed
		},
		{
			specialty: 'Urgences',
			name: 'Dr Benjamin Chevallier',
			title: 'Médecine d\'urgence',
            affiliation: 'SAMU de Paris – SMUR Necker – Urgences adultes Paris Saint-Joseph, AP-HP',
			focus: null // No specific focus listed
		},
        {
            specialty: 'Cardiologie',
            name: 'Léo Azria',
            title: 'Interne de Cardiologie',
            affiliation: 'AP-HP',
            focus: null // No specific focus listed
        },
        {
            specialty: 'Urologie',
            name: 'Dr Maxime Pattou',
            title: 'Docteur Junior en urologie',
            affiliation: 'AP-HP',
            focus: 'Spécialiste en uro-oncologie'
        },
        {
            specialty: 'Rhumatologie',
            name: 'Dr Félix Laborie',
            title: 'Interne de Rhumatologie',
            affiliation: 'AP-HP',
            focus: null // No specific focus listed
        },
	].sort((a, b) => { // Ensure sorting is done definitively here
        const specialtyCompare = a.specialty.localeCompare(b.specialty, 'fr', { sensitivity: 'base' });
        if (specialtyCompare !== 0) {
            return specialtyCompare;
        }
        // Optional: Sort by name within the same specialty
        return a.name.localeCompare(b.name, 'fr', { sensitivity: 'base' });
    });

    // Define the missions
    const missions = [
        "Être référent(e) d\'une spécialité ou sous-spécialité",
        "Proposer des articles scientifiques pertinents à relayer",
        "Apporter des corrections aux synthèses générées par notre IA",
        "Valoriser votre engagement académique (mention sur le site, etc.)",
        "Rejoindre un réseau interdisciplinaire et engagé"
    ];

    let showForm = $state(false);
    let formData = $state({
        prenom: '', nom: '', statut: '', specialite: '', surSpecialite: '', centre: ''
    });
    let submissionStatus: 'idle' | 'loading' | 'success' | 'error' = $state('idle');
    let submissionMessage = $state('');

    function resetForm() {
        formData = {
            prenom: '', nom: '', statut: '', specialite: '', surSpecialite: '', centre: ''
        };
        submissionStatus = 'idle';
        submissionMessage = '';
    }

    function toggleForm() {
        showForm = !showForm;
        if (!showForm) resetForm();
    }

    async function handleSubmit() {
        submissionStatus = 'loading';
        submissionMessage = '';
        try {
            const response = await fetch('/api/committee-application', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(formData)
            });
            const result = await response.json().catch(() => ({}));
            if (!response.ok) throw new Error(result.message || `Erreur ${response.status}`);
            submissionStatus = 'success';
            submissionMessage = result.message || 'Candidature envoyée !';
        } catch (err: any) {
            console.error("Application submission error:", err);
            submissionStatus = 'error';
            submissionMessage = err.message || "Une erreur est survenue.";
        }
    }

    function getSpecialtyEmoji(specialty: string): string {
        const emojiMap: Record<string, string> = {
            'Chirurgie orthopédique': '🦴', 'Chirurgie pédiatrique': '👶', 'Cardiologie': '❤️',
            'Endocrinologie – Diabétologie – Nutrition': '⚖️', 'Hématologie': '🩸',
            'Neurochirurgie': '🧠', 'Rhumatologie': '🦵', 'Urgences': '🚑', 'Urologie': '💧'
        };
        return emojiMap[specialty] || '⚕️';
    }

    $effect(() => {
        if (!showForm && submissionStatus !== 'idle') resetForm();
    });

</script>

<svelte:head>
	<title>Comité Scientifique - Veille Médicale</title>
	<meta
		name="description"
		content="Découvrez les médecins référents par spécialité du comité scientifique de Veille Médicale."
	/>
    <link rel="preconnect" href="https://fonts.googleapis.com" />
	<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
	<link
		href="https://fonts.googleapis.com/css2?family=Montserrat:ital,wght@0,100..900;1,100..900&display=swap"
		rel="stylesheet"
	/>
</svelte:head>

<div class="min-h-screen bg-black px-4 py-12 pt-20 text-white font-sans">
	<div class="mx-auto max-w-4xl">
		<!-- En-tête -->
		<header class="mb-12 text-center">
			<h1 class="mb-4 text-4xl font-bold text-white sm:text-5xl">
                🏥 Référents par spécialité
            </h1>
		</header>

        <!-- Section Missions -->
        <section class="mb-16 rounded-lg bg-gray-800 p-6 shadow-lg">
            <h2 class="mb-6 text-center text-2xl font-semibold text-white sm:text-3xl">
                📋 Les missions des membres
            </h2>
            <ul class="list-disc space-y-3 pl-6 text-gray-300">
                {#each missions as mission}
                    <li>{mission}</li>
                {/each}
            </ul>
            <div class="mt-6 text-center">
                <button
                    on:click={toggleForm}
                    class="bg-teal-500 hover:bg-teal-600 text-white font-semibold py-2 px-4 rounded-lg transition-colors"
                >
                    {showForm ? 'Masquer le formulaire' : 'Rejoindre le comité'}
                </button>
            </div>
        </section>

        {#if showForm}
            <!-- Section Formulaire -->
            <section class="mb-16 rounded-lg bg-gray-800 p-6 shadow-lg transition-all duration-300 ease-in-out">
                <h2 class="mb-6 text-center text-2xl font-semibold text-white sm:text-3xl">
                    ✍️ Postuler au comité scientifique
                </h2>
                {#if submissionStatus === 'success'}
                    <div class="flex flex-col items-center justify-center text-center py-8 px-4 bg-gray-700 rounded-lg">
                        <CheckCircle class="h-12 w-12 text-green-400 mb-4" />
                        <h3 class="text-xl font-semibold mb-2 text-white">Candidature Envoyée !</h3>
                        <p class="text-gray-300 mb-6">{submissionMessage}</p>
                        <button on:click={toggleForm} class="bg-gray-600 hover:bg-gray-500 text-white font-semibold py-2 px-4 rounded-lg transition-colors text-sm">
                            Fermer
                        </button>
                    </div>
                {:else}
                    <form on:submit|preventDefault={handleSubmit} class="space-y-4">
                         <div>
                            <label for="prenom" class="block text-gray-300 mb-1 text-sm">Prénom</label>
                            <input type="text" id="prenom" bind:value={formData.prenom} class="w-full bg-gray-700 text-white rounded-lg px-4 py-2 focus:outline-none focus:ring-2 focus:ring-teal-500 border border-gray-600 text-sm" required disabled={submissionStatus === 'loading'} />
                        </div>
                        <div>
                            <label for="nom" class="block text-gray-300 mb-1 text-sm">Nom</label>
                            <input type="text" id="nom" bind:value={formData.nom} class="w-full bg-gray-700 text-white rounded-lg px-4 py-2 focus:outline-none focus:ring-2 focus:ring-teal-500 border border-gray-600 text-sm" required disabled={submissionStatus === 'loading'} />
                        </div>
                        <div>
                            <label for="statut" class="block text-gray-300 mb-1 text-sm">Statut</label>
                            <input type="text" id="statut" bind:value={formData.statut} placeholder="Interne, Docteur, Professeur…" class="w-full bg-gray-700 text-white rounded-lg px-4 py-2 focus:outline-none focus:ring-2 focus:ring-teal-500 border border-gray-600 text-sm" required disabled={submissionStatus === 'loading'} />
                        </div>
                        <div>
                            <label for="specialite" class="block text-gray-300 mb-1 text-sm">Spécialité</label>
                            <input type="text" id="specialite" bind:value={formData.specialite} class="w-full bg-gray-700 text-white rounded-lg px-4 py-2 focus:outline-none focus:ring-2 focus:ring-teal-500 border border-gray-600 text-sm" required disabled={submissionStatus === 'loading'} />
                        </div>
                        <div>
                            <label for="surSpecialite" class="block text-gray-300 mb-1 text-sm">Sur-spécialité (optionnelle)</label>
                            <input type="text" id="surSpecialite" bind:value={formData.surSpecialite} class="w-full bg-gray-700 text-white rounded-lg px-4 py-2 focus:outline-none focus:ring-2 focus:ring-teal-500 border border-gray-600 text-sm" disabled={submissionStatus === 'loading'} />
                        </div>
                        <div>
                            <label for="centre" class="block text-gray-300 mb-1 text-sm">Centre d'exercice</label>
                            <input type="text" id="centre" bind:value={formData.centre} placeholder="CHU, hôpital, clinique, cabinet…" class="w-full bg-gray-700 text-white rounded-lg px-4 py-2 focus:outline-none focus:ring-2 focus:ring-teal-500 border border-gray-600 text-sm" required disabled={submissionStatus === 'loading'} />
                        </div>
                        <div class="bg-gray-700/50 p-3 rounded-lg border border-gray-600">
                            <p class="text-gray-400 text-xs mb-1">📝 Exemple :</p>
                            <p class="text-gray-400 text-xs italic">Dr Xavier Montjou, Chirurgie orthopédique, Spécialiste en chirurgie de la main, AP-HP</p>
                        </div>
                        <div class="pt-2 space-y-3">
                            {#if submissionStatus === 'error'}
                                <p class="text-sm text-red-400 flex items-center gap-1.5 p-3 bg-red-900/30 border border-red-700 rounded-md" role="alert">
                                    <AlertTriangle class="h-4 w-4 flex-shrink-0"/> {submissionMessage}
                                </p>
                            {/if}
                            <button type="submit" class="w-full inline-flex items-center justify-center bg-teal-500 hover:bg-teal-600 text-white font-semibold py-2.5 px-4 rounded-lg transition-colors disabled:opacity-60 disabled:cursor-not-allowed" disabled={submissionStatus === 'loading'}>
                                {#if submissionStatus === 'loading'}
                                    <Loader2 class="mr-2 h-5 w-5 animate-spin" /> Envoi en cours...
                                {:else}
                                    Envoyer ma candidature
                                {/if}
                            </button>
                        </div>
                    </form>
                {/if}
            </section>
        {/if}

        <!-- Liste des Référents - Robust Loop with Index Check -->
        <section>
            {#each referents as referent, index (referent.name)}
                <!-- Show heading if it's the first item OR if specialty differs from the previous item -->
                {#if index === 0 || referent.specialty !== referents[index - 1].specialty}
                    <h2 class="mt-10 mb-6 border-b border-gray-700 pb-2 text-2xl font-semibold text-teal-400 sm:text-3xl">
                        {getSpecialtyEmoji(referent.specialty)} {referent.specialty}
                    </h2>
                {/if}

                <!-- Referent Card -->
                <div class="mb-6 rounded-lg bg-gray-800 p-5 shadow-md transition-shadow hover:shadow-lg">
                    <h3 class="text-xl font-bold text-white">{referent.name}</h3>
                    <p class="text-md text-gray-300">{referent.title}</p>
                    {#if referent.affiliation}
                        <p class="text-sm text-gray-400">{referent.affiliation}</p>
                    {/if}
                    {#if referent.focus}
                        <p class="mt-1 text-sm text-gray-400 italic">{referent.focus}</p>
                    {/if}
                </div>
            {/each}
        </section>
	</div>
</div>

<style>
/* Styles remain the same */
</style>
--- End of File ---

--- File Path ---
frontend/src/routes/+page.ts

// since there's no dynamic data here, we can prerender
// it so that it gets served as a static asset in production
export const prerender = false;

--- End of File ---

--- File Path ---
frontend/src/routes/ma-veille/+page.svelte

<script lang="ts">
	// Correctly import 'page', not '$page'
	import { page } from '$app/stores';
	import ArticleListView from '$lib/components/articles/ArticleListView.svelte';
	import { i18n } from '$lib/i18n';
	import userProfileStore from '$lib/stores/user';

	// Get data loaded by +page.server.ts
	const { data } = $props();

	// Determine initial filter value from URL or default to FIRST user discipline
	let initialFilter: string | null = null;
	const urlParamDiscipline = $page.url.searchParams.get('discipline');
	const userDisciplines = data.userDisciplines || [];

	if (urlParamDiscipline && userDisciplines.includes(urlParamDiscipline)) {
		initialFilter = urlParamDiscipline;
	} else if (userDisciplines.length > 0) {
		initialFilter = userDisciplines[0]; // Default to first user discipline
	}

	// Prepare filters for the Select dropdown (NO "All" option needed here)
	const filterOptions = $derived(
		userDisciplines.map((discipline: string) => ({
			value: discipline,
			label: discipline
		})) || []
	);

	// Prepare savedArticleIds set
	const savedIdsSet = $derived(new Set<string | number>(data.savedArticleIds || []));

	// Get user ID for potential API use (e.g., for 'Favoris' filter)
	// Use $userProfileStore here to access the reactive store value
	const currentUserId = $derived($userProfileStore?.id ?? null);

	// Define template strings with proper typing
	const articleOfTheDayTitleTemplate = '🔥 Article du jour pour {filter} :';
	const previousArticlesTitleTemplate = '📖 Articles précédents pour {filter} :';
</script>

{#if userDisciplines.length === 0}
	<div class="empty-state">
		<p>Vous n'avez pas encore configuré les disciplines que vous souhaitez suivre.</p>
		<p>Veuillez <a href="/account">configurer vos disciplines</a> pour commencer à recevoir des articles pertinents.</p>
	</div>
{:else}
	<!-- Use the shared component, passing specific props for 'Ma Veille' -->
	<ArticleListView
		pageTitle={$i18n.header.myVeille || 'Ma Veille'}
		filters={filterOptions}
		initialFilterValue={initialFilter}
		filterSelectLabel="Mes spécialités"
		showSignupPromptProp={true}
		enableSearch={true}
		subDisciplineFetchMode="user"
		userId={currentUserId}
		savedArticleIds={savedIdsSet}
		articleOfTheDayTitleTemplate={articleOfTheDayTitleTemplate}
		previousArticlesTitleTemplate={previousArticlesTitleTemplate}
		showAllCategoriesOption={false}
	/>
{/if}

<style>
	/* Page-specific styles */
	.empty-state {
		text-align: center;
		padding: 2rem;
		margin: 2rem auto;
		max-width: 600px;
		background-color: #374151; /* gray-700 to match other components */
		border-radius: 8px;
		color: #f3f4f6; /* gray-100 for text */
		box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
	}

	.empty-state p {
		margin: 1rem 0;
		font-size: 1.1rem;
		color: inherit;
	}

	.empty-state a {
		color: var(--color-primary, #0d9488); /* teal-600 */
		text-decoration: underline;
	}
</style>
--- End of File ---

--- File Path ---
frontend/src/routes/ma-veille/+page.server.ts

// /ma-veille/+page.server.ts (V4 - Simplified)
import { redirect } from '@sveltejs/kit';
import { error } from '@sveltejs/kit';

export async function load({ locals }) {
	console.log('=== Starting load function for /ma-veille (V4 - Simplified) ===');

	const { session, user } = await locals.safeGetSession();

	if (!user || !session) {
		console.log('No user or session found, redirecting to login');
        throw redirect(303, '/login?redirect=/ma-veille');
	}

	try {
        // 1. Fetch distinct MAIN discipline names user is subscribed to
        console.log(`Fetching distinct subscribed discipline names for user: ${user.id}`);
        // Use RPC for potentially better performance on distinct join
        const { data: disciplineNamesData, error: disciplineNamesError } = await locals.supabase
            .rpc('get_user_subscribed_discipline_names', { p_user_id: user.id });

        if (disciplineNamesError) {
            console.error('Error fetching user subscribed discipline names via RPC:', disciplineNamesError);
            throw error(500, `Database error: ${disciplineNamesError.message}`);
        }

        // RPC returns array of records like { name: '...' }, sort them
        const userDisciplinesNames = (disciplineNamesData || [])
            .map((d: { name: string }) => d.name)
            .sort((a: string, b: string) => a.localeCompare(b, 'fr', { sensitivity: 'base' }));

        console.log('User Main Disciplines for Filter:', userDisciplinesNames);

        if (userDisciplinesNames.length === 0) {
             console.log('User has no subscriptions.');
             // Return empty list, page will show empty state
        }

        // 2. Fetch saved articles (same as before)
        console.log('Fetching saved articles for user ID:', user.id);
        const { data: savedArticlesData, error: savedArticlesError } = await locals.supabase
            .from('saved_articles') // Adjust table name if different
            .select('article_id')
            .eq('user_id', user.id);

        if (savedArticlesError) {
            console.error('Error fetching saved articles:', savedArticlesError);
            throw error(500, `Database error: ${savedArticlesError.message}`);
        }

        const savedArticleIds = savedArticlesData?.map((saved) => saved.article_id) || [];
        console.log('Mapped saved article IDs:', savedArticleIds);

        // 3. Return the necessary data for the page
        console.log('Returning data to /ma-veille page');
        return {
            // Pass the names for the filter dropdown
            userDisciplines: userDisciplinesNames,
            // Pass saved IDs for the ArticleListView component (if it uses them)
            savedArticleIds,
            // No need to pass initial subs or initial filter, ArticleListView handles it
            error: null
        };

    } catch (err) {
         console.error('Error in /ma-veille load function:', err);
         if (err && typeof err === 'object' && 'status' in err) throw err;
         throw error(500, 'Une erreur interne est survenue lors du chargement de votre veille.');
    }
}
--- End of File ---

--- File Path ---
frontend/src/routes/+layout.svelte

<script lang="ts">
	import '../app.css';
	import Header from '$lib/components/Header.svelte';
	import Footer from '$lib/components/Footer.svelte';
	import userProfile from '$lib/stores/user';
	import { invalidate } from '$app/navigation';
	import { supabaseStore } from '$lib/stores/supabase';
	import { onMount } from 'svelte';
	import NProgress from 'nprogress';
	import { navigating } from '$app/stores';
	import 'nprogress/nprogress.css';

	NProgress.configure({ showSpinner: false });

	const getUserProfile = async function (supabase: any, userId: string) {
		try {
			if (!userId) {
				return null;
			}
			const { data, error } = await supabase
				.from('user_profiles')
				.select('*')
				.eq('id', userId)
				.single();
			if (error) throw error;
			userProfile.set(data);
			return data;
		} catch (error) {
			console.error('Error fetching user profile:', error);
			return null;
		}
	};

	let { data, children } = $props();
	let { session, supabase, user } = $derived(data);

	supabaseStore.set(supabase);

	$effect(() => {
		if (user?.id) {
			if (!$userProfile || $userProfile?.id !== user.id) {
				getUserProfile(supabase, user.id).then((profile) => {
					if (!profile) userProfile.set({ id: user.id, ...user }); // Fallback avec les données de l'utilisateur
				});
			}
		} else {
			userProfile.set(null);
		}
	});

	onMount(() => {
		console.log('User Profile on mount:', $userProfile);

		const { data: subscription } = supabase.auth.onAuthStateChange((event, newSession) => {
			console.log('Auth state changed:', event, newSession);
			if (event === 'SIGNED_OUT') {
				userProfile.set(null);
				invalidate('supabase:auth');
			} else if (newSession?.expires_at !== session?.expires_at) {
				invalidate('supabase:auth');
			}
		});

		return () => subscription.subscription.unsubscribe();
	});

	$effect(() => {
		if ($navigating) {
			NProgress.start();
		} else {
			NProgress.done();
		}
	});
</script>

<svelte:head>
	<link rel="stylesheet" href="/fonts.css" />
</svelte:head>

<div class="font-display relative flex flex-col">
	<Header />
	<div class="mt-[15%] sm:mt-[3.5%]">
		{@render children()}
	</div>
	<Footer />
</div>

<style>
	.app {
		min-height: 100vh;
	}
	/* Personnaliser NProgress pour une barre bleue comme YouTube */
	#nprogress .bar {
		background: #1a73e8; /* Couleur bleue */
		height: 4px;
	}
	#nprogress .peg {
		box-shadow:
			0 0 10px #1a73e8,
			0 0 5px #1a73e8;
	}
</style>

--- End of File ---

--- File Path ---
frontend/src/routes/account/+page.server.js

// /routes/account/+page.server.js
import { redirect } from '@sveltejs/kit';
import { error } from '@sveltejs/kit'; // Import error

export async function load({ locals }) {
	const { session, user } = await locals.safeGetSession();

	// console.log('Session in account load:', session);
	// console.log('User in account load:', user);

	if (!session || !user) {
		console.log('No session/user in account load, redirecting');
		throw redirect(302, '/login?redirect=/account');
	}

	try {
		// 1. Fetch user profile (excluding the old 'disciplines' column)
		const { data: userProfile, error: profileError } = await locals.supabase
			.from('user_profiles')
			.select('id, first_name, last_name, email, notification_frequency, date_of_birth, status, specialty') // Removed 'disciplines'
			.eq('id', user.id)
			.single();

		if (profileError) throw profileError; // Throw error to be caught below
		if (!userProfile) throw error(404, 'Profil utilisateur non trouvé.');

		// 2. Fetch all disciplines with their sub-disciplines
		const { data: allDisciplinesData, error: disciplinesError } = await locals.supabase
			.from('disciplines')
			.select(`
                id,
                name,
                sub_disciplines ( id, name )
            `)
			.order('name', { ascending: true }) // Order main disciplines
			.order('name', { referencedTable: 'sub_disciplines', ascending: true }); // Order sub-disciplines

		if (disciplinesError) throw disciplinesError;

		// Structure the data for the frontend
		const allDisciplines = allDisciplinesData || [];

		// 3. Fetch user's current subscriptions
		const { data: userSubsData, error: subsError } = await locals.supabase
			.from('user_subscriptions')
			.select('discipline_id, sub_discipline_id')
			.eq('user_id', user.id);

		if (subsError) throw subsError;

		// Convert subscriptions to a format easy for the frontend to check (e.g., Set of strings)
		const userSubscriptions = new Set();
		(userSubsData || []).forEach(sub => {
			if (sub.sub_discipline_id) {
				userSubscriptions.add(`s:${sub.sub_discipline_id}`); // Mark sub-disciplines with 's:'
			} else {
				userSubscriptions.add(`d:${sub.discipline_id}`); // Mark main disciplines with 'd:'
			}
		});

		// 4. Get status options from i18n data (if possible server-side, else hardcode)
        //    We'll hardcode them here for simplicity, assuming i18n is client-side focused
        const statusOptions = [
             "Pr", "Dr", "Interne", "Étudiant", "Médecine", "Professeur de médecine",
             "Docteur en médecine", "Interne en médecine", "Etudiant en médecine",
             "Diététicien(ne)-nutritionniste", "Infirmier(ère)", "Kinésithérapeute",
             "Pharmaciens", "Professions dentaires", "Psychologue", "Sage-femme", "Autres"
        ];
        const notificationOptions = [
            { value: 'tous_les_jours', label: 'Tous les jours' },
            { value: 'tous_les_2_jours', label: 'Tous les 2 jours' },
            { value: 'tous_les_3_jours', label: 'Tous les 3 jours' },
            { value: '1_fois_par_semaine', label: '1 fois par semaine' },
            { value: 'tous_les_15_jours', label: 'Tous les 15 jours' },
            { value: '1_fois_par_mois', label: '1 fois par mois' }
        ];

		return {
            userProfile,          // Basic profile data
            allDisciplines,       // Full hierarchy for UI [{id, name, sub_disciplines: [{id, name}]}]
            userSubscriptions: Array.from(userSubscriptions), // Pass the Set as an array for serialization ['d:1', 's:5', ...]
            statusOptions,        // List of statuses for dropdown
            notificationOptions,  // List of frequencies for dropdown
			session, // Pass session if needed by layout/page
			user,    // Pass user if needed by layout/page
		};

	} catch (err) {
		console.error('Error loading account data:', err);
		// Check if it's a Supabase error with a message
		if (err && typeof err === 'object' && 'message' in err) {
            throw error(500, `Erreur serveur: ${err.message}`);
        }
        // Check if it's a SvelteKit error object
        if (err && typeof err === 'object' && 'status' in err) {
             throw err; // Re-throw SvelteKit error
        }
		// Throw generic error otherwise
		throw error(500, 'Erreur lors du chargement des données du compte.');
	}
}

// No Actions needed here anymore, we will use an API route
export const actions = undefined;
--- End of File ---

--- File Path ---
frontend/src/routes/account/+page.svelte

<!-- /routes/account/+page.svelte -->
<script lang="ts">
	import { i18n } from '$lib/i18n'; // Assuming i18n setup is client-side friendly
	import userProfileStore from '$lib/stores/user';
	import { supabase } from '$lib/supabase'; // Use the browser client for API calls
	import { onMount } from 'svelte';
	import * as Select from '$lib/components/ui/select/index.js';
    import { AlertCircle, Check, ChevronDown, ChevronUp, Loader2 } from 'lucide-svelte'; // Import icons

	// Get props (data from load function)
	let { data } = $props();

    // --- Reactive State ---
    // Profile fields
	let firstName = $state(data.userProfile?.first_name || '');
	let lastName = $state(data.userProfile?.last_name || '');
	let status = $state(data.userProfile?.status || '');
	let specialty = $state(data.userProfile?.specialty || '');
	let dateOfBirth = $state(data.userProfile?.date_of_birth || '');

    // Subscription state
    console.log("Initial data.userSubscriptions:", data.userSubscriptions);
    let currentSubscriptions = $state(new Set<string>(data.userSubscriptions || []));
    console.log("Initial currentSubscriptions:", Array.from(currentSubscriptions));

    // UI State
	let isLoading = $state(false);
    let saveSuccess = $state(false);
    let saveError = $state('');
    let openDisciplines = $state(new Set<number>()); // Store IDs of open disciplines

    // Data from load function
    const allDisciplines = $derived(data.allDisciplines || []);
    const statusOptions = $derived(data.statusOptions || []); // Use options from server

    // Define the notification options
    const notificationOptions = [
        { value: 'tous_les_jours', label: 'Tous les jours' },
        { value: 'tous_les_2_jours', label: 'Tous les 2 jours' },
        { value: 'tous_les_3_jours', label: 'Tous les 3 jours' },
        { value: '1_fois_par_semaine', label: 'Une fois par semaine' },
        { value: 'tous_les_15_jours', label: 'Tous les 15 jours' },
        { value: '1_fois_par_mois', label: 'Une fois par mois' }
    ];

    // Make sure the initial value exactly matches one of the enum values
    let selectedNotificationFreq = $state(
        notificationOptions.some(opt => opt.value === data.userProfile?.notification_frequency)
            ? data.userProfile?.notification_frequency
            : 'tous_les_jours'
    );

    // Update the trigger content to always show the selected option's label
    const triggerNotificationContent = $derived(
        notificationOptions.find(o => o.value === selectedNotificationFreq)?.label || 'Choisir une fréquence'
    );

	// Compute display labels for dropdowns
	const triggerStatusContent = $derived(
		statusOptions.find(o => o === status) ?? 'Choisissez un statut'
	);

	// --- Effects ---
	$effect(() => {
        // This effect was removing user input on store changes, which is likely not desired.
        // Removed the logic that reset the state variables here.
        // The initial state is set correctly using $state(data.userProfile?.field || '')
    });

    $effect(() => {
        if (saveSuccess || saveError) {
            const timer = setTimeout(() => {
                saveSuccess = false;
                saveError = '';
            }, 4000);
            return () => clearTimeout(timer);
        }
    });

     // --- Initialize open disciplines based on current subscriptions ---
     $effect(() => {
        const initialOpen = new Set<number>();
        currentSubscriptions.forEach(key => {
            if (key.startsWith('s:')) {
                const subId = parseInt(key.split(':')[1], 10);
                if (!isNaN(subId)) {
                    for (const discipline of allDisciplines) {
                        if (discipline.sub_disciplines?.some(sub => sub.id === subId)) {
                            initialOpen.add(discipline.id);
                            break; // Found the parent, move to next key
                        }
                    }
                }
            } else if (key.startsWith('d:')) {
                const discId = parseInt(key.split(':')[1], 10);
                if (!isNaN(discId)) {
                     // Optionally auto-open if the main discipline is checked,
                     // but the toggle logic handles opening when checked now.
                }
            }
        });
        // Only set openDisciplines on the initial load or if it hasn't been set yet
        // to avoid overriding user interactions. Let's remove this auto-open based on
        // current subs, as the new logic handles opening when a main is checked.
        // openDisciplines = initialOpen;
     });


    // --- Functions ---
    function toggleDisciplineSection(disciplineId: number) {
        const newSet = new Set(openDisciplines);
        if (newSet.has(disciplineId)) {
            newSet.delete(disciplineId);
        } else {
            newSet.add(disciplineId);
        }
        openDisciplines = newSet;
    }

    function handleMainDisciplineChange(disciplineId: number, isChecked: boolean) {
        const key = `d:${disciplineId}`;
        const newSubs = new Set(currentSubscriptions);
        const newOpen = new Set(openDisciplines); // Get current open state
        const discipline = allDisciplines.find(d => d.id === disciplineId);

        if (isChecked) {
            newSubs.add(key);
            // Select all sub-disciplines
            discipline?.sub_disciplines.forEach(sub => {
                 newSubs.add(`s:${sub.id}`);
            });
            // Expand the section
            newOpen.add(disciplineId);
        } else {
            newSubs.delete(key);
            // Deselect all sub-disciplines
            discipline?.sub_disciplines.forEach(sub => {
                 newSubs.delete(`s:${sub.id}`);
            });
            // Collapse the section
            newOpen.delete(disciplineId);
        }
        currentSubscriptions = newSubs;
        openDisciplines = newOpen; // Update open state
    }

    function handleSubDisciplineChange(subDisciplineId: number, disciplineId: number, isChecked: boolean) {
        const key = `s:${subDisciplineId}`;
        const mainKey = `d:${disciplineId}`;
        const newSubs = new Set(currentSubscriptions);

        if (isChecked) {
            newSubs.add(key);
            // Automatically check the parent discipline if it's not already checked
            if (!newSubs.has(mainKey)) {
                newSubs.add(mainKey);
            }
        } else {
            newSubs.delete(key);
            // Optional: Uncheck parent ONLY if no other subs under it are checked
            const discipline = allDisciplines.find(d => d.id === disciplineId);
            const hasOtherCheckedSubs = discipline?.sub_disciplines.some(
                sub => sub.id !== subDisciplineId && newSubs.has(`s:${sub.id}`)
            ) ?? false;

            if (!hasOtherCheckedSubs && newSubs.has(mainKey)) {
                 // If you want to auto-uncheck parent when last sub is unchecked:
                 // newSubs.delete(mainKey);
                 // Keeping parent checked is usually less confusing, so we'll leave it checked for now.
            }
        }
        currentSubscriptions = newSubs;
    }

	async function handleSubmit() {
		if (isLoading) return;
		isLoading = true;
        saveSuccess = false;
        saveError = '';

        const profileUpdates = {
            first_name: firstName,
            last_name: lastName,
            status: status || null,
            specialty: specialty || null,
            notification_frequency: selectedNotificationFreq,
            date_of_birth: dateOfBirth || null,
        };

        console.log("Current subscriptions before processing:", Array.from(currentSubscriptions));
        const subscriptionsPayload: { discipline_id: number; sub_discipline_id: number | null }[] = [];
        
        // First, handle main discipline subscriptions
        currentSubscriptions.forEach(key => {
            if (key.startsWith('d:')) {
                const disciplineId = parseInt(key.split(':')[1], 10);
                if (!isNaN(disciplineId)) {
                    // Check if any sub-discipline for this main discipline is also selected
                    const discipline = allDisciplines.find(d => d.id === disciplineId);
                    const hasAnySubSelected = discipline?.sub_disciplines.some(sub => 
                        currentSubscriptions.has(`s:${sub.id}`)
                    ) ?? false;
                    
                    console.log(`Processing main discipline ${disciplineId}:`, {
                        hasAnySubSelected,
                        disciplineName: discipline?.name,
                        subDisciplines: discipline?.sub_disciplines
                    });
                    
                    // Only add the main discipline if no sub-disciplines are selected
                    if (!hasAnySubSelected) {
                        subscriptionsPayload.push({ 
                            discipline_id: disciplineId, 
                            sub_discipline_id: null 
                        });
                    }
                }
            }
        });

        // Then handle sub-discipline subscriptions
        currentSubscriptions.forEach(key => {
            if (key.startsWith('s:')) {
                const subDisciplineId = parseInt(key.split(':')[1], 10);
                if (!isNaN(subDisciplineId)) {
                    // Find the parent discipline for this sub-discipline
                    for (const discipline of allDisciplines) {
                        const sub = discipline.sub_disciplines?.find(sub => sub.id === subDisciplineId);
                        if (sub) {
                            console.log(`Processing sub-discipline ${subDisciplineId}:`, {
                                parentDisciplineId: discipline.id,
                                parentDisciplineName: discipline.name,
                                subDisciplineName: sub.name
                            });
                            subscriptionsPayload.push({ 
                                discipline_id: discipline.id, 
                                sub_discipline_id: subDisciplineId 
                            });
                            break;
                        }
                    }
                }
            }
        });

        console.log("Final subscriptions payload:", subscriptionsPayload);

        try {
            const response = await fetch('/api/update-profile-and-subscriptions', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    profile: profileUpdates,
                    subscriptions: subscriptionsPayload
                })
            });
            const result = await response.json();
            if (!response.ok) throw new Error(result.message || `HTTP Error ${response.status}`);

            console.log("Update successful:", result);
            // Update local user profile store
            userProfileStore.update(current => {
                if (current) {
                    return {
                        ...current,
                        first_name: profileUpdates.first_name,
                        last_name: profileUpdates.last_name,
                        status: profileUpdates.status,
                        specialty: profileUpdates.specialty,
                        notification_frequency: profileUpdates.notification_frequency,
                        date_of_birth: profileUpdates.date_of_birth,
                    };
                }
                return null;
            });
            saveSuccess = true;
        } catch (err: any) {
            console.error('Error updating profile/subscriptions:', err);
            saveError = err.message || 'Erreur lors de la mise à jour.';
        } finally {
            isLoading = false;
        }
	}

	async function handleLogout() {
		try {
			isLoading = true;
            saveError = '';
			const { error } = await supabase.auth.signOut();
			if (error) throw error;
			userProfileStore.set(null);
			window.location.href = '/login';
		} catch (error: any) {
			console.error('Erreur lors de la déconnexion :', error);
            saveError = `Erreur de déconnexion: ${error.message}`;
            isLoading = false;
		}
	}
</script>

<div class="min-h-screen bg-black px-4 py-12 text-white pt-20 md:pt-24">
	<div class="mx-auto max-w-3xl">
		<h1 class="mb-8 text-3xl md:text-4xl font-bold text-white">Mon compte</h1>

		{#if data.error}
			<p class="mb-6 rounded border border-red-700 bg-red-900/30 p-4 text-red-300">{data.error}</p>
		{:else if !data.userProfile}
            <p class="mb-6 rounded border border-yellow-700 bg-yellow-900/30 p-4 text-yellow-300">Chargement du profil...</p>
        {:else}
			<!-- Form Section -->
			<form on:submit|preventDefault={handleSubmit} class="space-y-8 rounded-lg bg-gray-800 p-6 md:p-8 shadow-lg">

				<!-- Vos Informations Section -->
				<div>
                    <h2 class="text-xl md:text-2xl font-semibold text-white border-b border-gray-700 pb-3 mb-6">Vos informations</h2>
                    <div class="space-y-6">
                        <div>
                            <label for="firstName" class="mb-2 block text-sm font-medium text-gray-300">{$i18n.login.firstName}</label>
                            <input
                                id="firstName"
                                type="text"
                                bind:value={firstName}
                                on:input={(e) => firstName = e.target.value || ''}
                                class="mt-1 block w-full rounded-lg border border-gray-700 bg-gray-700 px-4 py-3 text-white transition-all duration-200 focus:border-teal-500 focus:ring focus:ring-teal-600/50"
                                required />
                        </div>
                        <div>
                            <label for="lastName" class="mb-2 block text-sm font-medium text-gray-300">{$i18n.login.lastName}</label>
                            <input
                                id="lastName"
                                type="text"
                                bind:value={lastName}
                                on:input={(e) => lastName = e.target.value || ''}
                                class="mt-1 block w-full rounded-lg border border-gray-700 bg-gray-700 px-4 py-3 text-white transition-all duration-200 focus:border-teal-500 focus:ring focus:ring-teal-600/50"
                                required />
                        </div>
                        <div>
                            <label for="status" class="mb-2 block text-sm font-medium text-gray-300">{$i18n.account.status}</label>
                            <select
                                id="status"
                                bind:value={status}
                                class="mt-1 block w-full rounded-lg border border-gray-700 bg-gray-700 px-4 py-3 text-sm text-white transition-all duration-200 focus:border-teal-500 focus:ring focus:ring-teal-600/50 appearance-none"
                            >
                                <option value="">-- Choisir --</option> 
                                {#each statusOptions as option}
                                    <option value={option}>{option}</option>
                                {/each}
                            </select>
                        </div>
                        <div>
                            <label for="specialty" class="mb-2 block text-sm font-medium text-gray-300">{$i18n.account.specialty}</label>
                            <input
                                id="specialty"
                                type="text"
                                bind:value={specialty}
                                on:input={(e) => specialty = e.target.value || ''}
                                class="mt-1 block w-full rounded-lg border border-gray-700 bg-gray-700 px-4 py-3 text-white transition-all duration-200 focus:border-teal-500 focus:ring focus:ring-teal-600/50"
                                placeholder="Ex: Médecine Générale" />
                        </div>
                        <div>
                            <label for="dateOfBirth" class="mb-2 block text-sm font-medium text-gray-300">{$i18n.login.dateOfBirth}</label>
                            <input
                                id="dateOfBirth"
                                type="date"
                                bind:value={dateOfBirth}
                                on:input={(e) => dateOfBirth = e.target.value || ''}
                                class="mt-1 block w-full rounded-lg border border-gray-700 bg-gray-700 px-4 py-3 text-white transition-all duration-200 focus:border-teal-500 focus:ring focus:ring-teal-600/50" />
                        </div>
                    </div>
                </div>

				<hr class="border-gray-700" />

                <!-- Vos Préférences Section -->
				<div>
                    <h2 class="text-xl md:text-2xl font-semibold text-white border-b border-gray-700 pb-3 mb-6">Vos préférences de veille</h2>

                    <!-- Notification Frequency -->
                    <div class="mb-8">
                        <label for="notificationFrequency" class="mb-2 block text-sm font-medium text-gray-300">Fréquence des notifications</label>
                        <select
                            id="notificationFrequency"
                            bind:value={selectedNotificationFreq}
                            class="mt-1 block w-full rounded-lg border border-gray-700 bg-gray-700 px-4 py-3 text-sm text-white transition-all duration-200 focus:border-teal-500 focus:ring focus:ring-teal-600/50 appearance-none"
                        >
                            {#each notificationOptions as option}
                                <option value={option.value}>{option.label}</option>
                            {/each}
                        </select>
                    </div>

                    <!-- Discipline/Sub-discipline Subscriptions -->
                    <div>
                        <label class="mb-4 block text-sm font-medium text-gray-300">Spécialités et sous-spécialités suivies</label>
                        <div class="space-y-4 max-h-96 overflow-y-auto pr-2 scrollbar-thin scrollbar-thumb-teal-600 scrollbar-track-gray-700 rounded-md border border-gray-600 p-4 bg-gray-700/50">
                             {#each allDisciplines as discipline (discipline.id)}
                                <div class="discipline-group">
                                    <div class="flex items-center justify-between">
                                        <label class="flex items-center cursor-pointer select-none py-1 flex-grow">
                                            <input
                                                type="checkbox"
                                                class="h-4 w-4 rounded border-gray-500 bg-gray-600 text-teal-500 focus:ring-teal-600 focus:ring-offset-gray-800 mr-3 shrink-0"
                                                checked={currentSubscriptions.has(`d:${discipline.id}`)}
                                                on:change={(e) => {
                                                    console.log("Main discipline change:", discipline.id, e.currentTarget.checked);
                                                    handleMainDisciplineChange(discipline.id, e.currentTarget.checked);
                                                }}
                                            />
                                            <span class="font-medium text-gray-100">{discipline.name}</span>
                                        </label>
                                        {#if discipline.sub_disciplines && discipline.sub_disciplines.length > 0}
                                             <button type="button" on:click={() => toggleDisciplineSection(discipline.id)} class="text-gray-400 hover:text-gray-200 p-1 -mr-1 rounded focus:outline-none focus:ring-2 focus:ring-teal-500 focus:ring-offset-1 focus:ring-offset-gray-800 shrink-0 ml-2">
                                                 {#if openDisciplines.has(discipline.id)} <ChevronUp class="h-4 w-4" /> {:else} <ChevronDown class="h-4 w-4" /> {/if}
                                             </button>
                                        {/if}
                                    </div>
                                    {#if openDisciplines.has(discipline.id) && discipline.sub_disciplines && discipline.sub_disciplines.length > 0}
                                        <div class="mt-2 pl-6 border-l border-gray-600 ml-2 space-y-1.5">
                                             {#each discipline.sub_disciplines as sub (sub.id)}
                                                  <label class="flex items-center cursor-pointer select-none py-0.5">
                                                      <input
                                                          type="checkbox"
                                                          class="h-4 w-4 rounded border-gray-500 bg-gray-600 text-teal-500 focus:ring-teal-600 focus:ring-offset-gray-800 mr-3 shrink-0"
                                                          checked={currentSubscriptions.has(`s:${sub.id}`)}
                                                          on:change={(e) => {
                                                              console.log("Sub discipline change:", sub.id, discipline.id, e.currentTarget.checked);
                                                              handleSubDisciplineChange(sub.id, discipline.id, e.currentTarget.checked);
                                                          }}
                                                      />
                                                      <span class="text-sm text-gray-300 hover:text-gray-100">{sub.name}</span>
                                                  </label>
                                             {/each}
                                        </div>
                                    {/if}
                                </div>
                             {:else}
                                <p class="text-gray-500 italic">Aucune discipline disponible.</p>
                             {/each}
                        </div>
                         <p class="text-xs text-gray-400 mt-3">Cocher une spécialité sélectionne automatiquement toutes ses sous-spécialités.</p>
                    </div>
                </div>

				<!-- Save Button & Messages -->
				<div class="pt-5">
                     {#if saveSuccess}
                        <div role="alert" class="mb-4 flex items-center gap-2 rounded-md bg-green-800/30 border border-green-600 p-3 text-sm text-green-300">
                            <Check class="h-4 w-4 flex-shrink-0" />
                            Profil et abonnements mis à jour avec succès !
                        </div>
                     {/if}
                     {#if saveError}
                         <div role="alert" class="mb-4 flex items-center gap-2 rounded-md bg-red-900/30 border border-red-700 p-3 text-sm text-red-300">
                            <AlertCircle class="h-4 w-4 flex-shrink-0" />
                            {saveError}
                        </div>
                     {/if}
					<button
						type="submit"
						disabled={isLoading}
						class="flex w-full items-center justify-center rounded-lg bg-orange-600 px-8 py-3 font-semibold text-white shadow-md transition-all duration-300 hover:bg-orange-700 focus:outline-none focus:ring-2 focus:ring-orange-500 focus:ring-offset-2 focus:ring-offset-gray-800 disabled:cursor-not-allowed disabled:opacity-60"
					>
						{#if isLoading} <Loader2 class="mr-2 h-5 w-5 animate-spin" /> <span>Enregistrement...</span>
						{:else} Enregistrer les modifications {/if}
					</button>
				</div>
			</form>

            <hr class="my-10 border-gray-700" />

			<!-- Logout Section -->
			<div class="text-left">
				<h2 class="mb-4 text-xl md:text-2xl font-semibold text-white">Se déconnecter</h2>
				<button
					on:click={handleLogout}
                    disabled={isLoading}
					class="rounded-lg bg-gray-600 px-6 py-2.5 text-sm font-medium text-white transition-colors duration-200 hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-red-500 focus:ring-offset-2 focus:ring-offset-gray-800 disabled:cursor-not-allowed disabled:opacity-60"
				>
					Déconnexion
				</button>
			</div>
		{/if}
	</div>
</div>

<style>
	/* Custom scrollbar for the select dropdown & discipline list */
	.scrollbar-thin {
		scrollbar-width: thin;
		scrollbar-color: #0d9488 #374151; /* thumb(teal-600) track(gray-700) */
	}
	.scrollbar-thin::-webkit-scrollbar {
		width: 6px; height: 6px;
	}
	.scrollbar-thin::-webkit-scrollbar-track {
		background: #374151; /* gray-700 */ border-radius: 10px;
	}
	.scrollbar-thin::-webkit-scrollbar-thumb {
		background-color: #0d9488; /* teal-600 */ border-radius: 6px; border: 1px solid #374151; /* gray-700 */
	}
    .scrollbar-thin::-webkit-scrollbar-thumb:hover {
		background-color: #0f766e; /* teal-700 */
	}

    /* Ensure date input text is visible */
    input[type="date"] { color-scheme: dark; }
    input[type="date"]::-webkit-calendar-picker-indicator { filter: invert(0.8); }

    /* Ensure checkbox is visible in dark mode */
    input[type="checkbox"] { color-scheme: dark; }

     /* Restore original input/select styles */
    label {
         /* Keep the existing label style */
         margin-bottom: 0.5rem; /* mb-2 */
         display: block;
         font-size: 0.875rem; /* text-sm */
         font-weight: 500; /* font-medium */
         color: #D1D5DB; /* text-gray-300 */
    }
     input[type="text"], input[type="date"], select {
        margin-top: 0.25rem; /* mt-1 */
        display: block;
        width: 100%;
        border-radius: 0.5rem; /* rounded-lg */
        border: 1px solid #4B5563; /* border-gray-700 */
        background-color: #374151; /* bg-gray-700 */
        padding: 0.75rem 1rem; /* px-4 py-3 */
        color: #FFFFFF; /* text-white */
        transition: all 0.2s ease-in-out; /* transition-all duration-200 */
        font-size: 0.875rem; /* text-sm */ /* Added to match Select component */
        line-height: 1.25rem; /* Added to match Select component */
        height: 3rem; /* Explicit height to match Select */
    }
     input[type="text"]:focus, input[type="date"]:focus, select:focus {
        border-color: #14B8A6; /* focus:border-teal-500 */
        outline: 2px solid transparent; /* Remove default outline */
        outline-offset: 2px;
        --tw-ring-offset-shadow: var(--tw-ring-inset) 0 0 0 var(--tw-ring-offset-width) var(--tw-ring-offset-color);
        --tw-ring-shadow: var(--tw-ring-inset) 0 0 0 calc(1px + var(--tw-ring-offset-width)) var(--tw-ring-color); /* Simulating focus:ring */
        box-shadow: var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow, 0 0 #0000);
        --tw-ring-color: rgba(20, 184, 166, 0.5); /* focus:ring-teal-600/50 */
    }

    /* Style select arrow */
    select {
        background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 20 20'%3e%3cpath stroke='%236b7280' stroke-linecap='round' stroke-linejoin='round' stroke-width='1.5' d='M6 8l4 4 4-4'/%3e%3c/svg%3e");
        background-position: right 0.5rem center;
        background-repeat: no-repeat;
        background-size: 1.5em 1.5em;
        padding-right: 2.5rem;
        -webkit-appearance: none;
           -moz-appearance: none;
                appearance: none;
    }

     /* Revert the grid layout for profile fields */
    form > div:first-child > div:not(.space-y-6) { /* Target direct children divs containing profile info */
         display: block; /* Revert from grid */
    }
    form > div:first-child > div > div { /* Target the inner divs for each field */
        margin-bottom: 1.5rem; /* Re-add vertical spacing (space-y-6 equivalent) */
    }

</style>
--- End of File ---

--- File Path ---
frontend/src/routes/logout/+server.ts

import { json, redirect } from '@sveltejs/kit';

export const POST = async ({ locals, cookies, url }) => {
  console.log('Starting logout process...');

  // Vérifier si locals.supabase est défini
  if (!locals.supabase) {
    console.error('Supabase client not initialized in locals');
    return json({ error: 'Supabase client not initialized' }, { status: 500 });
  }

  // Déconnexion via Supabase
  console.log('Calling supabase.auth.signOut()...');
  const { error } = await locals.supabase.auth.signOut();
  if (error) {
    console.error('Server-side logout error:', error);
    return json({ error: error.message }, { status: 500 });
  }

  // Vérifier l'URL pour les options de cookie
  console.log('Request URL:', url);
  const isLocalhost = url.hostname.includes('localhost');
  console.log('Is localhost:', isLocalhost);

  // Supprimer manuellement le cookie d'authentification
  const cookieName = 'sb-etxelhjnqbrgwuitltyk-auth-token';
  console.log('Cookies before deletion:', cookies.getAll());
  cookies.delete(cookieName, {
    path: '/',
    httpOnly: true,
    secure: !isLocalhost,
    sameSite: isLocalhost ? 'lax' : 'none',
    domain: isLocalhost ? 'localhost' : '.veillemedicale.fr',
  });
  console.log('Cookies after deletion:', cookies.getAll());

  console.log('Cookie deleted successfully, redirecting...');
  throw redirect(303, '/'); // La redirection doit être en dehors du try-catch
};
--- End of File ---

--- File Path ---
frontend/src/routes/login/+page.svelte

<!-- /routes/login/+page.svelte -->
<script>
	import { i18n } from '$lib/i18n';
	import LoginForm from '$lib/components/auth/LoginForm.svelte';
	import MessageDisplay from '$lib/components/auth/MessageDisplay.svelte';
  
	let email = '';
	let password = '';
	let errorMessage = '';
	let successMessage = '';
	let isLoading = false;
  </script>
  
  <main class="flex min-h-screen items-center justify-center bg-black px-4 py-12">
	<div class="w-full max-w-md rounded-2xl bg-white p-8 shadow-2xl transition-all duration-300 hover:shadow-3xl">
	  <h1 class="mb-6 text-center text-3xl font-bold tracking-tight capitalize">
		{$i18n.login.loginTitle}
	  </h1>
  
	  <MessageDisplay bind:errorMessage bind:successMessage />
	  {#if isLoading}
		<div class="flex items-center justify-center space-x-2 rounded-lg bg-blue-50 p-4 mb-4">
		  <div class="h-5 w-5 animate-spin rounded-full border-4 border-t-blue-500"></div>
		  <p class="text-blue-600 font-medium">{$i18n.login.loggingIn}</p>
		</div>
	  {/if}
  
	  <form
		method="POST"
		action="/login"
		class="space-y-6"
	  >
		<LoginForm
		  bind:email
		  bind:password
		  bind:errorMessage
		  bind:successMessage
		  bind:isLoading
		/>
	  </form>
	  <a href="/signup" class="hover:underline">
		<p class="text-center text-sm text-gray-500 mt-4">
		  {$i18n.login.needAccount}
		</p>
	  </a>
	</div>
  </main>
--- End of File ---

--- File Path ---
frontend/src/routes/login/+page.server.ts

// /routes/login/+page.server.ts
import type { Actions } from '@sveltejs/kit';
import { fail } from '@sveltejs/kit';
import { redirect } from '@sveltejs/kit';

export const actions: Actions = {
	default: async ({ request, locals: { supabase } }) => {
		console.log('Login action started');

		const formData = await request.formData();
		const email = formData.get('email')?.toString();
		const password = formData.get('password')?.toString();

		// Validate required fields
		if (!email || !password) {
			console.log('Validation failed: Missing email or password');
			return fail(400, { error: 'Veuillez remplir tous les champs.' });
		}

		// Connexion via Supabase Auth
		console.log('Attempting Supabase signInWithPassword');
		const { data: signInData, error: signInError } = await supabase.auth.signInWithPassword({
			email,
			password
		});

		if (signInError) {
			console.error('SignIn error:', JSON.stringify(signInError, null, 2));
			return fail(400, { error: signInError.message });
		}

		// Vérifier que l'utilisateur est connecté
		if (!signInData.user) {
			console.error('No user returned by signIn');
			return fail(500, { error: 'Erreur lors de la connexion de l’utilisateur' });
		}

		// Récupérer le profil utilisateur
		console.log('Fetching user profile');
		const { data: profileData, error: profileError } = await supabase
			.from('user_profiles')
			.select('*')
			.eq('id', signInData.user.id)
			.single();

		if (profileError) {
			console.error('Profile fetch error:', JSON.stringify(profileError, null, 2));
			return fail(500, { error: profileError.message });
		}

		console.log('User logged in successfully:', JSON.stringify(profileData, null, 2));
		console.log('Throwing redirect to /ma-veille');
		throw redirect(302, '/ma-veille');
	}
};

--- End of File ---

--- File Path ---
frontend/src/routes/api/toggle-article-like/+server.ts

// src/routes/api/toggle-article-like/+server.ts
import { error, json } from '@sveltejs/kit';

export const POST = async ({ request, locals: { supabase, safeGetSession } }) => {
	// 1. Check Authentication
	const { user } = await safeGetSession();
	if (!user) {
		throw error(401, 'Unauthorized');
	}

	// 2. Get Article ID from request body
	let articleId: number;
	try {
		const body = await request.json();
		if (!body || typeof body.articleId !== 'number') {
			throw new Error('Missing or invalid articleId');
		}
		articleId = body.articleId;
	} catch (e: any) {
		throw error(400, `Bad Request: ${e.message || 'Invalid JSON'}`);
	}

	// 3. Attempt to DELETE the like first
	console.log(`User ${user.id} toggling like for article ${articleId}. Attempting delete...`);
	const { count: deleteCount, error: deleteError } = await supabase
		.from('article_likes')
		.delete({ count: 'exact' }) // Request the count of deleted rows
		.eq('user_id', user.id)
		.eq('article_id', articleId);

	if (deleteError) {
		console.error(`Database error deleting like for user ${user.id}, article ${articleId}:`, deleteError);
		throw error(500, `Database error: ${deleteError.message}`);
	}

	// 4. If DELETE affected 0 rows, it means it wasn't liked -> INSERT
	if (deleteCount === 0) {
		console.log(`Article ${articleId} was not liked. Attempting insert...`);
		const { error: insertError } = await supabase
            .from('article_likes')
            .insert({
                user_id: user.id,
                article_id: articleId,
                // created_at defaults to now()
            });

		if (insertError) {
			console.error(`Database error inserting like for user ${user.id}, article ${articleId}:`, insertError);
            // Handle potential race conditions or other errors (e.g., FK violation)
            if (insertError.code === '23503') { throw error(404, 'Article not found'); }
            if (insertError.code === '23505') { /* Unique violation - likely race condition, treat as success? */ console.warn("Race condition likely on like insert"); }
            else { throw error(500, `Database error: ${insertError.message}`); }
		} else {
            // Successfully inserted (liked)
            return json({ success: true, liked: true, message: 'Article liked' }, { status: 201 }); // 201 Created
        }
	}

	// 5. If DELETE affected > 0 rows, it means it was unliked
    if (deleteCount && deleteCount > 0) {
        console.log(`Article ${articleId} successfully unliked.`);
	    return json({ success: true, liked: false, message: 'Article unliked' }, { status: 200 }); // 200 OK
    }

    // Fallback/safety net - should ideally not be reached if deleteCount is exact
    return json({ success: true, message: 'Like status toggled (check state)' }, { status: 200 });
};
--- End of File ---

--- File Path ---
frontend/src/routes/api/get_sub_disciplines/+server.js

// src/routes/api/get_sub_disciplines/+server.js
import { error, json } from '@sveltejs/kit';

export const GET = async ({ url, locals: { supabase, safeGetSession } }) => {
	console.log('API: /api/get_sub_disciplines called');

    // 1. Get Query Parameters
    const disciplineName = url.searchParams.get('disciplineName');
    const mode = url.searchParams.get('mode') || 'user'; // Default to 'user' mode

    if (!disciplineName) {
		console.error('API Error: Missing disciplineName query parameter');
		throw error(400, 'Missing required query parameter: disciplineName');
	}
    console.log(`API: Requested discipline name: ${disciplineName}, Mode: ${mode}`);

    // 2. Authentication (Required ONLY for 'user' mode)
    const { user } = await safeGetSession();
    const userId = user?.id;
     console.log(`API: User authenticated: ${userId ?? 'No'}`);

    if (mode === 'user' && !userId) {
         console.error('API Error: Unauthorized access to get_sub_disciplines in user mode');
         // If user mode is explicitly requested but user isn't logged in, return error or empty?
         // Returning empty might be safer for the component.
         return json([]);
         // throw error(401, 'Authentication required for user-specific sub-disciplines.');
    }


	try {
        // 3. Find the ID of the requested Discipline
        const { data: disciplineData, error: disciplineError } = await supabase
            .from('disciplines')
            .select('id')
            .eq('name', disciplineName)
            .maybeSingle();

        if (disciplineError) throw error(500, `Database error: ${disciplineError.message}`);
        if (!disciplineData) {
             console.warn(`API Warn: Discipline not found: ${disciplineName}`);
             return json([]); // Return empty if the discipline name doesn't exist
        }
        const disciplineId = disciplineData.id;
        console.log(`API: Found discipline ID: ${disciplineId}`);

        // 4. Fetch sub-disciplines based on mode
        let subDisciplinesToReturn = [];

        if (mode === 'public' || !userId) {
            // --- Public Mode OR User Not Logged In: Return ALL sub-disciplines ---
            console.log(`API: Fetching ALL subs for discipline ${disciplineId} (Mode: ${mode}, User: ${userId ?? 'None'})`);
            const { data: allSubsData, error: allSubsError } = await supabase
                .from('sub_disciplines')
                .select('id, name')
                .eq('discipline_id', disciplineId)
                .order('name', { ascending: true });

            if (allSubsError) throw error(500, `DB error fetching all subs: ${allSubsError.message}`);
            subDisciplinesToReturn = allSubsData || [];

        } else {
            // --- User Mode AND User Logged In: Apply subscription logic ---
            console.log(`API: Fetching USER-SPECIFIC subs for user ${userId}, discipline ${disciplineId}`);
            const { data: userSubs, error: subsError } = await supabase
                .from('user_subscriptions')
                .select('sub_discipline_id')
                .eq('user_id', userId)
                .eq('discipline_id', disciplineId);

            if (subsError) throw error(500, `Database error: ${subsError.message}`);

            if (!userSubs || userSubs.length === 0) {
                console.warn(`API Warn: User ${userId} requested subs for discipline ${disciplineId} but has no subscriptions for it.`);
                return json([]); // Return empty as they are not subscribed
            }

            const hasSpecificSubs = userSubs.some(sub => sub.sub_discipline_id !== null);
            const subscribedToMain = userSubs.some(sub => sub.sub_discipline_id === null);

            if (hasSpecificSubs) {
                // Return ONLY specifically subscribed subs
                const specificSubIds = userSubs.map(sub => sub.sub_discipline_id).filter(id => id !== null);
                console.log(`API: User subscribed to specific subs. Fetching IDs: ${specificSubIds}`);
                if (specificSubIds.length > 0) {
                    const { data: specificSubsData, error: specificSubsError } = await supabase
                        .from('sub_disciplines').select('id, name').in('id', specificSubIds).order('name');
                    if (specificSubsError) throw error(500, `DB error fetching specific subs: ${specificSubsError.message}`);
                    subDisciplinesToReturn = specificSubsData || [];
                }
            } else if (subscribedToMain) {
                // Return ALL subs for the main discipline
                console.log(`API: User subscribed to main ${disciplineName}. Fetching ALL subs.`);
                 const { data: allSubsData, error: allSubsError } = await supabase
                    .from('sub_disciplines').select('id, name').eq('discipline_id', disciplineId).order('name');
                 if (allSubsError) throw error(500, `DB error fetching all subs: ${allSubsError.message}`);
                 subDisciplinesToReturn = allSubsData || [];
            }
            // If neither condition met (shouldn't happen if userSubs has data), returns empty.
        }

        console.log(`API: Returning ${subDisciplinesToReturn.length} sub-disciplines for ${disciplineName} (Mode: ${mode})`);
        return json(subDisciplinesToReturn);

	} catch (err) {
		 // Handle errors
         console.error('API Error in /api/get_sub_disciplines:', err);
         if (err && typeof err === 'object' && 'status' in err) throw err;
         throw error(500, 'An internal server error occurred.');
	}
};
--- End of File ---

--- File Path ---
frontend/src/routes/api/update-profile-and-subscriptions/+server.ts

// src/routes/api/update-profile-and-subscriptions/+server.ts
import { json } from '@sveltejs/kit';
import type { RequestEvent } from './$types';

interface Subscription {
	discipline_id: number;
	sub_discipline_id: number;
}

export async function POST({ request, locals }: RequestEvent) {
	const { session } = locals;
	if (!session?.user) {
		console.error("No session or user found");
		return json({ error: 'Unauthorized' }, { status: 401 });
	}

	try {
		const { profile, subscriptions } = await request.json();
		console.log("Received update request:", {
			userId: session.user.id,
			profile,
			subscriptions
		});

		// Validate the data
		if (!profile || !subscriptions) {
			console.error("Missing required data:", { profile, subscriptions });
			return json({ error: 'Missing required data' }, { status: 400 });
		}

		// Update user profile
		console.log("Updating user profile:", profile);
		const { error: profileError } = await locals.supabase
			.from('user_profiles')
			.update(profile)
			.eq('id', session.user.id);

		if (profileError) {
			console.error("Profile update error:", profileError);
			throw profileError;
		}

		// Update subscriptions
		console.log("Updating subscriptions:", subscriptions);
		// First, delete existing subscriptions
		const { error: deleteError } = await locals.supabase
			.from('user_subscriptions')
			.delete()
			.eq('user_id', session.user.id);

		if (deleteError) {
			console.error("Delete subscriptions error:", deleteError);
			throw deleteError;
		}

		// Then insert new subscriptions
		// Create a Set to track unique discipline_ids
		const disciplineIds = new Set(subscriptions.map((sub: Subscription) => sub.discipline_id));
		
		// Create subscription records including both sub-disciplines and main disciplines
		const subscriptionRecords = [
			// Add records for each sub-discipline
			...subscriptions.map((sub: Subscription) => ({
				user_id: session.user.id,
				discipline_id: sub.discipline_id,
				sub_discipline_id: sub.sub_discipline_id
			})),
			// Add records for main disciplines with null sub_discipline_id
			...Array.from(disciplineIds).map(disciplineId => ({
				user_id: session.user.id,
				discipline_id: disciplineId,
				sub_discipline_id: null
			}))
		];

		console.log("Inserting new subscriptions:", subscriptionRecords);
		const { error: insertError } = await locals.supabase
			.from('user_subscriptions')
			.insert(subscriptionRecords);

		if (insertError) {
			console.error("Insert subscriptions error:", insertError);
			throw insertError;
		}

		console.log("Update successful");
		return json({ success: true });
	} catch (error) {
		console.error("Update error:", error);
		return json({ error: 'Failed to update profile and subscriptions' }, { status: 500 });
	}
}
--- End of File ---

--- File Path ---
frontend/src/routes/api/submit-feedback/+server.ts

import { error, json } from '@sveltejs/kit';
import type { RequestEvent } from './$types';

export async function POST({ request, locals: { supabase, safeGetSession } }: RequestEvent) {
	const { user } = await safeGetSession();
	if (!user) {
		throw error(401, 'Authentication required to submit feedback.');
	}

	let feedbackData;
	try {
		feedbackData = await request.json();
		if (typeof feedbackData !== 'object' || feedbackData === null) {
			throw new Error('Invalid data format');
		}
	} catch (e) {
		console.error("Error parsing feedback JSON:", e);
		throw error(400, 'Bad request: Could not parse feedback data.');
	}

	// Prepare data for insertion (matching table columns)
	const dataToInsert = {
		user_id: user.id,
		content_useful: feedbackData.contentUseful || null,
		format_suitable: feedbackData.formatSuitable || null,
		desired_features: feedbackData.desiredFeatures || null,
		willing_to_pay: feedbackData.willingToPay || null, // Will contain "Oui" or "Non"
		price_suggestion: feedbackData.willingToPay === 'Oui' ? (feedbackData.priceSuggestion || null) : null,
		reason_not_to_pay: feedbackData.willingToPay === 'Non' ? (feedbackData.reasonNotToPay || null) : null,
		improvements: feedbackData.improvements || null,
	};

	try {
		const { error: insertError } = await supabase
			.from('feedback')
			.insert(dataToInsert);

		if (insertError) {
			console.error('Supabase insert error:', insertError);
			throw error(500, `Database error: ${insertError.message}`);
		}

		console.log(`Feedback submitted successfully by user ${user.id}`);
		return json({ message: 'Merci, votre retour a bien été envoyé !' }, { status: 201 });

	} catch (err: any) {
		console.error('Error submitting feedback:', err);
		if (err.status) {
			throw err;
		}
		throw error(500, err.message || 'An unexpected error occurred while saving feedback.');
	}
}
--- End of File ---

--- File Path ---
frontend/src/routes/api/toggle-article-read/+server.ts

// src/routes/api/toggle-article-read/+server.ts
import { error, json } from '@sveltejs/kit';

export const POST = async ({ request, locals: { supabase, safeGetSession } }) => {
	console.log('--- API /api/toggle-article-read START ---'); // Log start

	// 1. Check Authentication
	const { user } = await safeGetSession();
	if (!user) {
        console.error('API Error: User not authenticated');
		throw error(401, 'Unauthorized');
	}
    console.log(`API: Authenticated user ID: ${user.id}`);

	// 2. Get Article ID from request body
	let articleId: number;
	try {
		const body = await request.json();
        console.log('API: Received request body:', body); // Log received body
		if (!body || typeof body.articleId !== 'number' || isNaN(body.articleId)) { // Add NaN check
			throw new Error('Missing or invalid articleId');
		}
		articleId = body.articleId;
        console.log(`API: Parsed articleId: ${articleId}`);
	} catch (e: any) {
        console.error('API Error: Failed to parse request body:', e);
		throw error(400, `Bad Request: ${e.message || 'Invalid JSON'}`);
	}

	// 3. Check current read status
	console.log(`API: Checking read status for user ${user.id}, article ${articleId}...`);
	const { data: existingRead, error: checkError } = await supabase
		.from('article_read')
		.select('user_id', { count: 'exact' }) // Get count to be sure
		.eq('user_id', user.id)
		.eq('article_id', articleId);
		// Removed maybeSingle, checking count is safer

	if (checkError) {
		console.error(`API DB Error (Check Read Status):`, checkError);
		throw error(500, `Database error: ${checkError.message}`);
	}

    const isCurrentlyRead = existingRead && existingRead.length > 0; // Check if array has items
    console.log(`API: Article ${articleId} is currently read: ${isCurrentlyRead}`);

	// 4. Perform INSERT or DELETE based on current status
	if (isCurrentlyRead) {
		// --- Article is currently READ, so MARK AS UNREAD (DELETE) ---
		console.log(`API: Deleting read record for article ${articleId}...`);
		const { error: deleteError } = await supabase
			.from('article_read')
			.delete()
			.eq('user_id', user.id)
			.eq('article_id', articleId);

		if (deleteError) {
			console.error(`API DB Error (Delete Read Status):`, deleteError);
			throw error(500, `Database error: ${deleteError.message}`);
		}
		console.log(`API: Successfully marked article ${articleId} as UNREAD.`);
		console.log('--- API /api/toggle-article-read END ---');
		return json({ success: true, read: false, message: 'Article marked as unread' }, { status: 200 });

	} else {
		// --- Article is currently UNREAD, so MARK AS READ (INSERT) ---
		console.log(`API: Inserting read record for article ${articleId}...`);
		const { error: insertError } = await supabase
			.from('article_read')
			.insert({
				user_id: user.id,
				article_id: articleId,
			});

		if (insertError) {
			console.error(`API DB Error (Insert Read Status):`, insertError);
			if (insertError.code === '23503') { // Foreign key violation likely means articleId doesn't exist
                console.error(`API Error Detail: Article ID ${articleId} might not exist.`);
				throw error(404, 'Article not found');
			}
			throw error(500, `Database error: ${insertError.message}`);
		}
		console.log(`API: Successfully marked article ${articleId} as READ.`);
		console.log('--- API /api/toggle-article-read END ---');
		return json({ success: true, read: true, message: 'Article marked as read' }, { status: 201 }); // 201 Created
	}
};
--- End of File ---

--- File Path ---
frontend/src/routes/api/get_articles_my_veille/+server.js

// src/routes/api/get_articles_my_veille/+server.ts
import { error, json } from "@sveltejs/kit";

export const GET = async ({ url, locals: { supabase, safeGetSession } }) => {
    // --- Read parameters ---
    const specialty = url.searchParams.get('specialty'); // Might be empty or "__ALL__" if sent from frontend
    const subDiscipline = url.searchParams.get('subDiscipline');
    const offset = parseInt(url.searchParams.get('offset') || '0');
    const search = url.searchParams.get('search');
    const { user } = await safeGetSession();
    const userId = user?.id ?? null;

    // Treat empty specialty as NULL for the RPC call
    const disciplineNameToRPC = (!specialty || specialty === '__ALL__') ? null : specialty; // <<< Handle "All"

    // Sub-discipline only makes sense if a main discipline is selected
    const subDisciplineToRPC = disciplineNameToRPC ? (subDiscipline || null) : null; // <<< Nullify sub if discipline is null

    console.log(`Calling RPC get_all_articles_sub_disciplines with: discipline=${disciplineNameToRPC}, sub_discipline=${subDisciplineToRPC}, offset=${offset}, search=${search || null}, user=${userId}`);

    const { data: articlesData, error: rpcError } = await supabase.rpc(
        'get_all_articles_sub_disciplines',
        {
            p_discipline_name: disciplineNameToRPC, // Pass null if "All"
            p_sub_discipline_name: subDisciplineToRPC,
            p_offset: offset,
            p_search_term: search || null,
            p_user_id: userId
        }
    );

    if (rpcError) {
        console.error('Error calling RPC get_all_articles_sub_disciplines:', rpcError);
        throw error(500, `Database RPC error: ${rpcError.message}`);
    }

    return json({ data: articlesData || [], error: null });
}
--- End of File ---

--- File Path ---
frontend/src/routes/api/toggle-article-thumbs-up/+server.ts

// src/routes/api/toggle-article-thumbs-up/+server.ts
import { error, json } from '@sveltejs/kit';

export const POST = async ({ request, locals: { supabase, safeGetSession } }) => {
	// 1. Check Authentication
	const { user } = await safeGetSession();
	if (!user) {
		throw error(401, 'Unauthorized');
	}

	// 2. Get Article ID from request body
	let articleId: number;
	try {
		const body = await request.json();
		if (!body || typeof body.articleId !== 'number' || isNaN(body.articleId)) {
			throw new Error('Missing or invalid articleId');
		}
		articleId = body.articleId;
	} catch (e: any) {
		throw error(400, `Bad Request: ${e.message || 'Invalid JSON'}`);
	}

	// 3. Attempt to DELETE the thumbs-up first
	console.log(`User ${user.id} toggling thumbs-up for article ${articleId}. Attempting delete...`);
	const { count: deleteCount, error: deleteError } = await supabase
		.from('article_thumbs_up')
		.delete({ count: 'exact' }) // Request the count of deleted rows
		.eq('user_id', user.id)
		.eq('article_id', articleId);

	if (deleteError) {
		console.error(`Database error deleting thumbs-up for user ${user.id}, article ${articleId}:`, deleteError);
		throw error(500, `Database error: ${deleteError.message}`);
	}

	// 4. If DELETE affected 0 rows, it means it wasn't thumbed-up -> INSERT
	if (deleteCount === 0) {
		console.log(`Article ${articleId} was not thumbed-up. Attempting insert...`);
		const { error: insertError } = await supabase
            .from('article_thumbs_up')
            .insert({
                user_id: user.id,
                article_id: articleId,
                // thumbed_up_at defaults to now()
            });

		if (insertError) {
			console.error(`Database error inserting thumbs-up for user ${user.id}, article ${articleId}:`, insertError);
            // Handle potential race conditions or other errors (e.g., FK violation)
            if (insertError.code === '23503') { throw error(404, 'Article not found'); }
            if (insertError.code === '23505') { /* Unique violation - likely race condition, treat as success? */ console.warn("Race condition likely on thumbs-up insert"); }
            else { throw error(500, `Database error: ${insertError.message}`); }
		} else {
            // Successfully inserted (thumbed-up)
            return json({ success: true, thumbed_up: true, message: 'Article thumbed up' }, { status: 201 }); // 201 Created
        }
	}

	// 5. If DELETE affected > 0 rows, it means it was un-thumbed-up
    if (deleteCount && deleteCount > 0) {
        console.log(`Article ${articleId} successfully un-thumbed-up.`);
	    return json({ success: true, thumbed_up: false, message: 'Article thumbed down' }, { status: 200 }); // 200 OK (or 204 No Content if preferred)
    }

    // Fallback/safety net - should ideally not be reached if deleteCount is exact
    console.warn(`Unexpected state after toggle for article ${articleId}, user ${user.id}. Delete count was ${deleteCount}`);
    return json({ success: true, message: 'Thumbs-up status toggled (check state)' }, { status: 200 });
};
--- End of File ---

--- File Path ---
frontend/src/routes/api/create-donation-intent/+server.ts

import { env } from '$env/dynamic/private';
import type { RequestEvent } from '@sveltejs/kit';
import { error, json } from '@sveltejs/kit';
import Stripe from 'stripe';

const stripeSecretKey = env.STRIPE_SECRET_KEY || process.env.STRIPE_SECRET_KEY;

if (!stripeSecretKey) {
    console.error("Stripe configuration error: Missing secret key.");
}

const stripe = new Stripe(stripeSecretKey!, {
    apiVersion: '2025-03-31.basil', // Use the latest supported API version
});

export async function POST({ request, locals: { supabase, safeGetSession } }: RequestEvent) {
    const { user } = await safeGetSession();
    if (!stripeSecretKey) {
        throw error(500, "Server configuration error: Stripe details not set.");
    }

    try {
        const { amount, paymentMethodType } = await request.json(); // Expect amount in cents AND paymentMethodType

        // --- Validate Amount ---
        if (typeof amount !== 'number' || !Number.isInteger(amount) || amount < 50) { // Min 0.50 EUR
             throw error(400, 'Montant invalide fourni (min 0.50 €).');
        }

        // --- Validate Payment Method Type ---
        const allowedTypes = ['card', 'sepa_debit']; // Explicitly define allowed types for intent creation
        if (!paymentMethodType || !allowedTypes.includes(paymentMethodType)) {
            // Note: Apple/Google Pay will use the 'card' type intent.
            // We only need specific types for methods requiring them, like SEPA.
            // If the request is for wallets, the frontend should request 'card'.
             console.warn(`Invalid or missing paymentMethodType requested: ${paymentMethodType}. Defaulting to 'card' for wallets or unspecified.`);
             // We will let 'card' be the default if not 'sepa_debit' for simplicity now.
             // More robust validation could reject unknown types.
        }

        const intentParams = {
            amount: amount,
            currency: 'eur',
            description: `Don ponctuel (${paymentMethodType}) pour Veille Médicale`,
            // --- Set payment_method_types based on request ---
            payment_method_types: [paymentMethodType], // e.g., ['card'] or ['sepa_debit']
             // If using SEPA, you might need setup_future_usage for mandates
            ...(paymentMethodType === 'sepa_debit' && { setup_future_usage: 'off_session' }),
            metadata: {
                user_id: user?.id || null,
                donation_type: 'one-time',
                intended_method: paymentMethodType // Store intended method
            },
        };

        // --- Create the specific Payment Intent ---
        console.log(`Creating PaymentIntent for amount: ${amount} cents, type: ${paymentMethodType}`);
        const paymentIntent = await stripe.paymentIntents.create(intentParams);

        if (!paymentIntent.client_secret) {
             throw new Error('Could not retrieve client secret from Payment Intent.');
        }

        console.log(`PaymentIntent created successfully: ${paymentIntent.id} (Type: ${paymentMethodType})`);
        return json({
            clientSecret: paymentIntent.client_secret
        });

    } catch (err: unknown) {
        console.error("Stripe API Error:", err);
        if (err instanceof Stripe.errors.StripeError) {
             throw error(err.statusCode || 500, `Stripe Error: ${err.message}`);
        } else if (err && typeof err === 'object' && 'status' in err && err.status === 400) {
             throw error(400, (err as any).body?.message || 'Bad Request');
        } else {
             throw error(500, `Error creating payment intent: ${err instanceof Error ? err.message : 'Unknown server error'}`);
        }
    }
}
--- End of File ---

--- File Path ---
frontend/src/routes/api/get-liked-articles/+server.ts

// src/routes/api/get-liked-articles/+server.ts
import { error, json } from "@sveltejs/kit";

export const GET = async ({ url, locals: { supabase, safeGetSession } }) => {
    // --- Get User ID (Required) ---
    const { user } = await safeGetSession();
    if (!user) {
        throw error(401, 'Unauthorized');
    }
    const userId = user.id;

    // --- Read parameters ---
    const offset = parseInt(url.searchParams.get('offset') || '0');
    const search = url.searchParams.get('search');
    const specialty = url.searchParams.get('specialty');        // <<< NEW: Discipline filter
    const subDiscipline = url.searchParams.get('subDiscipline'); // <<< NEW: Sub-discipline filter

    // Treat empty specialty as NULL for the RPC call
    const disciplineNameToRPC = (!specialty || specialty === '__ALL__') ? null : specialty; // <<< Handle "All"
    const subDisciplineToRPC = disciplineNameToRPC ? (subDiscipline || null) : null; // <<< Nullify sub if discipline is null

    // --- Call the UPDATED RPC function ---
    console.log(`Calling RPC get_liked_articles with: user=${userId}, discipline=${disciplineNameToRPC}, subDiscipline=${subDisciplineToRPC}, offset=${offset}, search=${search || null}`);

    const { data: articlesData, error: rpcError } = await supabase.rpc(
        'get_liked_articles', // Still calling the same named RPC, but it's the *updated* version
        {
            p_user_id: userId,
            p_discipline_name: disciplineNameToRPC, // Pass null if "All"
            p_sub_discipline_name: subDisciplineToRPC,
            p_offset: offset,
            p_search_term: search || null
        }
    );

    // --- Handle RPC errors ---
    if (rpcError) {
         console.error('Error calling RPC get_liked_articles:', rpcError);
         throw error(500, `Database RPC error: ${rpcError.message}`);
    }

    // --- Return the data ---
    console.log('RPC Response Data (Liked Articles):', articlesData);
    return json({
        data: articlesData || [],
        error: null
    });
}
--- End of File ---

--- File Path ---
frontend/src/routes/api/mark-article-read/+server.ts

// src/routes/api/mark-article-read/+server.ts
import { error, json } from '@sveltejs/kit';

export const POST = async ({ request, locals: { supabase, safeGetSession } }) => {
	// 1. Check Authentication
	const { user } = await safeGetSession();
	if (!user) {
		throw error(401, 'Unauthorized'); // User must be logged in
	}

	// 2. Get Article ID from request body
	let articleId: number;
	try {
		const body = await request.json();
		if (!body || typeof body.articleId !== 'number') {
			throw new Error('Missing or invalid articleId in request body');
		}
		articleId = body.articleId;
	} catch (e: any) {
		console.error('Error parsing request body:', e);
		throw error(400, `Bad Request: ${e.message || 'Invalid JSON'}`);
	}

	// 3. Perform Upsert operation
	console.log(`User ${user.id} marking article ${articleId} as read.`);

	const { error: dbError } = await supabase
        .from('article_read')
        .upsert(
            {
                user_id: user.id,
                article_id: articleId,
            },
            {
                ignoreDuplicates: true,
            }
        );

	// 4. Handle Database Errors
	if (dbError) {
		console.error(`Database error marking article read for user ${user.id}, article ${articleId}:`, dbError);
		// Check for specific errors if needed (e.g., foreign key violation if articleId is invalid)
		if (dbError.code === '23503') { // Foreign key violation
             throw error(404, 'Article not found');
        }
		throw error(500, `Database error: ${dbError.message}`);
	}

	// 5. Return Success Response
	return json({ success: true, message: 'Article marked as read' }, { status: 200 }); // 200 OK for upsert success
    // Use 201 Created if you only INSERTED and want to signify resource creation
};
--- End of File ---

--- File Path ---
frontend/src/routes/api/create-payment-intent/+server.js

// src/routes/api/create-payment-intent/+server.js
// OR RENAME TO: src/routes/api/create-subscription/+server.js (and update fetch path in frontend)

import { env } from '$env/dynamic/private';
import { error, json } from '@sveltejs/kit';
import Stripe from 'stripe';

// --- IMPORTANT: Use your SECRET key here ---
const stripeSecretKey = env.STRIPE_SECRET_KEY || process.env.STRIPE_SECRET_KEY; // Fallback for different env setups
const monthlyPriceId = env.STRIPE_MONTHLY_PRICE_ID || process.env.STRIPE_MONTHLY_PRICE_ID;
const yearlyPriceId = env.STRIPE_YEARLY_PRICE_ID || process.env.STRIPE_YEARLY_PRICE_ID;

if (!stripeSecretKey || !monthlyPriceId || !yearlyPriceId) {
    console.error("Stripe configuration error: Missing secret key or price IDs in environment variables.");
    // Avoid throwing here during module load, handle in POST
}

const stripe = new Stripe(stripeSecretKey, {
    apiVersion: '2023-10-16', // Use a specific API version
});

export async function POST({ request }) {
    // --- Check for missing config on request ---
    if (!stripeSecretKey || !monthlyPriceId || !yearlyPriceId) {
        console.error("Stripe configuration missing on request.");
        throw error(500, "Server configuration error: Stripe details not set.");
    }

    try {
        const { plan } = await request.json(); // Read the plan identifier ('monthly' or 'yearly')

        let priceId;
        if (plan === 'monthly') {
            priceId = monthlyPriceId;
        } else if (plan === 'yearly') {
            priceId = yearlyPriceId;
        } else {
            throw error(400, 'Invalid plan selected.'); // Bad request
        }

        // --- 1. Create a Stripe Customer ---
        // In a real app, you'd check if a customer exists for logged-in user
        // You might pass user email/ID from a session/JWT here
        const customer = await stripe.customers.create({
            // email: userEmail, // Example: associate with user email
            // name: userName, // Example
            description: `Customer for ${plan} plan`, // Optional
        });

        // --- 2. Create the Subscription ---
        const subscription = await stripe.subscriptions.create({
            customer: customer.id,
            items: [{ price: priceId }],
            payment_behavior: 'default_incomplete', // Important: Wait for payment method via Elements
            payment_settings: { save_default_payment_method: 'on_subscription' }, // Save PM for future renewals
            expand: ['latest_invoice.payment_intent'], // Expand to get the PI for the first payment
            // Add trial period if needed:
            // trial_period_days: 14,
        });

        // --- 3. Extract Client Secret ---
        // The client secret is needed for the *first* payment confirmation
        const clientSecret = subscription.latest_invoice.payment_intent.client_secret;

        if (!clientSecret) {
             throw new Error('Could not retrieve client secret from subscription.');
        }

        return json({
            clientSecret: clientSecret,
            subscriptionId: subscription.id // Optionally return subscription ID if needed on client
        });

    } catch (err) {
        console.error("Stripe API Error:", err);
        // Distinguish Stripe errors from other errors
        if (err instanceof Stripe.errors.StripeError) {
             throw error(err.statusCode || 500, `Stripe Error: ${err.message}`);
        } else if (err.status === 400) { // Handle specific thrown errors like 'Invalid plan'
             throw error(400, err.body.message || 'Bad Request');
        } else {
             throw error(500, `Error creating subscription: ${err.message || 'Unknown server error'}`);
        }
    }
}
--- End of File ---

--- File Path ---
frontend/src/routes/api/committee-application/+server.ts

import { error, json } from '@sveltejs/kit';
import type { RequestEvent } from './$types';

export async function POST({ request, locals: { supabase, safeGetSession } }: RequestEvent) {
    // Get user session - useful if you want to link application to a user later
    // const { user } = await safeGetSession();
    // We don't strictly need the user to be logged in based on the current RLS policy

    let formData;
    try {
        formData = await request.json();
        if (typeof formData !== 'object' || formData === null) {
            throw new Error('Invalid data format');
        }
        // Basic validation for required fields
        if (!formData.prenom || !formData.nom || !formData.statut || !formData.specialite || !formData.centre) {
             throw error(400, 'Missing required fields in application data.');
        }

    } catch (e: any) {
        console.error("Error parsing application JSON:", e);
        if (e.status === 400) throw e; // Re-throw specific validation error
        throw error(400, 'Bad request: Could not parse application data.');
    }

    // Prepare data for insertion (matching table columns)
    const dataToInsert = {
        // user_id: user?.id || null, // Uncomment if you want to link to logged-in user
        first_name: formData.prenom,
        last_name: formData.nom,
        status: formData.statut,
        specialty: formData.specialite,
        sub_specialty: formData.surSpecialite || null, // Handle optional field
        practice_center: formData.centre,
        // created_at is handled by the database default
    };

    try {
        const { error: insertError } = await supabase
            .from('committee_applications')
            .insert(dataToInsert);

        if (insertError) {
            console.error('Supabase insert error:', insertError);
            // Provide a more generic error to the client
            throw error(500, `Database error occurred.`);
        }

        console.log(`Committee application submitted successfully: ${formData.prenom} ${formData.nom}`);
        // Customize success message
        return json({ message: 'Votre candidature a bien été envoyée. Merci !' }, { status: 201 }); // 201 Created

    } catch (err: any) {
        // Catch errors thrown from validation or Supabase
        console.error('Error submitting committee application:', err);
        if (err.status) {
            // Re-throw SvelteKit errors (like the 400 or 500)
            throw err;
        }
        // Generic fallback for unexpected errors
        throw error(500, err.message || 'An unexpected error occurred while saving the application.');
    }
}
--- End of File ---

--- File Path ---
frontend/src/routes/+page.svelte

<script lang="ts">
	import { goto } from '$app/navigation';
	import * as Select from '$lib/components/ui/select/index.js';
	import userProfileStore from '$lib/stores/user';
	import EmbaseSvg from '../lib/svg/EmbaseSvg.svelte';

	// Récupération des props avec $props rune
	const { data } = $props();

	// Définir les variables réactives avec $state
	let articles = $state(data.articles || []);
	let specialties = $state(data.specialties || []);
	let searchQuery = $state('');
	let selectedSpecialty = $state(data.specialties?.[0] || ''); // Fallback to empty string if undefined
	let articleSection = $state(null);
	let immersiveArticle = $state(null);
	let isPlaying = $state(false);
	let currentStep = $state(0); // Pour gérer l'affichage progressif des arguments

	// Sort specialties alphabetically on initialization
	specialties = specialties.sort((a, b) => a.localeCompare(b, 'fr', { sensitivity: 'base' }));

	// Compute the display label for the selected specialty
	const triggerContent = $derived(
		specialties.find((s) => s === selectedSpecialty) ?? 'Choisissez une spécialité'
	);

	// Gestion du clic sur le bouton "Ma veille" ou "S'inscrire"
	function handleVeilleClick(event) {
		event.preventDefault();
		if (!$userProfileStore) {
			goto('/signup');
		} else {
			goto('/ma-veille');
		}
	}

	// Fonctions utilitaires pour le formatage
	function formatTitle(title) {
		if (!title) return '';
		const words = title.toLowerCase().split(' ');
		if (words.length === 0) return '';
		words[0] = words[0].charAt(0).toUpperCase() + words[0].slice(1);
		return words.join(' ');
	}

	function parseContent(content) {
		if (!content || typeof content !== 'string') return [];
		const sections = [];
		let currentSection = { emoji: '', title: '', content: [] };
		const lines = content.split('\n');
		let inSection = false;

		for (const line of lines) {
			if (
				line.trim().startsWith('## 📝') ||
				line.trim().startsWith('## 📌') ||
				line.trim().startsWith('## 🧪') ||
				line.trim().startsWith('## 📊') ||
				line.trim().startsWith('## 🩺') ||
				line.trim().startsWith('## 📖')
			) {
				if (inSection && (currentSection.title || currentSection.content.length > 0)) {
					sections.push(currentSection);
				}
				inSection = true;
				const [emoji, ...titleParts] = line
					.trim()
					.replace(/^##\s*/, '')
					.split(' ');
				currentSection = {
					emoji: emoji || '📝',
					title: titleParts.join(' ').trim(),
					content: []
				};
			} else if (line.trim() && inSection) {
				currentSection.content.push(line.trim());
			}
		}
		if (inSection && (currentSection.title || currentSection.content.length > 0)) {
			sections.push(currentSection);
		}
		return sections;
	}

	function extractTitleEmoji(content) {
		if (!content || typeof content !== 'string') return '📝';
		const lines = content.split('\n');
		for (const line of lines) {
			if (
				line.trim().startsWith('# 📝') ||
				line.trim().startsWith('# 📌') ||
				line.trim().startsWith('# 🧪') ||
				line.trim().startsWith('# 📊') ||
				line.trim().startsWith('# 🩺') ||
				line.trim().startsWith('# 📖')
			) {
				const [emoji] = line.trim().split(' ').slice(1);
				return emoji || '📝';
			}
		}
		return '📝';
	}

	function formatDate(publishedAt) {
		if (!publishedAt) return 'Non spécifiée';
		const date = new Date(publishedAt);
		return `${date.getDate().toString().padStart(2, '0')}/${(date.getMonth() + 1).toString().padStart(2, '0')}/${date.getFullYear()}`;
	}

	function openImmersive(article) {
		immersiveArticle = article;
		document.body.classList.add('overflow-hidden');
	}

	function closeImmersive() {
		immersiveArticle = null;
		document.body.classList.remove('overflow-hidden');
	}

	// Filtrer les articles de manière réactive avec $effect
	$effect(() => {
		let filtered = data.articles || [];
		if (searchQuery) {
			filtered = filtered.filter((article) =>
				article.title.toLowerCase().includes(searchQuery.toLowerCase())
			);
		}
		if (selectedSpecialty) {
			filtered = filtered.filter((article) => article.disciplines.includes(selectedSpecialty));
		}
		articles = filtered;
	});

	function toggleAudio() {
		const audio = document.getElementById('myAudio');
		if (isPlaying) {
			audio.pause();
		} else {
			audio.play();
		}
		isPlaying = !isPlaying;
	}

	// Avancer automatiquement ou manuellement à l'étape suivante après 3 secondes
	$effect(() => {
		if (isPlaying && currentStep < 3) {
			const timer = setTimeout(() => {
				currentStep += 1;
			}, 3000); // 3 secondes par argument
			return () => clearTimeout(timer);
		}
	});
</script>

<main class="relative flex min-h-screen flex-col bg-black text-white">
	<div class="relative flex-auto space-y-8 px-4 py-12 sm:mx-[10vw] sm:px-0 md:py-16">
		<div
			class="flex max-w-full flex-col items-center gap-8 text-center md:max-w-[70%] md:items-start md:text-left"
		>
			<!-- Title with Highlighted Keywords -->
			<h1 class="font-sans text-2xl leading-tight font-bold text-gray-100 sm:text-3xl">
				<span class="font-bold text-teal-500">L’outil de veille scientifique</span> <br /> conçu
				pour les <span class="font-bold text-teal-500">professionnels de santé</span>
			</h1>

			<!-- Core Message -->
			<div class="flex flex-col space-y-4 text-center md:text-left">
				<p class="font-sans text-lg leading-tight font-bold text-gray-100 sm:text-xl">
					Trop d’<span class="font-bold text-teal-500">études scientifiques</span>, pas assez de temps pour les lire ?
				</p>
				<!-- Audio Button (Subtle and Professional) -->
			<div class="my-6 mb-8 flex justify-center md:justify-start">
				<audio id="myAudio" preload="auto">
					<source src="/audio/welcome.m4a" type="audio/mp4" />
					Votre navigateur ne supporte pas l'élément audio.
				</audio>
				<button
					on:click={toggleAudio}
					class="play-button group relative flex items-center gap-2 rounded-full bg-gradient-to-r to-blue-600 px-5 py-2 font-medium text-teal-600 text-white shadow-md transition-all duration-300 hover:shadow-lg"
				>
					<span class="text-lg transition-transform duration-300 group-hover:scale-110">
						{isPlaying ? '⏸' : '▶'}
					</span>
					<span>{isPlaying ? 'Pause' : 'Découvrez Veille en 1 min'}</span>
				</button>
			</div>
				<p class="text-lg font-medium text-gray-100 sm:text-xl">
					Avec <span class="font-bold text-teal-500">Veille</span>, restez à la pointe de votre
					<span class="font-bold text-teal-500">spécialité</span>.
				</p>
				<p class="text-base leading-relaxed text-gray-300 sm:text-lg">
					Recevez un <span class="font-bold text-teal-500">résumé clair et concis</span> des
					meilleures études récentes dans votre domaine, à votre rythme, avec un
					<span class="font-bold text-teal-500">accès direct à l’article original</span>.
				</p>
			</div>


			<!-- Arguments List -->
			<!-- <ul class="space-y-3 text-center md:text-left">
				<li
					class="flex items-center justify-center gap-3 text-base text-gray-300 sm:text-lg md:justify-start"
				>
					<span class="text-xl text-teal-400">✔</span>
					Choisissez vos disciplines
				</li>
				<li
					class="flex items-center justify-center gap-3 text-base text-gray-300 sm:text-lg md:justify-start"
				>
					<span class="text-xl text-teal-400">✔</span>
					Paramétrez vos alertes
				</li>
				<li
					class="flex items-center justify-center gap-3 text-base text-gray-300 sm:text-lg md:justify-start"
				>
					<span class="text-xl text-teal-400">✔</span>
					Résumés clairs et accès direct aux articles originaux
				</li>
			</ul> -->

			<!-- CTA Text -->
			<!-- <p
				class="flex items-center justify-center gap-3 text-base text-gray-300 sm:text-lg md:justify-start"
			>
				<span class="text-2xl text-red-400">📩</span>
				3 min/jour pour rester à la pointe de votre spécialité
			</p> -->

			<!-- CTA Button (Sticky on Mobile) -->
			<div class="sticky bottom-4 mt-6 flex w-full justify-center">
				<a
					href={$userProfileStore ? '/ma-veille' : '/signup'}
					on:click={handleVeilleClick}
					class="group flex w-[85%] items-center justify-center gap-2 rounded-full bg-orange-600 px-8 py-3 text-center text-base font-semibold text-white shadow-lg transition-all duration-300 hover:from-blue-600 hover:to-teal-600 hover:shadow-xl sm:w-[60%] md:w-auto md:px-12 md:py-4 md:text-lg"
				>
					<span>
						{$userProfileStore ? 'Accéder à ma veille' : 'S’inscrire maintenant'}
					</span>
					<svg
						class="h-5 w-5 translate-y-[2px] transition-transform duration-300 group-hover:translate-x-2"
						fill="none"
						stroke="currentColor"
						viewBox="0 0 24 24"
						xmlns="http://www.w3.org/2000/svg"
					>
						<path
							stroke-linecap="round"
							stroke-linejoin="round"
							stroke-width="2"
							d="M9 5l7 7m0 0l-7 7m7-7H3"
						/>
					</svg>
				</a>
			</div>
		</div>
	</div>


	<!-- Spécialités et Articles -->
	<div class="relative flex flex-col gap-4 overflow-hidden px-6 py-8 sm:mx-[10vw] sm:px-0">
		<div class="w-full py-12 text-white">
			<div class="flex flex-col gap-6">
				<h2 class="text-3xl font-bold">Découvrez certains de nos articles</h2>

				<!-- Specialty Selection -->
				<!-- <h2 class="mb-4 text-left text-2xl font-bold text-white">1. Choisissez votre spécialité</h2> -->
				<div class="relative w-full max-w-sm">
					<Select.Root type="single" name="selectedSpecialty" bind:value={selectedSpecialty}>
						<Select.Trigger
							class="w-full rounded-lg border-gray-700 bg-gray-800 px-4 py-3 text-sm font-medium text-white shadow-md transition-all duration-300 hover:bg-gray-700 focus:ring-2 focus:ring-teal-500 focus:outline-none"
						>
							{triggerContent}
						</Select.Trigger>
						<Select.Content
							class="scrollbar-thin scrollbar-thumb-teal-500 scrollbar-track-gray-800 max-h-60 overflow-y-auto rounded-lg border border-gray-700 bg-gray-900"
						>
							<Select.Group>
								<Select.GroupHeading class="px-4 py-2 font-semibold text-gray-400"
									>Spécialités</Select.GroupHeading
								>
								{#each specialties as specialty (specialty)}
									<Select.Item
										value={specialty}
										label={specialty}
										class="cursor-pointer px-4 py-2 text-white transition-all duration-200 hover:bg-teal-600 hover:text-white"
									/>
								{/each}
							</Select.Group>
						</Select.Content>
					</Select.Root>
				</div>

				<!-- Selected Specialty Display -->
				<!-- <h2 bind:this={articleSection} class="mb-4 text-left text-2xl font-bold text-white">
					2. Explorez : {selectedSpecialty || 'Toutes'}
				</h2> -->

				<!-- Article List -->
				{#if articles.length === 0}
					<p class="text-gray-400">
						Aucun article disponible pour {selectedSpecialty || 'toutes les spécialités'}.
					</p>
				{:else}
					<ul class="space-y-4">
						{#each articles.slice(0,3) as article}
							<li
								on:click={() => openImmersive(article)}
								class="relative cursor-pointer rounded bg-gray-800 p-4 shadow transition-shadow hover:shadow-xl"
							>
								<h3 class="text-left text-lg font-bold text-white">
									{extractTitleEmoji(article.content)}
									{formatTitle(article.title)}
								</h3>
								{#if article.grade}
									<p class="mt-1 text-sm {article.grade == 'A' ? 'text-green-500' : article.grade == 'B' ? 'text-yellow-400' : article.grade == 'C' ? 'text-orange-400' : 'text-red-400'}">Grade de recommandation : {article.grade}</p>
								{/if}
								<div class="mt-2 flex items-center text-sm text-gray-400">
									<span class="mr-1">{article.journal || 'Inconnu'}</span>
								</div>
								<h3 class="mt-2 text-xs text-gray-400">
									Publié le {formatDate(article.published_at)}
								</h3>
							</li>
						{/each}
					</ul>
				{/if}

				{#if !$userProfileStore}
					<!-- Call to Action avec flèche vers le bas -->
					<div class="mt-8 flex justify-center">
						<a
							href="/signup"
							class="flex flex-col items-center text-orange-600 transition-colors duration-200"
						>
							<span class="text-lg font-semibold">Voir plus</span>
							<svg
								class="mt-3 h-6 w-6 animate-bounce"
								fill="none"
								stroke="currentColor"
								viewBox="0 0 24 24"
								xmlns="http://www.w3.org/2000/svg"
							>
								<path
									stroke-linecap="round"
									stroke-linejoin="round"
									stroke-width="2"
									d="M19 14l-7 7m0 0l-7-7m7 7V3"
								/>
							</svg>
						</a>
					</div>
				{/if}
			</div>
		</div>

		<div
			class="absolute right-0 bottom-0 left-0 h-2 bg-gradient-to-r from-blue-500 via-teal-500 to-transparent opacity-60"
		></div>
	</div>
	<!-- Partenaires -->
	<div class="relative flex flex-col gap-6 overflow-hidden px-6 py-8 sm:mx-[10vw] sm:px-0">
		<h2 class="mb-4 text-left text-2xl font-bold text-white">Nos partenaires</h2>
		<div class="flex flex-wrap items-center justify-start gap-8">
			<a
				href="https://pubmed.ncbi.nlm.nih.gov/"
				target="_blank"
				class="flex flex-col items-center gap-2"
			>
				<img
					src="https://cdn.ncbi.nlm.nih.gov/pubmed/277eb475-38df-4990-a0ee-0080b04e86fc/core/images/pubmed-logo-white.svg"
					alt="PubMed"
					class="h-10 w-auto"
				/>
			</a>
			<a href="https://www.embase.com" target="_blank" class="flex items-center gap-2">
				<EmbaseSvg />
				<span class="text-lg font-medium text-white">Embase</span>
			</a>
			<a href="https://www.cochranelibrary.com" target="_blank" class="flex items-center gap-2">
				<img
					src="https://www.cochrane.org/sites/default/files/public/cochrane-57-old.png"
					alt="Cochrane Library"
					class="h-10 w-auto"
				/>
				<span class="text-lg font-medium text-white">Cochrane Library</span>
			</a>
		</div>
	</div>

	<!-- Modal Immersif -->
	{#if immersiveArticle}
		<div
			class="fixed inset-0 z-[200] flex items-center justify-center bg-black/30 backdrop-blur-sm"
		>
			<div
				class="relative max-h-[90vh] w-full max-w-4xl overflow-y-auto rounded-2xl bg-gray-900 p-8 shadow-2xl"
			>
				<button
					class="absolute top-4 right-4 text-3xl text-gray-400 hover:text-white focus:outline-none"
					on:click={closeImmersive}
				>
					×
				</button>
				<h2 class="mb-4 text-3xl font-bold text-white">
					{extractTitleEmoji(immersiveArticle.content)}
					{formatTitle(immersiveArticle.title)}
				</h2>
				{#if immersiveArticle.grade}
					<p class="mb-2 text-sm {immersiveArticle.grade == 'A' ? 'text-green-500' : immersiveArticle.grade == 'B' ? 'text-yellow-400' : immersiveArticle.grade == 'C' ? 'text-orange-400' : 'text-red-400'}">
						Grade de recommandation : {immersiveArticle.grade}
					</p>
				{/if}
				<div class="mt-2 flex flex-row items-center text-sm">
					<span class="mr-1">{immersiveArticle.journal || 'Inconnu'}</span>
				</div>
				<p class="mt-2 mb-4 text-sm text-gray-400">
					Publié le : {formatDate(immersiveArticle.published_at)}
				</p>
				{#each parseContent(immersiveArticle.content) as section}
					<div class="mb-6">
						<h3 class="mb-2 flex items-center text-lg font-semibold text-white">
							<span class="mr-2">{section.emoji}</span>
							{section.title}
						</h3>
						<ul class="ml-4 list-disc space-y-2 text-gray-300">
							{#each section.content as paragraph}
								<li>{paragraph}</li>
							{/each}
						</ul>
					</div>
				{/each}
				<a href={immersiveArticle.link} target="_blank" class="underline">Accédez à l'article original 🔎</a>
				{#if !$userProfileStore}
					<div class="mt-6 flex justify-center">
						<button
							on:click={() => goto('/login')}
							class="rounded-full bg-orange-600 px-6 py-2 font-semibold text-white shadow-md transition-all duration-200"
						>
							Avez-vous aimé l'article ? Inscrivez-vous !
						</button>
					</div>
				{/if}
			</div>
		</div>
	{/if}
</main>

<style>
	/* Style général */
	button:focus {
		outline: none;
	}
	.animate-bounce {
		animation: bounce 2s infinite;
	}

	@keyframes bounce {
		0%,
		20%,
		50%,
		80%,
		100% {
			transform: translateY(0);
		}
		40% {
			transform: translateY(-10px);
		}
		60% {
			transform: translateY(-5px);
		}
	}

	/* Animation d'entrée pour le modal */
	.modal-enter-active {
		animation: fadeIn 0.3s ease-out;
	}

	@keyframes fadeIn {
		0% {
			opacity: 0;
			transform: scale(0.95);
		}
		100% {
			opacity: 1;
			transform: scale(1);
		}
	}

	/* Custom scrollbar for the select dropdown */
	.scrollbar-thin {
		scrollbar-width: thin;
		scrollbar-color: #14b8a6 #1f2937;
	}

	.scrollbar-thin::-webkit-scrollbar {
		width: 8px;
	}

	.scrollbar-thin::-webkit-scrollbar-track {
		background: #1f2937;
	}

	.scrollbar-thin::-webkit-scrollbar-thumb {
		background-color: #14b8a6;
		border-radius: 6px;
		border: 2px solid #1f2937;
	}
</style>

--- End of File ---

--- File Path ---
frontend/src/routes/+layout.ts

// +layout.ts
import { PUBLIC_SUPABASE_ANON_KEY, PUBLIC_SUPABASE_URL } from '$env/static/public';
import { createBrowserClient, createServerClient, isBrowser } from '@supabase/ssr';
import type { LayoutLoad } from './$types';

export const load: LayoutLoad = async ({ data, depends, fetch }) => {
  depends('supabase:auth');

  // Helper functions for cookie management in the browser
  const getAllCookies = () => {
    const cookies = document.cookie.split(';').map((cookie) => {
      const [name, value] = cookie.trim().split('=');
      return { name, value };
    });
    return cookies;
  };

  const setAllCookies = (cookiesToSet) => {
    cookiesToSet.forEach(({ name, value, options }) => {
      let cookieString = `${name}=${value}`;
      if (options) {
        if (options.path) cookieString += `;path=${options.path}`;
        if (options.expires) cookieString += `;expires=${options.expires.toUTCString()}`;
        if (options.sameSite) cookieString += `;SameSite=${options.sameSite}`;
        if (options.secure) cookieString += ';Secure';
      }
      document.cookie = cookieString;
    });
  };

  const supabase = isBrowser()
    ? createBrowserClient(PUBLIC_SUPABASE_URL, PUBLIC_SUPABASE_ANON_KEY, {
        global: {
          fetch,
        },
        cookies: {
          getAll: getAllCookies,
          setAll: setAllCookies,
        },
      })
    : createServerClient(PUBLIC_SUPABASE_URL, PUBLIC_SUPABASE_ANON_KEY, {
        global: {
          fetch,
        },
        cookies: {
          getAll() {
            return data.cookies;
          },
        },
      });

  // Use the session and user from the server-side data
  const session = data.session;
  const user = data.user;

  // console.log('Layout client session:', session);
  // console.log('Layout client user:', user);

  return { session, supabase, user };
};
--- End of File ---

--- File Path ---
frontend/src/routes/donations/+page.svelte

<script lang="ts">
    import { env } from '$env/dynamic/public';
    import { i18n } from '$lib/i18n';
    import { loadStripe, type PaymentRequest, type Stripe, type StripeElements, type StripeIbanElement, type StripePaymentElement, type StripePaymentRequest } from '@stripe/stripe-js';
    import { AlertCircle, Check, Copy } from 'lucide-svelte';
    import { onMount, tick } from 'svelte';
    import FeedbackModal from '../../components/FeedbackModal.svelte';

    // --- Config ---
    const stripePublicKey = env.PUBLIC_STRIPE_KEY;
    const DEFAULT_DONATION_EUR = 10;
    const presetAmounts = [5, 10, 20, 50];

    // --- Stripe State ---
    let stripe: Stripe | null = null;
    let elements: StripeElements | null = null; // General elements instance
    let cardElement: StripePaymentElement | null = null; // Specifically for card
    let ibanElement: StripeIbanElement | null = null; // Specifically for SEPA
    let prButton: PaymentRequest | null = null; // For Apple/Google Pay
    let paymentRequest: StripePaymentRequest | null = null;

    // --- Payment Intent State ---
    // Store secrets separately based on the intent type requested
    let clientSecretCard: string | null = $state(null);
    let clientSecretSepa: string | null = $state(null);
    // Keep track of which secret is currently active for element mounting/confirmation
    let activeClientSecret: string | null = $state(null);
    let activePaymentMethodType: 'card' | 'sepa_debit' | 'wallet' | null = $state(null);

    // --- UI & Form State ---
    let isLoadingStripe = $state(true);
    let isProcessingPayment = $state(false); // For confirmations
    let isLoadingPI = $state(false); // For PI creation
    let errorMessage = $state('');
    let successMessage = $state(''); // Not used in this flow (redirects)
    let currentAmount = $state(DEFAULT_DONATION_EUR);
    let customAmountInput = $state('');
    let isCustomAmountConfirmed = $state(false);
    let showCardForm = $state(false);
    let showSepaForm = $state(false);
    let canMakePrPayment = $state(false); // Availability of Apple/Google Pay
    let sepaMandateAccepted = $state(false); // Checkbox for SEPA mandate
    let sepaAccountHolderName = $state(''); // SEPA Account Holder Name
    let isMobile = $state(false); // Track if device is mobile

     // --- Share Text State ---
    let copyStatus = $state<'idle' | 'copied' | 'error'>('idle');
    let copyTimeoutId: ReturnType<typeof setTimeout> | null = null;
    const shareText = `🩺 Tu connais Veille Médicale ?
C'est un nouvel outil de veille scientifique qui t'envoie tous les articles essentiels de ta spécialité.
Déjà +1000 soignants inscrits.
Je recommande 👌
👉 https://veillemedicale.fr`;

    let isFeedbackModalOpen = $state(false);

    async function handleCopyShareText() {
        if (copyStatus === 'copied') return; // Don't do anything if already copied recently

        try {
            await navigator.clipboard.writeText(shareText);
            copyStatus = 'copied';
            console.log('Share text copied to clipboard');

            // Reset status after a delay
            if (copyTimeoutId) clearTimeout(copyTimeoutId); // Clear previous timeout if any
            copyTimeoutId = setTimeout(() => {
                copyStatus = 'idle';
                copyTimeoutId = null;
            }, 2000); // Reset after 2 seconds

        } catch (err) {
            copyStatus = 'error';
            console.error('Failed to copy share text:', err);
            // Optionally show an error message to the user
             if (copyTimeoutId) clearTimeout(copyTimeoutId);
             copyTimeoutId = setTimeout(() => {
                copyStatus = 'idle';
                copyTimeoutId = null;
            }, 3000); // Show error longer
        }
    }

    // --- Helper Functions ---
    function getAmountInCents(): number {
        if (customAmountInput && isCustomAmountConfirmed) {
            const val = parseFloat(customAmountInput.replace(/,/g, '.'));
            return Math.round(val * 100);
        }
        return currentAmount * 100;
    }

    // --- Create/Update Payment Intent (Handles Different Types) ---
    async function createOrUpdatePI(type: 'card' | 'sepa_debit') {
        const amountCents = getAmountInCents();
        if (amountCents < 50) {
            errorMessage = $i18n.donations.errors.invalidAmount;
            return null; // Don't proceed if amount is invalid
        }

        isLoadingPI = true;
        errorMessage = ''; // Clear previous errors
        let newClientSecret: string | null = null;

        try {
            console.log(`Requesting PI for type: ${type}, amount: ${amountCents}`);
            const res = await fetch('/api/create-donation-intent', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ amount: amountCents, paymentMethodType: type })
            });
            if (!res.ok) {
                 const errorData = await res.json().catch(() => ({ message: `HTTP error ${res.status}` }));
                 throw new Error(errorData.message || `Failed to create PI (${res.status})`);
            }
            const data = await res.json();
            if (!data.clientSecret) throw new Error('Missing clientSecret from API');

            newClientSecret = data.clientSecret;
            // console.log(`Received clientSecret for ${type}:`, newClientSecret);

            // Store the secret based on type
            if (type === 'card') clientSecretCard = newClientSecret;
            if (type === 'sepa_debit') clientSecretSepa = newClientSecret;

            // Update Payment Request Button if it exists (always uses 'card' intent)
            if (type === 'card' && paymentRequest) {
                paymentRequest.update({ total: { label: 'Don Veille Médicale', amount: amountCents } });
                console.log("PR Button amount updated.");
            }
             return newClientSecret; // Return the new secret

        } catch (err: any) {
            console.error(`Error creating/updating PI for ${type}:`, err);
            errorMessage = err.message || "Erreur lors de l'initialisation du paiement.";
             // Reset relevant secret on error
             if (type === 'card') clientSecretCard = null;
             if (type === 'sepa_debit') clientSecretSepa = null;
             return null; // Indicate failure
        } finally {
            isLoadingPI = false;
        }
    }

     // --- Initialize Stripe and Check PR Button ---
    onMount(async () => {
         if (!stripePublicKey) { /* ... handle error ... */ return; }
         try {
             isLoadingStripe = true;
             stripe = await loadStripe(stripePublicKey);
             if (!stripe) throw new Error("Stripe failed to load");

             // Check if device is mobile
             isMobile = window.innerWidth < 768;
             
             // Add resize listener to update mobile state
             window.addEventListener('resize', () => {
                 isMobile = window.innerWidth < 768;
             });

             // Check PR Button availability (it will need a 'card' intent later if used)
             await initializePaymentRequestButton(getAmountInCents());

             isLoadingStripe = false;
         } catch (error) {
             console.error("Stripe onMount error:", error);
             errorMessage = "Erreur d'initialisation Stripe.";
             isLoadingStripe = false;
         }
	});

     // --- Initialize Payment Request Button Logic ---
    async function initializePaymentRequestButton(amountCents: number) {
        if (!stripe) {
            console.error("Cannot initialize PR button: Stripe not loaded");
            canMakePrPayment = false;
            return;
        }

        canMakePrPayment = false;
        if (prButton) {
            try {
                prButton.destroy();
            } catch (err) {
                console.warn("Error destroying previous PR button:", err);
            }
        }

        try {
            paymentRequest = stripe.paymentRequest({
                country: 'FR', 
                currency: 'eur',
                total: { label: 'Don Veille Médicale', amount: amountCents },
                requestPayerName: true, 
                requestPayerEmail: true, 
                requestShipping: false,
            });

            const result = await paymentRequest.canMakePayment();
            console.log("PR Button availability check result:", result);
            
            if (result) {
                console.log("PR Button available:", result);
                canMakePrPayment = true;
                
                // Handle paymentmethod event
                paymentRequest.on('paymentmethod', async (ev) => {
                    isProcessingPayment = true;
                    errorMessage = '';

                    try {
                        // Ensure we have a *card* client secret for the current amount
                        let secret = clientSecretCard;
                        if (!secret) {
                            console.log("PR Button clicked, fetching 'card' intent...");
                            secret = await createOrUpdatePI('card');
                        }

                        if (!secret || !stripe) {
                            console.error("Cannot confirm PR payment: Stripe or Client Secret missing.");
                            ev.complete('fail');
                            errorMessage = "Erreur lors de la confirmation.";
                            isProcessingPayment = false;
                            return;
                        }

                        // console.log("Confirming PR payment with secret:", secret);
                        const { paymentIntent, error: confirmError } = await stripe.confirmPayment({
                            clientSecret: secret,
                            confirmParams: { payment_method: ev.paymentMethod.id },
                            redirect: 'if_required'
                        });

                        if (confirmError) {
                            console.error("PR confirmation error:", confirmError);
                            errorMessage = confirmError.message || "Erreur de paiement.";
                            ev.complete('fail');
                        } else if (paymentIntent?.status === 'succeeded') {
                            ev.complete('success');
                            window.location.href = `/donation-status?payment_intent=${paymentIntent.id}&payment_intent_client_secret=${secret}&redirect_status=succeeded`;
                        } else if (paymentIntent?.status === 'processing') {
                            ev.complete('success');
                            window.location.href = `/donation-status?payment_intent=${paymentIntent.id}&payment_intent_client_secret=${secret}&redirect_status=processing`;
                        } else {
                            console.warn("PR Payment status unexpected:", paymentIntent?.status);
                            errorMessage = "Statut de paiement inattendu.";
                            ev.complete('fail');
                        }
                    } catch (err) {
                        console.error("Error in PR payment handler:", err);
                        errorMessage = "Une erreur est survenue lors du paiement.";
                        ev.complete('fail');
                    } finally {
                        isProcessingPayment = false;
                    }
                });
            } else {
                console.log("PR Button not available on this device/browser.");
                canMakePrPayment = false;
            }
        } catch (err) {
            console.error("Error initializing PR button:", err);
            canMakePrPayment = false;
        }
    }

    // --- Initialize and Mount Stripe Elements (Card or SEPA) ---
    async function initializeAndMountElement(type: 'card' | 'sepa_debit') {
        const secret = type === 'card' ? clientSecretCard : clientSecretSepa;
        const mountId = type === 'card' ? '#card-element' : '#iban-element';

        // Destroy existing element of the *same type* FIRST
        if (type === 'card' && cardElement) {
            console.log("Destroying previous card element.");
            try { cardElement.destroy(); } catch(e){ console.warn("Error destroying card element", e); }
            cardElement = null;
        }
        if (type === 'sepa_debit' && ibanElement) {
            console.log("Destroying previous iban element.");
            try { ibanElement.destroy(); } catch(e){ console.warn("Error destroying iban element", e); }
            ibanElement = null;
        }
        // Also reset the general elements instance as it's tied to a specific secret
        elements = null;

        // Check dependencies AFTER potential destruction
        if (!stripe || !secret) {
            console.log(`Cannot initialize ${type} element: Stripe or Client Secret missing.`);
            errorMessage = `Erreur: Impossible d'initialiser le formulaire ${type}.`;
            // Ensure form visibility is false if we can't init
            if (type === 'card') showCardForm = false;
            if (type === 'sepa_debit') showSepaForm = false;
            return;
        }

        errorMessage = ''; // Clear errors when attempting to show form
        console.log(`Initializing ${type} element with secret: ${secret.substring(0, 15)}...`); // Log prefix only

        try {
            const appearance = {
                theme: 'night' as const,
                labels: 'floating' as const,
                variables: {
                    colorPrimary: '#ea580c', // orange-600
                    colorBackground: '#1f2937', // gray-800
                    colorText: '#f3f4f6', // gray-100
                    colorDanger: '#ef4444', // red-500
                    fontFamily: 'system-ui, sans-serif',
                    spacingUnit: '4px',
                    borderRadius: '8px' // Corresponds to Tailwind's rounded-lg
                }
            };
            // Create a NEW elements instance with the specific secret for this type
            elements = stripe.elements({ clientSecret: secret, appearance, locale: 'fr' });

            if (type === 'card') {
                cardElement = elements.create('payment', { layout: "tabs" });
                await tick(); // Wait for Svelte DOM update
                cardElement.mount(mountId); // Mount to the specific div
                console.log(`Card element mounted to ${mountId}.`);

            } else { // sepa_debit
                ibanElement = elements.create('iban', {
                    supportedCountries: ['SEPA'],
                    // placeholderCountry: 'FR', // Optional: Sets placeholder format
                    style: { // Optional: Styling if needed beyond Appearance API
                         base: {
                             backgroundColor: '#374151', // gray-700
                             '::placeholder': {
                                 color: '#9ca3af', // gray-400
                             },
                         }
                    }
                });
                await tick(); // Wait for Svelte DOM update
                ibanElement.mount(mountId); // Mount to the specific div
                console.log(`IBAN element mounted to ${mountId}.`);
            }
             // Store the reference correctly
            // This was missing, causing the destroy logic to fail on subsequent clicks
            // No need to explicitly set here, cardElement/ibanElement are already assigned above

        } catch (mountError: any) {
            console.error(`Error creating/mounting ${type} element:`, mountError);
            errorMessage = `Erreur lors de l'affichage du formulaire ${type}. (${mountError.message || ''})`;
             // Ensure element refs are null on error
             if (type === 'card') cardElement = null;
             if (type === 'sepa_debit') ibanElement = null;
             // Hide the form if mounting fails
             if (type === 'card') showCardForm = false;
             if (type === 'sepa_debit') showSepaForm = false;
        }
    }

    // --- UI Actions ---
    async function selectCardPayment() {
        if (isProcessingPayment || isLoadingPI) return;
        showSepaForm = false; // Hide other form
        if (ibanElement) { // Cleanup SEPA if switching
            try { ibanElement.destroy(); } catch(e){ console.warn("Error destroying iban element", e); }
            ibanElement = null;
        }

        const secret = await createOrUpdatePI('card'); // Get/update 'card' intent
        if (secret) {
             activeClientSecret = secret;
             activePaymentMethodType = 'card';
             showCardForm = true; // Set visibility TRUE *before* mounting
             await tick(); // Allow Svelte to render the container div if it wasn't visible
             await initializeAndMountElement('card'); // Mount the card element
        } else {
            showCardForm = false; // Don't show if PI creation failed
        }
    }

    async function selectSepaPayment() {
        if (isProcessingPayment || isLoadingPI) return;
        showCardForm = false; // Hide other form
        if (cardElement) { // Cleanup card if switching
            try { cardElement.destroy(); } catch(e){ console.warn("Error destroying card element", e); }
            cardElement = null;
        }

        const secret = await createOrUpdatePI('sepa_debit'); // Get/update 'sepa' intent
        if (secret) {
            activeClientSecret = secret;
            activePaymentMethodType = 'sepa_debit';
            showSepaForm = true; // Set visibility TRUE *before* mounting
            await tick(); // Allow Svelte to render the container div if it wasn't visible
            await initializeAndMountElement('sepa_debit'); // Mount the IBAN element
        } else {
            showSepaForm = false; // Don't show if PI creation failed
        }
    }

     // --- Mount Payment Request Button when it's actually needed ---
     async function mountPrButton() {
         if (!stripe || !elements || !paymentRequest || !canMakePrPayment || prButton) {
            if (prButton) console.log("PR button already mounted");
            if (!stripe) console.log("Cannot mount PR button: Stripe not loaded");
            if (!elements) console.log("Cannot mount PR button: Elements not initialized");
            if (!paymentRequest) console.log("Cannot mount PR button: PaymentRequest not initialized");
            if (!canMakePrPayment) console.log("Cannot mount PR button: PR not available on this device");
            return;
         }

         try {
            // Ensure we have a card intent first
            let secret = clientSecretCard;
            if (!secret) {
                secret = await createOrUpdatePI('card');
            }
            if (!secret) {
                console.error("Cannot mount PR button without a card client secret.");
                return;
            }

            // console.log("Mounting PR button with secret:", secret);
            // Recreate elements instance if necessary
            if (!elements) {
                elements = stripe.elements({ clientSecret: secret });
            }

            prButton = elements.create('paymentRequestButton', {
                paymentRequest: paymentRequest,
                style: {
                    paymentRequestButton: { type: 'donate', theme: 'dark', height: '48px' },
                },
            });

            await tick();
            const prMountEl = document.getElementById('payment-request-button-mount-point');
            if (prMountEl) {
                prButton.mount(prMountEl);
                console.log("PR button mounted successfully");
            } else {
                console.warn("PR button mount point not found.");
            }
        } catch (err) {
            console.error("Error mounting PR button:", err);
        }
     }
     // Call mountPrButton when the PR button section should become active,
     // potentially after the initial `canMakePrPayment` check resolves true in onMount.
     $effect(() => {
        if(canMakePrPayment && !prButton) {
            mountPrButton();
        }
     })


    // --- Amount Selection/Confirmation (Simplified) ---
    function handleAmountChange() {
        // Reset secrets and hide forms when amount changes, forcing re-selection
        clientSecretCard = null;
        clientSecretSepa = null;
        activeClientSecret = null;
        activePaymentMethodType = null;
        showCardForm = false;
        showSepaForm = false;
        if (cardElement) { cardElement.destroy(); cardElement = null; }
        if (ibanElement) { ibanElement.destroy(); ibanElement = null; }
        if (prButton) { prButton.destroy(); prButton = null; } // Recreate PR button too
        elements = null; // Reset elements instance

        // Update PR button availability check with new amount
        initializePaymentRequestButton(getAmountInCents());

        console.log("Amount changed, secrets and forms reset.");
    }

    function selectAmount(amount: number) {
        if (isLoadingPI || isProcessingPayment) return;
        currentAmount = amount;
        customAmountInput = '';
        isCustomAmountConfirmed = false;
        handleAmountChange(); // Trigger reset and updates
    }

    function handleCustomAmountInput(ev: InputEvent) {
        const input = ev.target as HTMLInputElement;
        const value = input.value.replace(/[^0-9,.]/g, '');
        const parts = value.split(/[,.]/);
        
        if (parts.length > 2) {
            return;
        }
        
        if (parts.length === 2 && parts[1].length > 2) {
            return;
        }
        
        customAmountInput = value;
        isCustomAmountConfirmed = false;
    }

    function confirmCustomAmount() {
        if (isLoadingPI || isProcessingPayment) return;
        const value = customAmountInput.replace(/,/g, '.');
        const numericValue = parseFloat(value);
        if (!isNaN(numericValue) && numericValue >= 0.50) {
            currentAmount = numericValue; // Set the displayed amount
            isCustomAmountConfirmed = true;
            handleAmountChange(); // Trigger reset and updates
        } else {
             errorMessage = $i18n.donations.errors.invalidAmount;
             isCustomAmountConfirmed = false;
        }
    }


    // --- Payment Confirmation ---
    async function handleCardSubmit(event: Event) {
        event.preventDefault();
        if (!stripe || !cardElement || !clientSecretCard || isProcessingPayment || isLoadingPI) {
             errorMessage = "Le formulaire n'est pas prêt ou une opération est en cours.";
             return;
        }
        isProcessingPayment = true;
        errorMessage = '';

        // console.log("Confirming Card/PaymentElement payment with secret:", clientSecretCard);
        
        // First submit the elements
        const { error: submitError } = await elements?.submit();
        if (submitError) {
            console.error("Elements submit error:", submitError);
            errorMessage = submitError.message || "Erreur lors de la soumission du formulaire.";
            isProcessingPayment = false;
            return;
        }

        // Then confirm the payment
        const { error } = await stripe.confirmPayment({
            elements, // Use the elements instance associated with cardElement
            clientSecret: clientSecretCard,
            confirmParams: {
                return_url: `${window.location.origin}/donation-status`,
            },
            // No redirect: 'if_required' needed here as confirmPayment handles it
        });

        if (error) {
            console.error("Card confirmation error:", error);
            errorMessage = error.message || "Erreur de paiement.";
            isProcessingPayment = false; // Re-enable form on client-side error
        }
        // If no error, Stripe handles the redirect based on payment status.
        // isProcessingPayment remains true to prevent further clicks.
    }

     async function handleSepaSubmit(event: Event) {
        event.preventDefault();
        if (!stripe || !ibanElement || !clientSecretSepa || !sepaMandateAccepted || !sepaAccountHolderName.trim() || isProcessingPayment || isLoadingPI) {
             if (!sepaMandateAccepted) errorMessage = "Veuillez accepter le mandat SEPA.";
             else if (!sepaAccountHolderName.trim()) errorMessage = "Veuillez entrer le nom du titulaire du compte.";
             else errorMessage = "Le formulaire n'est pas prêt ou une opération est en cours.";
             return;
        }
        isProcessingPayment = true;
        errorMessage = '';

        // console.log("Confirming SEPA payment with secret:", clientSecretSepa);
        const { error } = await stripe.confirmSepaDebitPayment(clientSecretSepa, {
            payment_method: {
                sepa_debit: ibanElement,
                billing_details: {
                    name: sepaAccountHolderName.trim(),
                     // Email is strongly recommended for SEPA mandates
                     email: 'email@example.com', // <-- **IMPORTANT**: Get user's actual email
                },
            },
            // return_url is NOT used here directly, status polling or webhooks are needed for SEPA
        });

         if (error) {
            console.error("SEPA confirmation error:", error);
            errorMessage = error.message || "Erreur lors de la soumission du paiement SEPA.";
            isProcessingPayment = false;
        } else {
             // SEPA requires async confirmation. Redirect to a pending/success page immediately.
             // The actual success is confirmed later via webhooks or polling.
             console.log("SEPA payment submitted, confirmation pending.");
             // Redirect to a generic status page, DO NOT assume success yet.
             window.location.href = `/donation-status?payment_intent=${clientSecretSepa.split('_secret_')[0]}&payment_intent_client_secret=${clientSecretSepa}&redirect_status=processing`; // Use processing status
             // successMessage = "Paiement SEPA soumis. La confirmation peut prendre quelques jours.";
             // Keep isProcessingPayment true as we are redirecting
        }
    }

     // Cleanup effect
     $effect(() => {
        return () => {
            if (copyTimeoutId) {
                clearTimeout(copyTimeoutId);
            }
            // Remove resize listener on cleanup
            window.removeEventListener('resize', () => {
                isMobile = window.innerWidth < 768;
            });
        };
    });

    function mountStripeElements() {
        if (!stripe || !clientSecretCard || !clientSecretSepa) return;

        const elements = stripe.elements({
            appearance: {
                theme: 'night',
                variables: {
                    colorPrimary: '#ea580c',
                    colorBackground: '#1f2937',
                    colorText: '#f3f4f6',
                    colorDanger: '#ef4444',
                    fontFamily: 'system-ui, sans-serif',
                    spacingUnit: '4px',
                    borderRadius: '8px'
                }
            },
            clientSecret: clientSecretCard
        });

        if (elements) {
            cardElement = elements.create('payment', {
                layout: 'tabs',
                defaultValues: {
                    billingDetails: {
                        name: 'John Doe',
                        email: 'john@example.com',
                        phone: '+33 6 12 34 56 78',
                        address: {
                            line1: '123 Rue de la Paix',
                            city: 'Paris',
                            postal_code: '75001',
                            country: 'FR'
                        }
                    }
                }
            });
            cardElement.mount('#card-element');

            ibanElement = elements.create('iban', {
                supportedCountries: ['SEPA'],
                placeholderCountry: 'FR',
                style: {
                    base: {
                        fontSize: '16px',
                        color: '#f3f4f6',
                        '::placeholder': {
                            color: '#9ca3af'
                        }
                    }
                }
            });
            ibanElement.mount('#iban-element');
        }
    }

    function openFeedbackModal() {
        isFeedbackModalOpen = true;
    }
</script>

<svelte:head>
    <title>Soutenez-nous - Veille Médicale</title>
    <meta name="description" content="Soutenez Veille Médicale par un don, en donnant votre avis ou en partageant l'outil." />
</svelte:head>

<main class="min-h-screen bg-black px-4 py-12 pt-20 text-white">
    <div class="mx-auto max-w-lg">
        <h1 class="mb-4 text-center text-4xl font-bold tracking-tight">🧡 Contribuer à Veille Médicale</h1>
        <p class="mb-10 text-center text-xl text-gray-300">Vous aimez notre travail ? Voici trois façons de nous aider à aller plus loin.</p>

        <div class="mb-8 space-y-6 rounded-lg bg-gray-800 p-6 shadow-lg md:p-8">
            <!-- Donation Section -->
            <div>
                <h2 class="mb-4 text-lg font-medium">💝 Faire un don</h2>
                <p class="mb-4 text-sm text-gray-400">Votre soutien financier aide directement les développeurs à améliorer l'outil. 100% des dons sont reversés à l'équipe technique.</p>
                <div class="grid grid-cols-2 gap-3 sm:grid-cols-4">
                    {#each presetAmounts as amount}
                        <button type="button" on:click={() => selectAmount(amount)}
                            class="rounded-md border-2 px-4 py-3 text-center font-medium transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-gray-800"
                            class:border-orange-500={currentAmount === amount && !customAmountInput}
                            class:bg-orange-600={currentAmount === amount && !customAmountInput}
                            class:text-white={currentAmount === amount && !customAmountInput}
                            class:border-gray-600={!(currentAmount === amount && !customAmountInput)}
                            class:hover:border-orange-400={currentAmount !== amount || !!customAmountInput}
                            class:hover:bg-gray-700={currentAmount !== amount || !!customAmountInput}
                            class:text-gray-300={!(currentAmount === amount && !customAmountInput)}
                            disabled={isProcessingPayment || isLoadingPI}>
                            {amount} €
                        </button>
                    {/each}
                </div>
                <div class="mt-4 flex items-center gap-2">
                    <div class="relative flex-grow">
                        <span class="pointer-events-none absolute inset-y-0 left-0 flex items-center pl-3 text-gray-400">€</span>
                        <input type="text" id="custom-amount" inputmode="decimal"
                            placeholder="Autre montant" value={customAmountInput}
                            on:input={handleCustomAmountInput}
                            class="w-full rounded-md border-2 bg-gray-700 py-3 pl-8 pr-4 text-white placeholder-gray-400 transition-colors duration-200 focus:z-10 focus:border-orange-500 focus:ring-2 focus:ring-orange-500 focus:ring-offset-0"
                            class:border-orange-500={customAmountInput !== '' && isCustomAmountConfirmed}
                            class:border-gray-600={customAmountInput === '' || !isCustomAmountConfirmed}
                            class:border-yellow-500={customAmountInput !== '' && !isCustomAmountConfirmed}
                            disabled={isProcessingPayment || isLoadingPI} />
                    </div>
                    <button type="button" on:click={confirmCustomAmount}
                        class="shrink-0 rounded-md border-2 bg-gray-600 px-4 py-3 font-medium text-white transition-colors hover:bg-gray-500 focus:z-10 focus:outline-none focus:ring-2 focus:ring-orange-500 focus:ring-offset-0 disabled:cursor-not-allowed disabled:opacity-60"
                        class:border-orange-500={customAmountInput !== '' && isCustomAmountConfirmed}
                        class:border-gray-600={customAmountInput === ''}
                        class:border-yellow-500={customAmountInput !== '' && !isCustomAmountConfirmed}
                        disabled={isProcessingPayment || isLoadingPI || customAmountInput === '' || (customAmountInput !== '' && parseFloat(customAmountInput.replace(/,/g, '.')) < 0.50) || isCustomAmountConfirmed}
                        title="Valider ce montant">
                        OK
                    </button>
                </div>
                {#if errorMessage}
                    <p class="mt-2 text-sm text-red-400 flex items-center gap-1"><AlertCircle class="w-4 h-4"/> {errorMessage}</p>
                {/if}
            </div>

            <hr class="border-gray-700"/>

            <!-- Payment Method Section -->
            <div>
                <p class="mb-4 text-lg font-medium">✅ Choisissez votre méthode de paiement</p>
                {#if isLoadingPI}
                    <div class="flex justify-center items-center gap-2 text-gray-400">
                        <svg class="h-5 w-5 animate-spin" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24"> <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle> <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path> </svg>
                        <span>Chargement...</span>
                    </div>
                {:else}
                    <div class="space-y-3">
                        {#if isMobile}
                            {#if canMakePrPayment}
                                <div id="payment-request-button-mount-point" class={!prButton ? 'h-[48px] bg-gray-700 animate-pulse rounded-lg' : ''}>
                                    <!-- PR Button will be mounted here by `mountPrButton` -->
                                </div>
                            {:else if !isLoadingStripe}
                                <div class="rounded-md border border-yellow-600 bg-yellow-900/30 p-3 text-sm text-yellow-300 flex gap-2 items-start" role="alert">
                                    <AlertCircle aria-hidden="true" class="h-4 w-4 flex-shrink-0 mt-0.5" />
                                    <div>
                                        <span class="font-medium">Paiement rapide indisponible</span><br>
                                        <span class="text-xs text-yellow-400/90">
                                            Google Pay / Apple Pay n'est pas activé ou n'est pas compatible avec ce navigateur/appareil.
                                            Raisons possibles : absence de carte enregistrée, navigation privée, ou certaines extensions (ex: bloqueurs de publicités).
                                            Vous pouvez essayer un autre navigateur ou vérifier vos paramètres.
                                        </span>
                                    </div>
                                </div>
                            {/if}
                        {/if}

                        <!-- Card Payment Option -->
                        <button type="button" on:click={selectCardPayment}
                            class="w-full rounded-lg border-2 p-4 text-left transition-colors"
                            class:border-orange-500={showCardForm} class:bg-gray-600={showCardForm}
                            class:border-gray-600={!showCardForm} class:bg-gray-700={!showCardForm}
                            class:hover:border-orange-500={!showCardForm} class:hover:bg-gray-600={!showCardForm}
                            disabled={isProcessingPayment}>
                            <div class="flex items-center justify-between">
                                <div class="flex items-center gap-3">
                                    <span class="text-2xl">💳</span>
                                    <h3 class="font-semibold">Carte bancaire</h3>
                                </div>
                                <span class="text-gray-400">{showCardForm ? '▲' : '▼'}</span>
                            </div>
                        </button>

                        {#if showCardForm}
                            <form on:submit={handleCardSubmit} class="mt-4 space-y-4 rounded-lg border border-gray-700 p-4">
                                <div id="card-element">
                                    {#if !cardElement}<p class="text-sm text-gray-400">Chargement du formulaire de carte...</p>{/if}
                                </div>
                                <button type="submit" disabled={!stripe || !cardElement || isProcessingPayment}
                                    class="w-full rounded-lg bg-orange-600 px-6 py-3 text-lg font-semibold text-white shadow-md transition-all duration-300 hover:bg-orange-700 disabled:cursor-not-allowed disabled:bg-gray-600 disabled:opacity-70">
                                    {#if isProcessingPayment && activePaymentMethodType === 'card'}
                                        <span class="flex items-center justify-center">
                                            <svg class="mr-2 h-5 w-5 animate-spin" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24"> <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle> <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path> </svg>
                                            Traitement...
                                        </span>
                                    {:else}
                                        Payer {getAmountInCents() / 100} € par Carte
                                    {/if}
                                </button>
                            </form>
                        {/if}

                        <!-- SEPA Payment Option -->
                        <button type="button" on:click={selectSepaPayment}
                            class="w-full rounded-lg border-2 p-4 text-left transition-colors"
                            class:border-indigo-500={showSepaForm} class:bg-gray-600={showSepaForm}
                            class:border-gray-600={!showSepaForm} class:bg-gray-700={!showSepaForm}
                            class:hover:border-indigo-500={!showSepaForm} class:hover:bg-gray-600={!showSepaForm}
                            disabled={isProcessingPayment}>
                            <div class="flex items-center justify-between">
                                <div class="flex items-center gap-3">
                                    <span class="text-2xl">🏦</span>
                                    <h3 class="font-semibold">Prélèvement SEPA (IBAN)</h3>
                                </div>
                                <span class="text-gray-400">{showSepaForm ? '▲' : '▼'}</span>
                            </div>
                        </button>

                        {#if showSepaForm}
                            <form on:submit={handleSepaSubmit} class="mt-4 space-y-4 rounded-lg border border-gray-700 p-4">
                                <div>
                                    <label for="sepa-name" class="block text-sm font-medium text-gray-300 mb-1">Nom du titulaire du compte</label>
                                    <input type="text" id="sepa-name" bind:value={sepaAccountHolderName} required
                                        class="w-full rounded-md border-2 bg-gray-700 py-3 px-4 text-white placeholder-gray-400 transition-colors duration-200 focus:z-10 focus:border-indigo-500 focus:ring-2 focus:ring-indigo-500 focus:ring-offset-0" />
                                </div>
                                <div>
                                    <label for="iban-element" class="block text-sm font-medium text-gray-300 mb-1">IBAN</label>
                                    <div class="relative w-full">
                                        <div class="w-full rounded-md border-2 border-gray-600 bg-[#374151] py-3 px-4 text-white transition-colors duration-200 focus-within:border-indigo-500 focus-within:ring-2 focus-within:ring-indigo-500 focus-within:ring-offset-0">
                                            <div id="iban-element" class="w-full">
                                                {#if !ibanElement}<p class="text-sm text-gray-400">Chargement du formulaire IBAN...</p>{/if}
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div class="flex items-start space-x-2">
                                    <input type="checkbox" id="sepa-mandate" bind:checked={sepaMandateAccepted} required
                                        class="h-4 w-4 rounded border-gray-600 bg-gray-700 text-indigo-600 focus:ring-indigo-500 mt-1"/>
                                    <label for="sepa-mandate" class="text-xs text-gray-400">
                                        En fournissant votre IBAN et en confirmant ce paiement, vous autorisez Veille Médicale et Stripe, notre prestataire de services de paiement, à envoyer des instructions à votre banque pour débiter votre compte conformément à ces instructions. Vous avez droit à un remboursement de la part de votre banque selon les termes et conditions de votre convention avec votre banque. Une demande de remboursement doit être présentée dans les 8 semaines suivant la date à laquelle votre compte a été débité. Vos droits sont expliqués dans un relevé que vous pouvez obtenir auprès de votre banque.
                                    </label>
                                </div>
                                <button type="submit" disabled={!stripe || !ibanElement || !sepaMandateAccepted || !sepaAccountHolderName.trim() || isProcessingPayment}
                                    class="w-full rounded-lg bg-indigo-600 px-6 py-3 text-lg font-semibold text-white shadow-md transition-all duration-300 hover:bg-indigo-700 disabled:cursor-not-allowed disabled:bg-gray-600 disabled:opacity-70">
                                    {#if isProcessingPayment && activePaymentMethodType === 'sepa_debit'}
                                        <span class="flex items-center justify-center">
                                            <svg class="mr-2 h-5 w-5 animate-spin" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24"> <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle> <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path> </svg>
                                            Soumission...
                                        </span>
                                    {:else}
                                        Payer {getAmountInCents() / 100} € par Prélèvement SEPA
                                    {/if}
                                </button>
                            </form>
                        {/if}

                        <!-- Lydia Payment Option -->
                        <button type="button" disabled
                            class="w-full rounded-lg border-2 p-4 text-left transition-colors border-gray-600 bg-gray-700 opacity-50 cursor-not-allowed">
                            <div class="flex items-center justify-between">
                                <div class="flex items-center gap-3">
                                    <img 
                                        src="https://cdn.newfinancer.com/wp-content/uploads/2022/09/lydia-logo-150x150.png" 
                                        alt="Lydia" 
                                        class="h-6 w-6 grayscale opacity-50"
                                    />
                                    <h3 class="font-semibold">Lydia</h3>
                                </div>
                                <span class="text-gray-400">Bientôt disponible</span>
                            </div>
                        </button>
                    </div>
                {/if}
            </div>
        </div>

        <!-- Other Ways to Contribute -->
        <div class="mt-8 space-y-6">
            <!-- Feedback Section -->
            <div class="rounded-lg bg-gray-800 p-6 shadow-lg md:p-8">
                <h2 class="mb-4 text-lg font-medium">💌 Faire un retour</h2>
                <p class="mb-4 text-sm text-gray-400">Votre avis compte ! Chaque retour est une source précieuse d'idées pour améliorer l'outil.</p>
                <button
                    on:click={openFeedbackModal}
                    class="inline-flex items-center gap-2 rounded-lg bg-blue-600 px-5 py-2.5 text-sm font-semibold text-white transition-colors duration-200 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 focus:ring-offset-gray-800"
                >
                    💌 Faire un retour
                </button>
            </div>

            <!-- Share Section -->
            <div class="rounded-lg bg-gray-800 p-6 shadow-lg md:p-8">
                <h2 class="mb-4 text-lg font-medium">📣 Partager l'outil</h2>
                <p class="mb-3 text-sm text-gray-400">Aidez vos collègues, internes, et amis soignants à rester à jour.</p>
                <p class="mb-2 text-sm font-semibold">👉 Texte à copier-coller :</p>
                <pre class="mb-3 whitespace-pre-wrap rounded-md bg-gray-700 p-3 font-mono text-xs text-gray-200">{shareText}</pre>
                <button
                    type="button"
                    class="inline-flex items-center gap-2 rounded-lg border border-teal-500 px-4 py-2 text-sm font-medium text-teal-400 transition-colors duration-150 hover:bg-teal-500/10 focus:outline-none focus:ring-2 focus:ring-teal-500 focus:ring-offset-2 focus:ring-offset-gray-800 disabled:opacity-50"
                    on:click={handleCopyShareText}
                    disabled={copyStatus === 'copied'}
                >
                    {#if copyStatus === 'copied'}
                        <Check class="h-4 w-4 text-green-500" />
                        Copié !
                    {:else if copyStatus === 'error'}
                        <Copy class="h-4 w-4 text-red-500" />
                        Erreur
                    {:else}
                        <Copy class="h-4 w-4" />
                        Copier le texte
                    {/if}
                </button>
            </div>
        </div>
    </div>

    <FeedbackModal bind:isOpen={isFeedbackModalOpen} on:close={() => isFeedbackModalOpen = false} />
</main>
--- End of File ---

--- File Path ---
frontend/src/routes/+page.server.ts

import { error } from '@sveltejs/kit';

/** @type {import('./$types').PageServerLoad} */
export async function load({ locals }) {
  try {
    const { data: disciplinesData, error: disciplinesError } = await locals.supabase
      .from('disciplines')
      .select('id, name');

    if (disciplinesError) {
      console.error('Erreur lors de la récupération des disciplines:', disciplinesError);
      throw error(500, 'Erreur serveur lors de la récupération des disciplines.');
    }

    if (!disciplinesData || disciplinesData.length === 0) {
      console.warn('Aucune discipline trouvée.');
      return { articles: [], specialties: [] };
    }

    const disciplines = disciplinesData;
    const specialties = disciplines.map((d) => d.name);

    const articlePromises = disciplines.map(discipline => {
      return locals.supabase
        .from('articles')
        .select(`
          id,
          title,
          content,
          created_at,
          published_at,
          link,
          grade,
          journal,
          article_disciplines!inner (
            discipline_id,
            disciplines (name)
          )
        `)
        .eq('article_disciplines.discipline_id', discipline.id)
        .order('created_at', { ascending: true })
        .limit(3)
        .then(({ data, error: articleError }) => {
           if (articleError) {
             console.error(`Erreur lors de la récupération des articles pour la discipline ${discipline.name} (ID: ${discipline.id}):`, articleError);
             return [];
           }
           const processedArticles = (data || []).map(article => ({
                ...article,
                disciplines: article.article_disciplines.map(ad => ad.disciplines.name)
           }));
           return processedArticles;
        });
    });
    const resultsPerDiscipline = await Promise.all(articlePromises);
    const combinedArticles = resultsPerDiscipline.flat();

    return {
      articles: combinedArticles,
      specialties: specialties
    };

  } catch (err) {
    // Handle potential errors from Promise.all or the initial disciplines fetch
    if (err.status && typeof err.status === 'number') {
        // It's likely a SvelteKit error object, re-throw it
        throw err;
    } else {
        // Otherwise, log and throw a generic 500 error
        console.error('Erreur inattendue dans la fonction load:', err);
        throw error(500, 'Erreur serveur inattendue.');
    }
  }
}
--- End of File ---

--- File Path ---
frontend/eslint.config.js

import prettier from 'eslint-config-prettier';
import js from '@eslint/js';
import { includeIgnoreFile } from '@eslint/compat';
import svelte from 'eslint-plugin-svelte';
import globals from 'globals';
import { fileURLToPath } from 'node:url';
import ts from 'typescript-eslint';
import svelteConfig from './svelte.config.js';
const gitignorePath = fileURLToPath(new URL('./.gitignore', import.meta.url));

export default ts.config(
	includeIgnoreFile(gitignorePath),
	js.configs.recommended,
	...ts.configs.recommended,
	...svelte.configs.recommended,
	prettier,
	...svelte.configs['flat/prettier'],
	{
		languageOptions: {
			globals: {
				...globals.browser,
				...globals.node
			}
		}
	},
	{
		files: ['**/*.svelte', '**/*.svelte.ts', '**/*.svelte.js'],
		ignores: ['eslint.config.js', 'svelte.config.js'],

		languageOptions: {
			parserOptions: {
				projectService: true,
				extraFileExtensions: ['.svelte'],
				parser: ts.parser,
				svelteConfig
			}
		}
	}
);

--- End of File ---

--- File Path ---
frontend/.env

PUBLIC_SUPABASE_URL=https://etxelhjnqbrgwuitltyk.supabase.co/
PUBLIC_SUPABASE_ANON_KEY=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImV0eGVsaGpucWJyZ3d1aXRsdHlrIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDA2OTE5NzAsImV4cCI6MjA1NjI2Nzk3MH0.EvaK9bCSYaBVaVOIgakKTAVoM8UrDYg2HX7Z-iyWoD4
STRIPE_SECRET_KEY=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
PUBLIC_STRIPE_KEY=pk_live_51RGM76CkHiGS8lZzVT1YgqbCsd1xf7Yus8dSNeYKgHAaQpHz20rcv0FGd9p1fZrfklNDWsQfiVPFLx10G0smijrB00bmXGwby0
STRIPE_MONTHLY_PRICE_ID=price_1RBFmjE2xMN98zLtgSA1AE2o
STRIPE_YEARLY_PRICE_ID=price_1RBFnPE2xMN98zLt6ghSWNwW
--- End of File ---

--- File Path ---
frontend/package.json

{
	"name": "frontend",
	"private": true,
	"version": "0.0.1",
	"type": "module",
	"scripts": {
		"dev": "vite dev",
		"build": "vite build",
		"preview": "vite preview",
		"prepare": "svelte-kit sync || echo ''",
		"check": "svelte-kit sync && svelte-check --tsconfig ./tsconfig.json",
		"check:watch": "svelte-kit sync && svelte-check --tsconfig ./tsconfig.json --watch",
		"lint": "eslint . && prettier --check .",
		"format": "prettier --write ."
	},
	"devDependencies": {
		"@eslint/compat": "^1.2.5",
		"@eslint/js": "^9.18.0",
		"@sveltejs/adapter-auto": "^4.0.0",
		"@sveltejs/kit": "^2.16.0",
		"@sveltejs/vite-plugin-svelte": "^5.0.0",
		"@tailwindcss/typography": "^0.5.15",
		"@tailwindcss/vite": "^4.0.9",
		"autoprefixer": "^10.4.20",
		"bits-ui": "^1.3.12",
		"clsx": "^2.1.1",
		"eslint": "^9.18.0",
		"eslint-config-prettier": "^10.0.1",
		"eslint-plugin-svelte": "^3.0.0",
		"globals": "^16.0.0",
		"prettier": "^3.4.2",
		"prettier-plugin-svelte": "^3.3.3",
		"prettier-plugin-tailwindcss": "^0.6.11",
		"svelte": "^5.23.0",
		"svelte-check": "^4.0.0",
		"tailwind-merge": "^3.0.2",
		"tailwind-variants": "^1.0.0",
		"tailwindcss": "^4.0.9",
		"tailwindcss-animate": "^1.0.7",
		"typescript": "^5.0.0",
		"typescript-eslint": "^8.20.0",
		"vite": "^6.0.0"
	},
	"dependencies": {
		"@lucide/svelte": "^0.479.0",
		"@stripe/stripe-js": "^7.0.0",
		"@supabase/ssr": "^0.5.2",
		"@supabase/supabase-js": "^2.49.1",
		"dotenv": "^16.4.7",
		"lucide-svelte": "^0.488.0",
		"luxon": "^3.5.0",
		"nprogress": "^0.2.0",
		"stripe": "^18.0.0",
		"svelte-stripe": "^1.3.0"
	}
}

--- End of File ---

