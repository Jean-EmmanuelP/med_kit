--- File Path ---
frontend/src/app.d.ts

import type { Session, SupabaseClient, User } from '@supabase/supabase-js'

declare global {
  namespace App {
    // interface Error {}
    interface Locals {
      supabase: SupabaseClient
      safeGetSession: () => Promise<{ session: Session | null; user: User | null }>
      session: Session | null
      user: User | null
    }
    interface PageData {
      session: Session | null
    }
    // interface PageState {}
    // interface Platform {}
  }
}

declare module '*.svelte' {
  const component: any;
  export default component;
}

export {}
--- End of File ---

--- File Path ---
frontend/src/app.css

@import "tailwindcss";
/* #030712 */
/* ambiance pubmed pour la police */

:root {
    background-color: black;
}

--- End of File ---

--- File Path ---
frontend/src/components/FeedbackModal.svelte

<script lang="ts">
	import { AlertTriangle, CheckCircle, Loader2, X } from 'lucide-svelte';
// Import necessary icons
	import { createEventDispatcher, tick } from 'svelte';

	const dispatch = createEventDispatcher();

	let { isOpen = $bindable() } = $props<{ isOpen: boolean }>();

	// Form state - These will now hold the full French strings
	let contentUseful: string | null = $state(null);
	let formatSuitable: string | null = $state(null);
	let desiredFeatures = $state('');
	let willingToPay: string | null = $state(null); // Will hold "Oui" or "Non"
	let priceSuggestion = $state('');
	let reasonNotToPay = $state('');
	let improvements = $state('');

	// Submission state
	let submissionStatus: 'idle' | 'loading' | 'success' | 'error' = $state('idle');
	let submissionMessage = $state('');

	// Update feedback modal timestamp when opened
	$effect(() => {
		if (isOpen) {
			fetch('/api/update-feedback-modal', {
				method: 'POST',
				headers: { 'Content-Type': 'application/json' }
			}).catch(err => {
				console.error('Failed to update feedback modal timestamp:', err);
			});
		}
	});

	function closeModal() {
		isOpen = false;
		dispatch('close');
		// Reset state after closing
		resetForm();
	}

	function handleBackdropClick(event: MouseEvent) {
		if (event.target === event.currentTarget && submissionStatus !== 'loading') {
			closeModal();
		}
	}

	function resetForm() {
		contentUseful = null;
		formatSuitable = null;
		desiredFeatures = '';
		willingToPay = null;
		priceSuggestion = '';
		reasonNotToPay = '';
		improvements = '';
		submissionStatus = 'idle';
		submissionMessage = '';
	}

	async function handleSubmit() {
		// Validate required fields
		if (!contentUseful) {
			submissionStatus = 'error';
			submissionMessage = 'Veuillez indiquer si le contenu vous est utile.';
			return;
		}
		if (!formatSuitable) {
			submissionStatus = 'error';
			submissionMessage = 'Veuillez indiquer si le format vous convient.';
			return;
		}
		if (!willingToPay) {
			submissionStatus = 'error';
			submissionMessage = 'Veuillez indiquer si vous seriez pr√™t¬∑e √† payer.';
			return;
		}

		submissionStatus = 'loading';
		submissionMessage = '';

        // This object now naturally contains the full French answers
		const feedback = {
			contentUseful,
			formatSuitable,
			desiredFeatures,
			willingToPay,
			priceSuggestion,
			reasonNotToPay,
			improvements
		};

		try {
			const response = await fetch('/api/submit-feedback', {
				method: 'POST',
				headers: { 'Content-Type': 'application/json' },
				body: JSON.stringify(feedback)
			});

			const result = await response.json().catch(() => ({}));

			if (!response.ok) {
				throw new Error(result.message || `Erreur ${response.status}: La requ√™te a √©chou√©.`);
			}

			// Update the feedback modal timestamp
			await fetch('/api/update-feedback-modal', {
				method: 'POST',
				headers: { 'Content-Type': 'application/json' }
			}).catch(err => {
				console.error('Failed to update feedback modal timestamp:', err);
			});

			submissionStatus = 'success';
			submissionMessage = result.message || 'Merci, votre retour a bien √©t√© envoy√© !';

			await tick();
			setTimeout(() => {
				if (submissionStatus === 'success' && isOpen) {
					closeModal();
				}
			}, 2500);

		} catch (err: any) {
			console.error("Feedback submission error:", err);
			submissionStatus = 'error';
			submissionMessage = err.message || "Une erreur inattendue est survenue lors de l'envoi.";
		}
	}

	// Prevent body scroll when modal is open
	$effect(() => {
		const body = document.body;
		let originalOverflow: string | null = null;

		if (isOpen) {
			originalOverflow = body.style.overflow;
			body.style.overflow = 'hidden';
		}

		return () => {
			if (originalOverflow !== null) {
				body.style.overflow = originalOverflow;
			} else {
				body.style.overflow = '';
			}
			if (!isOpen && submissionStatus !== 'idle') {
				resetForm();
			}
		};
	});

</script>

{#if isOpen}
    <div
        class="fixed inset-0 z-50 flex items-start justify-center bg-black bg-opacity-70 backdrop-blur-sm overflow-y-auto pt-20 pb-10"
        on:click={handleBackdropClick}
        role="dialog"
        aria-modal="true"
        aria-labelledby="feedback-modal-title"
    >
        <div class="relative w-full max-w-2xl rounded-lg bg-gray-800 text-white shadow-xl mx-4 my-auto">
            <button
                class="absolute right-4 top-4 rounded-full p-1 text-gray-400 transition-colors hover:bg-gray-700 hover:text-white disabled:opacity-50"
                on:click={closeModal}
                disabled={submissionStatus === 'loading'}
                aria-label="Fermer la fen√™tre"
            >
                <X class="h-6 w-6" />
            </button>

            <div class="p-6 sm:p-8">
                <h2 id="feedback-modal-title" class="mb-4 text-xl sm:text-2xl font-bold">üîç Donne-nous ton avis en 1 minute !</h2>

                {#if submissionStatus !== 'success'}
                    <p class="mb-6 text-sm sm:text-base text-gray-300">
                        On veut rendre notre outil vraiment utile pour toi. Tes retours sont pr√©cieux üôè
                    </p>

                    <form on:submit|preventDefault={handleSubmit} class="space-y-5 sm:space-y-6">
                        <!-- Question 1 -->
                        <fieldset>
                            <legend class="mb-2 font-medium text-sm sm:text-base">1. Est-ce que le contenu propos√© t'est utile ?</legend>
                            <div class="space-y-1 sm:space-y-2 text-sm sm:text-base">
                                {#each [
                                    { value: 'Oui, tr√®s utile', label: 'Oui, tr√®s utile' },
                                    { value: 'Oui, plut√¥t utile', label: 'Oui, plut√¥t utile' },
                                    { value: 'Bof, peu utile', label: 'Bof, peu utile' },
                                    { value: 'Pas du tout utile', label: 'Pas du tout utile' }
                                ] as option}
                                <label class="flex items-center cursor-pointer">
                                    <!-- Changed value attribute -->
                                    <input type="radio" name="contentUseful" value={option.value} bind:group={contentUseful} class="mr-2 h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-600 bg-gray-700" />
                                    {option.label}
                                </label>
                                {/each}
                            </div>
                        </fieldset>

                        <!-- Question 2 -->
                        <fieldset>
                            <legend class="mb-2 font-medium text-sm sm:text-base">2. Est-ce que le format te convient ?</legend>
                             <div class="space-y-1 sm:space-y-2 text-sm sm:text-base">
                                {#each [
                                    { value: 'Parfaitement (court, clair, pertinent)', label: 'Parfaitement (court, clair, pertinent)' },
                                    { value: '√áa pourrait √™tre mieux (trop long/technique‚Ä¶)', label: '√áa pourrait √™tre mieux (trop long/technique‚Ä¶)' },
                                    { value: 'Pas du tout adapt√©', label: 'Pas du tout adapt√©' }
                                ] as option}
                                <label class="flex items-center cursor-pointer">
                                    <!-- Changed value attribute -->
                                    <input type="radio" name="formatSuitable" value={option.value} bind:group={formatSuitable} class="mr-2 h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-600 bg-gray-700" />
                                    {option.label}
                                </label>
                                {/each}
                            </div>
                        </fieldset>

                        <!-- Question 3 (No change needed) -->
                        <div>
                            <label for="desiredFeatures" class="block mb-2 font-medium text-sm sm:text-base">3. Quelles fonctionnalit√©s aimerais-tu voir sur le site ?</label>
                            <textarea id="desiredFeatures"
                                bind:value={desiredFeatures}
                                placeholder="ex : recommandations personnalis√©es, filtres, recherche, audio‚Ä¶"
                                class="w-full rounded-md bg-gray-700 p-3 text-sm sm:text-base text-white placeholder-gray-400 border border-gray-600 focus:ring-blue-500 focus:border-blue-500"
                                rows="3"
                            ></textarea>
                        </div>

                        <!-- Question 4 -->
                        <fieldset>
                            <legend class="mb-2 font-medium text-sm sm:text-base">4. Serais-tu pr√™t¬∑e √† payer pour cet outil ?</legend>
                            <div class="mb-3 space-y-1 sm:space-y-2 text-sm sm:text-base">
                                {#each [ { value: 'Oui', label: 'Oui' }, { value: 'Non', label: 'Non' } ] as option}
                                <label class="flex items-center cursor-pointer">
                                     <!-- Changed value attribute -->
                                    <input type="radio" name="willingToPay" value={option.value} bind:group={willingToPay} class="mr-2 h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-600 bg-gray-700" />
                                    {option.label}
                                </label>
                                {/each}
                            </div>

                             <!-- Conditional fields based on "Oui" or "Non" -->
                            {#if willingToPay === 'Oui'}
                                <div class="mb-3 transition-opacity duration-300 ease-in-out">
                                    <label for="priceSuggestion" class="block mb-2 text-sm sm:text-base">Si oui, √† quel prix (par mois) ?</label>
                                    <input id="priceSuggestion"
                                        type="text"
                                        bind:value={priceSuggestion}
                                        placeholder="ex : 1‚Ç¨, 2‚Ç¨, 5‚Ç¨‚Ä¶"
                                        class="w-full rounded-md bg-gray-700 p-3 text-sm sm:text-base text-white placeholder-gray-400 border border-gray-600 focus:ring-blue-500 focus:border-blue-500"
                                    />
                                </div>
                            {:else if willingToPay === 'Non'}
                                <div class="mb-3 transition-opacity duration-300 ease-in-out">
                                    <label for="reasonNotToPay" class="block mb-2 text-sm sm:text-base">Si non, qu'est-ce qui te manquerait pour envisager de payer ?</label>
                                    <textarea id="reasonNotToPay"
                                        bind:value={reasonNotToPay}
                                        class="w-full rounded-md bg-gray-700 p-3 text-sm sm:text-base text-white placeholder-gray-400 border border-gray-600 focus:ring-blue-500 focus:border-blue-500"
                                        rows="2"
                                    ></textarea>
                                </div>
                            {/if}
                        </fieldset>

                        <!-- Question 5 (No change needed) -->
                        <div>
                            <label for="improvements" class="block mb-2 font-medium text-sm sm:text-base">5. Tu as 30 secondes de plus ? Dis-nous ce qu'on pourrait am√©liorer üëá</label>
                            <textarea id="improvements"
                                bind:value={improvements}
                                placeholder="Suggestions, bugs rencontr√©s, id√©es..."
                                class="w-full rounded-md bg-gray-700 p-3 text-sm sm:text-base text-white placeholder-gray-400 border border-gray-600 focus:ring-blue-500 focus:border-blue-500"
                                rows="3"
                            ></textarea>
                        </div>

                        <!-- Submission Area (No change needed) -->
                        <div class="flex flex-col items-end gap-3 pt-2">
                             {#if submissionStatus === 'error'}
                                <p class="text-sm text-red-400 flex items-center gap-1 w-full justify-start" role="alert">
                                    <AlertTriangle class="h-4 w-4 flex-shrink-0"/> {submissionMessage}
                                </p>
                             {/if}
                             <button
                                type="submit"
                                class="inline-flex items-center justify-center rounded-lg bg-blue-600 px-5 py-2.5 font-semibold text-white transition-colors hover:bg-blue-700 disabled:opacity-60 disabled:cursor-not-allowed"
                                disabled={submissionStatus === 'loading'}
                            >
                                {#if submissionStatus === 'loading'}
                                    <Loader2 class="mr-2 h-5 w-5 animate-spin" />
                                    Envoi en cours...
                                {:else}
                                    Envoyer le retour
                                {/if}
                            </button>
                        </div>
                    </form>

                {:else if submissionStatus === 'success'}
                     <!-- Success State (No change needed) -->
                    <div class="flex flex-col items-center justify-center text-center py-8 px-4">
                        <CheckCircle class="h-16 w-16 text-green-500 mb-4" />
                        <h3 class="text-xl font-semibold mb-2">Retour envoy√© !</h3>
                        <p class="text-gray-300 mb-6">{submissionMessage}</p>
                        <p class="text-xs text-gray-400">Cette fen√™tre se fermera automatiquement.</p>
                    </div>
                {/if}
            </div>
        </div>
    </div>
{/if}

<style>
 /* Optional: Add some transition for the modal appearance */
    .fixed {
        transition: opacity 0.3s ease-in-out;
    }
</style>
--- End of File ---

--- File Path ---
frontend/src/lib/svg/EmbaseSvg.svelte

<svg
					xmlns="http://www.w3.org/2000/svg"
					height="52"
					viewBox="0 0 58 52"
					width="58"
					class="Icon-module_root__A8iJ4 ElsevierProductLogo-module_logo__uGNOJ"
					focusable="false"
					><path
						d="M16.2 24.2c.6-.4 1-.8 1-1.3v-.3a.8.8 0 0 0-.4 0c-.3.3-.8.8-1.2 1l-.6.1s-.1 0 0-.1l1-.8c.2-.2.1-.4-.2-.5-.4 0-.9.1-1.2.4-.7.6-1 1.7-1 2.5l-.3.1c-.1-.5-.2-1 0-1.6l.3-.7c0-.2 0-.4-.2-.5l-.2.1c-.3.9-.8 1.3-1.6 1.8l-.9.5c-.3-.1-.5-.3-.8-.7l-1-1.4a.5.5 0 0 0-.4-.2H7a2 2 0 0 1-1.3-.9c-.3-.4-.4-.4-.7 0l-1 .7a1.7 1.7 0 0 1-.2.3c-.3.1-.4 0-.5-.2-.3-.8-.4-1.6-.4-2.5v-1.3a3 3 0 0 0-.7-.5c-.8-.3-1.4-.9-2-1.5a.6.6 0 0 1-.2-.4s0-.3.3-.4c.4-.3 1-.4 1.5-.4l1.6.2c.4 0 .5-.3.4-.8-.1-1.2.3-2 1-2.6.5-.6.4-1.2.3-1.8 0-.3-.1-.4-.4-.4-.8.2-.8.2-1 1 0 .4-.2.8-.4 1.2L2 13.7c-.1.2-.3.2-.4 0a2.6 2.6 0 0 1-1-3.2c0-.4.3-.8.5-1v.3l-.2.7c-.3.9-.3 1.7.3 2.5l.2.1h.3l1-1c.5-.5.6-1 .5-1.6a10 10 0 0 0-.2-.7v-.2l-.3.1c-.4.4-.5.7-.7 1.3a.5.5 0 0 1-.2.3v-.4c0-.6.2-1.1.6-1.5.2-.3.2-.4 0-.5-1-.2-1.7-.5-2.3-1.3a.7.7 0 0 1-.2-.4c0-.2 0-.3.3-.4.7-.5 1.5-1 2.3-1.3h.6a28 28 0 0 1-1-3.6l.3-1h.7l1 .6c.3.2.4.2.6-.1C5 .9 5.5.4 6 0l.4-.1c.2 0 .3.1.5.4l.8 1.5c.3.5.6.5 1 .2l1.5-1c.4-.4.5-.4 1-.1.4.3.9.8 1.1 1.3 0 .1 1-.4 1.1-.7 0-.4.2-.7.3-1 .3-.5.6-.6.8-.6.3 0 .7.3 1 .5l.9.4c.3.3.4.3.6-.1.3-.4.5-.5 1-.5 1.2 0 2.2.3 3 1.2 0 .2.2.2.4 0 .3-.3.6-.4 1.1-.4h1c.3 0 .4 0 .7-.3.2-.4.6-.8 1-.8.7 0 1.7 1 2.1 1.9l-.2.1a4.5 4.5 0 0 0-.7-.6 6.4 6.4 0 0 0-1.2-.6c-.4-.2-.6 0-.6.5l.4 1.6c.1.5.6.9 1 1.1v.2h-1c-.6.1-1.1.4-1.7.6-.2.1-.2.2 0 .4l1 .9c.9.7 1.8.5 3 .1l.4-.1c.5-.1 1 0 1.3.4l1.1 1c.3.3.4.6.2 1a53 53 0 0 1-1.1 2l-.3.3c-.1 0-.2-.3-.1-.6l.2-.2a4.2 4.2 0 0 0 .7-1.8c0-.5-.2-.8-.7-.6l-.5.1c-.2.1-.3 0-.3-.2L28 7c-.1-.3-.3-.4-.6-.2a3 3 0 0 0-1 1 3.7 3.7 0 0 0-.4 2.3l.1.2a.4.4 0 0 0 .2-.2c.2-.3.2-.7.3-1l.1-.8h.3c.3 0 .4.1.4.3-.5.6-.7 1.4-1 2.2l-.4.2-.4-.2-.6-1.5c-.3-1.6-.4-1.7-.5-1.8A10 10 0 0 0 22 4.8l-.2-.2.3-.1.9-.4c.4-.1.7-.4.9-.8l.3-.6c.2-.3.2-.5 0-.7-.5-.5-1-.6-1.6-.5-.6.1-1 .6-1.2 1.2v.6c0 .3 0 .4.3.2l1.2-.8.2-.1c-.2.5-.5.9-1 1.1a13.8 13.8 0 0 1-.9.6c-.2.1-.3 0-.4-.2V3c0-1-.6-1.8-1.4-2.1l-.8-.4a.8.8 0 0 0-.3.7c0 .6 0 1 .2 1.7l.1.6c.1.3.5.4.8.4.2 0 .4-.3.1-.8l-.4-.7-.1-.3V2l.2.1a5.3 5.3 0 0 1 1.1 2c.2.2 0 .3-.2.4-.7 0-1.4 0-2 .2-1 .2-1.4.6-1.8 1.3l-.2.7 1.4-.1a4 4 0 0 0 1.4-.5l1-1h.4c1.3.6 2.2 1.4 2.8 2.7l.2.3v.2h-.1l-.7-.2-.2-.3-.2-.6c-.2-.2-.2-.2-.5-.2l-.4.2c-.2.1-.3.1-.4 0l-.2-1c0-.3-.2-.3-.5-.2a3 3 0 0 0-1.4 1.4c-.3.6-.4 1-.1 2.5 0 .3.3.7.6.8l2.6.8h.1v.2l-1 .7c-.3 0-.3 0-.4-.2a2 2 0 0 0-1-1c-.3 0-.3 0-.4.2l-.4 1c0 .1-.1.2-.3 0-.7-.5-1.5-.6-2.4-.4-.5 0-.7.1-.6.6.2.7.6 1.2 1.2 1.6l1.1.6a.6.6 0 0 0 .3-.2c.2-.2.1-.4 0-.6l-1.6-1 .3-.3h.3c.7.4 1.2 1 1.8 1.4.2.3.4.3.5-.1l.3-1.1v-.1h.2l.1 1-.2.9c0 .3-.3.4-.5.4-.7-.1-1.3.1-1.9.3a5.6 5.6 0 0 1-.9.1l-.6-.1-.1-.2a1 1 0 0 1 .3 0c.3 0 .7 0 1-.2a1.4 1.4 0 0 0-.4-.3c-.6-.5-1.3 0-1.9.3-.3.2-.3.2-.2.6.2.5.6.6 1 .6h1.3l1-.5h.4l-.1.4-.9.5-.2.1-.3.3c.1.1.2.3.4.3l1.1.3c.7.1 1 0 1-.7l.4-1c.1-.2.3-.2.4 0l1.3 2.3c0 .2 0 .3-.2.3a63.5 63.5 0 0 1-2.9-.4c-.3 0-.6-.3-1-.4-.4-.2-1-.4-1.5-.4s-.8.3-.6.8l.7 2c.2.4.7.6 1.2.7.2 0 .1-.2 0-.3l-.8-1.7v-.2h.2c.4.8.9 1.4 1.3 2v.5l-.4.1c-1-.1-2-.4-2.9-.8l-.2-.4h.6c.2 0 .4 0 .3-.2a1 1 0 0 0-.5-.4 6 6 0 0 0-1.5-.6c-.3 0-.5.1-.4.4 0 .3.2.6.4 1a.5.5 0 0 1 0 .3l-1.1-.2c-.8-.4-.8-.6-.8-1.5v-.7c.1-.3.2-.4.4-.3l2.3.7.7.4c.2 0 .3 0 .3-.2a.7.7 0 0 0-.4-.6l-2.5-1c-.2-.1-.3-.2-.2-.4.4-.6.5-1.2.4-1.9l.1-.2.3.2a.6.6 0 0 1 0 .3c.1.6.5 1 1 1.4.7.8.7.8 1.8.5l.3-.2-.3-.3-.7-.2c-.7-.3-.9-.8-.7-1.6l.7-2 .1-1c0-.3.2-.3.3-.3l1.6-.1c.4 0 .8-.5 1-.8l.5-.8a1 1 0 0 0-.5-.3l-.6.1c.2-.4.3-.7.3-1.1l-.1-.8c-.1-.2-.3-.3-.5-.1-.4.3-.7.7-.8 1.2a24.9 24.9 0 0 0-.3 1.6 1.5 1.5 0 0 0 .3-.2l.5-.2h.4c-.1.2-.3.2-.4.3a3.4 3.4 0 0 1-.8.5c-.3.1-.4 0-.3-.3l.1-.8-.1-1.2-.6-1.6a4.5 4.5 0 0 0-.4-.7c-.1-.2-.3-.1-.6.3-.5.5-.7 1-.9 2v.2l-.4.3-.2-.1.3-1.1c0-.5-.2-.8-.5-1l-.8.6a1 1 0 0 0 0 1.2c.4.6.4 1.3.2 2.1L11.1 9l-.5-1c-.2-.2-.3-.7-.2-1 .2-.3.9-.4 1-.8.3-.3.2-.5.5-.9.2-.2.6-.7 1-.5.8.5 1.8.6 2.8.4.4 0 .5 0 .7-.5 0-.3.1 0 .5-.2.6-.2.9-.7.9-1.4v-1l-.3-1h-.3l-.9 1.4-.3.7c0 .1-.2.2-.3 0a3.3 3.3 0 0 0-.6-.5C15 2.5 15 2 15 1.5c.2 0 .3.2.4.4 0 .3.1.6.4.7.2.2.5-.4.5-.9a.8.8 0 0 0-.1-.3c-.3-.5-1-1-1.5-1s-.9.7-.7 1.3l.2.4c-1.2.6-1.5 1-2 1.6 0 .1-.1.3 0 .4.2.4 0 .6-.4.9a4.2 4.2 0 0 1-.7.3h-.2a.3.3 0 0 1 0-.2l1-2c.3-.7-.4-1.4-1-1.6-.3-.2-.7-.1-1 .2-.6 1-.6 2.1.1 3.2l.1.1c.1.2.1.3-.1.3l-1.6.1a2.1 2.1 0 0 0-1.6.9c-.1.2-.3.2-.4 0-.5-.2-.8-.1-1.2.1L3.7 7l-.5.1L3 7s0-.2.2-.2l.9-.2.3-.1.1-.4-.3-.2A5.3 5.3 0 0 0 3 6c-.9 0-1.5.4-2.1 1-.3.3-.3.6 0 .8.7.5 1.4 1 2.4.8L4 8l.7-.7C5 7 5.6 6.5 6 7c.6.7.7 1.5 1.7 1.3.4 0 .5-.1.7-.5v-.4c0-.3 0-.4-.4-.3l-.5.2h-.3l.1-.4.6-.3a41.6 41.6 0 0 1 2.2-.5.6.6 0 0 1 .2 0v.2c-.3.6-.7.8-1.2 1l-.2.4c-.4 1-.2 2 .5 2.8l.8.7c.6.3.7.8.9 1.3l.4 1c-.4.3-.8.6-1 1-.1.2-.2.1-.3 0l-.2-.7c-.3-.6-.7-1-1.4-1l-.8-.2c-.3 0-.5.1-.6.5-.2.8-.2 1.6.6 2.4l.6.4a4 4 0 0 0-.4.2 4 4 0 0 0-1 .4 2.7 2.7 0 0 0-.8.7c0 .2.4.4.7.5 1 .4 1.8.4 2.7 0 .5-.1.5 0 .6.4l.2 1.1c.1.3 0 .4-.3.3-1.4-.4-3-1-4.2-1.8a7 7 0 0 0-1.5-.5c-.2.1-.4.3-.5.2-.4 0-1.2-.3-1.5-.5a.4.4 0 0 1-.2-.2.4.4 0 0 1 .2 0l1.8.1.3-.1a.5.5 0 0 0-.2-.2c-1-.8-2.1-.6-3.2-.4-.4 0-.5.2-.2.5.6.8 1.3 1.4 2.3 1.5h2c1.1.7 2.3 1.4 3.6 1.8v.2c-.5 0-1 0-1.4.2l-1.3.2c-.4 0-.5.4-.3.8.4.5 1 .8 1.6 1 .5.1 1 0 1.4-.1.6-.3.9-.7 1.4-1 .3-.2.8 0 1.1.1l1.4.4c.7.2 1.5.2 2.3.3h3.2a7.9 7.9 0 0 0-.4 1.2c-.1.2 0 .3.2.3.3 0 .7-.3.9-.6v-.8l.2-.3.5.1-.3.8-.2.4.5.1c.7 0 .8-.1.8-.8a3.9 3.9 0 0 0-.1-.6c0-.5 0-.9.5-1.1.4-.2.9-.2 1.3-.1 1.4.1 2.9 1 3.8 1.7.6.4 0 1 0 1.9v1.3c0 .4.2.7.3.8l1.6 1c.5.4.7.6 1.4.8h.4a1.6 1.6 0 0 0 0-.6l-1.2-.5-.3-.2.4-.2.8-.2a.5.5 0 0 0 .2-.1l-.2-.2-1-.3c-.1 0-.2 0-.2-.2a1 1 0 0 1 .3-.2h.9a.4.4 0 0 0 .2-.2l-.2-.2-1-.5-.2-.3h1.1l.2-.2a.6.6 0 0 0-.1-.2l-.8-.5c-.2 0-.3-.2-.3-.4h.4l.7.2h.3a.3.3 0 0 0-.1-.3l-.4-.2-.6-.6c-.1 0 0-.2 0-.2h.1l.8.2a.7.7 0 0 0 .3 0l-.1-.3-.7-.5v-.4l.3.1h.4l.3.1a.4.4 0 0 0 0-.2 5 5 0 0 0-.2-.6V20h.2l.9.3h.3L31 20l-.2-.4v-.2h.3l1 .5h.3l-.3-.6.1-.1.7.2.7.1a.5.5 0 0 0 .2 0l-.2-.6a.5.5 0 0 1 .3 0c.3 0 .5.3.9.3l1.2-.1c1.6-.3 2.8-.4 4.3-.8a15.5 15.5 0 0 0 1.9-.8h.2c.4 1.1 1.3 1.5 2.2 1.6h.9c.2 0 .3 0 .2-.3-.2-1-.7-1.7-1.4-2.4l-.6-.3c-.2-.3-.2-.6 0-.8l1.7-1a2 2 0 0 0 .9-1.8c0-.2 0-.4-.3-.5a.8.8 0 0 0-.3.2l-.4.9-.2.2-.4.2V13c0-.2 0-.3.2-.5l.9-1v-.3h-.2a2 2 0 0 0-1.1.5l-.7 1-1 2.3-.2.7c-.1.4-.1.6.2.8l1.8 1 .2.3h-.3a2 2 0 0 1-1.5-.6l-.6-.4-1.8.5c-.4 0-.6.2-.8.5 0 .2-.3.3-.6.2l-1.2-.4c-.5-.1-1.1 0-1.7.1H36c-.2.1-.3 0-.2-.2l.2-1v-.4c-.2 0-.4 0-.5.2l-.5 1c-.2.2-.2.2-.5.1a5.1 5.1 0 0 1-1.1-.7l-.7-1.1c0-.2 0-.2.2-.2l1 .8.3.6h.4v-.5c.2-.4.1-1-.2-1.3L33 14c-.8-.5-.9-.4-1.1 0a3 3 0 0 0-.4 1.5c.2 1.2.5 1.7 2 2.4a.4.4 0 0 1-.2.2c0 .1-.1.2-.3.2l-1.8-.1c-.2 0-.3 0-.3-.2-.5-1.8-.2-3.7.7-5.4l.3-.3a18 18 0 0 1 1.1-.6c.2 0 .3 0 .4.2l.2 1.2.1.6c.3 0 .5-.1.6-.3.4-.7.6-1.6.2-2.4 0-.1 0-.3.2-.3l3-1.3c.5 0 1.3 0 2.3.2.2 0 .5.4 1 .6-.6.2-1.2.7-1.7 1.2-.2.1-.3.3-.2.7l.9-.2c.5-.2.7-.2 1.1-.2h.3a.5.5 0 0 1-.1.3c-.2.1-.4 0-.5.2-.2 0-.3.2-.2.4l.4.3c.5 0 1-.1 1.4-.3.2-.2 1-1.3.6-1.4-.3 0-.9 0-1.1-.2a.5.5 0 0 1 .3-.3l1 .1h2c.2-.2.3-.3.2-.4a3 3 0 0 0-1.8-1.6H39l-.3-.2.2-.1 1-.6c.4-.3.7-.7.9-1.3a.6.6 0 0 0 0-.3c-.3-1.1-1-2-2.2-2l-.6-.2c-.2 0-.3.1-.3.3v1c0 .2 0 .3.3.3l1.7.5c.3.2.4.4 0 .7l-1 .6c0 .1-.1 0-.1 0l-.1-.8a.5.5 0 0 0-.1-.2.6.6 0 0 0-.5.4 5.4 5.4 0 0 0-.3.9c0 .4-.3.6-.7.8-.1 0-.3 0-.3-.2l.2-.6a4 4 0 0 0 .3-2V4.6a.4.4 0 0 1 .2-.5l1.7-.6c.1 0 .3 0 .5.2L40.7 5c.3.4.4.4.6 0 .3-.3.5-.7 1-.9.1 0 .1-.2-.1-.3l-1.3-.4-.3-.1-.2-.2.2-.2 1.8-.7.4-.1c.2-.1.3-.3.3-.5l-.2-.7c0-.3-.2-.4-.4-.5-.5 0-1 0-1.4.2a3.8 3.8 0 0 0-1 .7.6.6 0 0 0 0 .6.7.7 0 0 0 .2 0 4.4 4.4 0 0 0 1.1-.5l.4-.4.2.3a35.9 35.9 0 0 1-3.3 1.5l-2 .6h-.2v-.2a58 58 0 0 1 1.2-1.6V2l-.3.6v.2h.2c.6-.1 1.2-.8 1.2-1.5 0-.2-.1-.3-.4-.3-.4 0-.8 0-1.2.2-.7.2-1 .6-1.3 1.3a6.3 6.3 0 0 0-.2.9c0 .3-.4.4-.7.6-.4.3-.7.3-1.1.3a6.9 6.9 0 0 0-1 .3v-.3l.6-1.1c.4-.5.3-.8-.3-1a2 2 0 0 0-2.4.8l-.7 1.6c-.1.3 0 .5.3.5.5.1 1.2 0 1.6-.2v.9l-.4.6c-.2.3-.4.4-.7.3a15.8 15.8 0 0 1-1.6-.9c-.6-.3-1.2-.6-1.8-.6a.9.9 0 0 1-.3 0c-.2 0-.2-.1 0-.2v-.6L26.5 3l-.3-.7.8.3.2 1 .4.6c.1.1.3.2.4.1 0 0 .2-.1.2-.3 0-.3-.4-1 .2-2.3.3-.6 1.2-1.7 1.7-1.7.3 0 .6.1.7.6l.3.8c0 .3.2.3.4.3.5 0 1.3-.4 1.9-.4.4-.1.7.9.9 1.2.3.5.4 1 .8.4a48.5 48.5 0 0 1 1.4-2c.8-.4 1.8-.5 2.6-.4.2 0 .3.1.2.4v.7h.3c0-.2.3-.3.4-.4l.3-.4c.5-.5 1-.8 2-.8.5 0 .9.1 1.3.3.3 0 .4.1.3.4l-.3 1c-.1.4 0 .5.4.7l.8.6.4-.1c.4-.9 1.2-1.7 1.9-2.1.3-.2.4-.2.5.1l.4 1.4V3l.4-.5.7-.7a3 3 0 0 1 1.7-1 5 5 0 0 1 2 .3c.3 0 0 .4-.2.7 0 .2-.2.3-.3.4 0 .2-.1.2-.3 0l-.5-.7c-.3-.3-.9-.1-1.3.1a5.4 5.4 0 0 0-2 2c-.2.5-1.2 1.7-1.6 2h-.3v-.2a7.2 7.2 0 0 0 1.2-3.7c-.2 0-.4 0-.6.2a2.3 2.3 0 0 0-.7.7 7.2 7.2 0 0 0-1 3.2c0 .2 0 .5-.3.6l-1 .5h-.2c.2-.9 0-1.5-.5-2.3 0-.2-.2-.2-.4-.2l-.4.3c-.8.7-1.2 1.7-1.2 3 0 .1.2.1.4 0a1.4 1.4 0 0 0 .3-.4l.7-1.3.3-.2a.5.5 0 0 1 0 .3l-.1.8c-.1.3-.5.8-.9 1l.1.4c.9 0 1.4 0 2.1-.5.8-.4 1.3-.7 1.7-.7l1.5.5-.3.2-.9.7c-.4.3-.5.4-.5 1.1l.2.9.2.2.2-.1 1-1.3.2-.1v.2c0 .5-.3.9-.6 1.2l-.2.3c-.3.3-.3.4 0 .8s.3.9.2 1.4a21.6 21.6 0 0 0-.2 1.4l-1 .4-.8.6c-.4.3-.4.5-.4.6l.2.2.4.2c.4.1 1.2 0 1.4-.5l.1-.5.3.1c.2.5.3.9.7 1.2l-.3.4c-.2.4-.3.6-.6.6h-.3c-.2 0-.4 0-.4.3v.9c0 .3-.1.6-.4.5-.6 0-1-.5-1.7-.4-.5 0-.8-.1-1.1-.3l-.7-.4-2.6.5-2.8.5-2.1.4c-.2 0-.2.2-.3.4 0 .6-.3 1.1-.4 1.7l.2.3.2-.2.4-.6c.2-.3.9 0 1 .4.1.2-.2.3-.2.6 0 .2.4.4.4.7l-.2.5c1 .6 1.2 1.1 1.2 2 0 .2 0 .3.2.4l.4.5c.4.5.8 1.3 1.1 1.4h.9v.2c0 .2-.3.5-.6.5-.7.3-1-.8-1.4-1.3a5 5 0 0 0-.6-.8c-.3.3-.7 1.6-.7 2.3l.3.8.7 1.5c.3.4.7.5 1.1.6.4.2.7.2 1 .1h.4V31l.3-2.4.1-1.6c0-.3.3-.8.7-1.1.4-.3.6-.7.5-1.2a1 1 0 0 1 .2-.5c0-.3-.2-.3-.5-.3-.2 0-.3-.2-.2-.5l1-1.3a3.8 3.8 0 0 0 .4-.7c0-.4 0-1 .3-1h1.4c.4 0 1.1.4 1.3.6v.3l.7.6c.3.3.6 1.1 0 2.5.3.2.3.4.3.7 0 .3 0 .3.3.4.3.1.5.3.7 1 .2.5.9 2 1.3 6-.1 1.1-.3 2-.6 3 .3 1.9.6 4.1.8 7.3l.3 5.6c.5 0 .7.2.8-.3l.1-.4a.6.6 0 0 1 .2-.2.5.5 0 0 1 .2.2l.3 1 .3.6.2.2h.2a2 2 0 0 0 0-.5l.1-.8c0-.1 0-.2.2-.3l.2.2.5 1c0 .2 0 .3.2.4h.2V48l-.2-.7.1-.3a.6.6 0 0 1 .2.1l1.5 2 .1.2h.3a.4.4 0 0 0 .1-.3l-.1-.5v-.3l.4.2.5.6.3.5.3.2a.5.5 0 0 0 0-.4L56 49c.2 0 .4 0 .5.2l.3.4c.2.3.5.6 1.2.7v.1l-.6.3h-2.5a2.9 2.9 0 0 0-1.9.4c-.4.2-.8.2-1.3.2H49c-1.6-.1-2.2.1-3.8.3H44c-.7 0-2.1-.3-2.1-.7l.2-.8c0-.2 0-.2-.3-.3a5.6 5.6 0 0 0-.5 0c-.8-.1-1.7 0-2.5.1-.5 0-1 .2-1.4.3-1.2.1-1.8 0-2.4-.5-.4-.4-.6-.5-.9-1-.5-.7-1.4-1.5-2.4-2.2-1-.8-2.2-2.3-3-3.3-.2-.2-.5-1.2-.6-1.5a3 3 0 0 1-.2-1.3l.4-.2 1.1-.3c.2 0 .4-.2.4-.3v-.1l-.1-.1h-1.2L28 39c0-.2.2-.3.3-.4.7-.1 1.2-.3 1.6-.6a.4.4 0 0 0 0-.2l-1.4-.1-.4-.3c0-.2.2-.2.3-.3l.8-.4.6-.4v-.2c-.5 0-1 0-1.6-.2a1 1 0 0 1-.1-.1.7.7 0 0 1 .2-.3c.3 0 1-.1 1.3-.3a.5.5 0 0 0 .2-.2.6.6 0 0 0-.2-.2 7.8 7.8 0 0 1-1.3-.2c-.1 0-.2 0-.2-.2l.2-.2 1.2-.2a.8.8 0 0 0 .3-.3l-.3-.2-1-.2a1.6 1.6 0 0 1-.3-.1V33l.3-.1.7-.2c.2 0 .4-.2.4-.3a.2.2 0 0 0 0-.2h-1.2L28 32l.3-.2c.3 0 .7-.2 1-.4l.1-.2a.7.7 0 0 0-.2-.1 11.3 11.3 0 0 1-1-.3.7.7 0 0 1 0-.3l.1-.2h.6a3.3 3.3 0 0 0-.3-.6.5.5 0 0 0-.2-.2c-.3-.2-.7-.3-1-.6-.6-.3-1.2-.7-1.7-1.2a3.9 3.9 0 0 1-1.3-2 4.4 4.4 0 0 1 0-1.5c0-.4.3-.8.5-1.2v-.3a6.6 6.6 0 0 0-.9-1 1.6 1.6 0 0 0-.6-.3L22 21c-.4-.1-.7-.2-1-.1a1.9 1.9 0 0 0-.4.7l.3 1.5c.4 0 1 .2 1.5.5.4.3.5.4.7 1 .4 1.2.5 2.7.7 4.3.3 1.6-.5 2.9-2.1 3a3 3 0 0 1-1.1-.2c-.3 0-.6-.2-.7-.6l-.5-1.3c0-.4-.2-.8-.3-1L15.6 30l-3 1.5c-2.1.8-4.4 1.4-6.5 1.4-1.1 0-2.4-.3-3.2-.6-.8-.3-1-.6-1.2-1.6a10.8 10.8 0 0 1 .7-5.3c.3-.6.6-1 1-1.2a6.5 6.5 0 0 1 1.4-.4c.5-.2.9-.2 1.4-.2l1.1.2c.6.3.7.7.7 1.3v1.6c.8.1 2.3 0 3-.1a8 8 0 0 0 2.1-.8c.8-.3 1.8-1.1 3-1.7zM40 37.5l.2 1.2v2.1c-.2 1.2 0 2.5-.2 3.7l-.2 2.4c0 .3 0 .4.3.4.6.2 1 .2 1.3.2.9 0 1.5-.4 1.4-.9l-.2-1c-.2-1-.2-1.4-.2-2.4h.2l.7 2.8c.2.6 0 1.7.2 2.3 1.5.2 3.3 0 4 0 0-1.3 0-2.6-.5-3.1l-1.3-1a6.9 6.9 0 0 1-1.6-1.7c-.7-1-.8-1.4-1.4-2.4l-1.3-2.3a4.3 4.3 0 0 0-.5-.7l-1.4-.3c-.7 0-1.1-.1-1.5-.5-.3-.4-.4-.6-.2-1 0-.3 0-.4-.2-.6-.2-.3-.2-.5 0-.7.5-.4 1.1-.9 1.8-1a.3.3 0 0 0 .1 0l-.1-.6-1.2.2c-.9 0-1.6-.4-1.9-1.5l-.8-2c0-.3 0-.6.2-1l-.7-1c-.5-.2-1-.4-1.3-.8-.2-.2-.3-.2-.4-.1l-.3.3c-.2.2-.5.2-.8 0-.3 0-.5-.4-.5-.7 0-.4.3-.7 0-.9-.2-.3-.5-.7-.1-1l.4-.1a1 1 0 0 0 .5-1.1c0-.4-.2-.5-.6-.5-.5 0-.7-.3-.7-.6 0-.4.4-.6.7-.5.1 0 .3 0 .4.2 0 .1.1.3.3.3.5 0 1-.6 1-1.1 0-.2-.2-.3-.6-.2-.6 0-1.4.3-2.2.6-.4.2-.5.5-.2.9l.1.3c.1.2.1.3 0 .4l-.3.1c-.2.2-.2.4 0 .7a.9.9 0 0 0 .1.2c.2.2.2.3 0 .5s-.2.5-.1.8l.2 1.8v2c0 .4.3.8.7 1.3l1.5 1.7a4 4 0 0 1 1.3 2.6c0 .5.2.7.7 1 1 .3 1.4.8 1.5 1.6.2 1.4-.5 2.7-1.7 2.6-.6 0-1-.5-1-.8 0-.3.2-.7.5-.8a.8.8 0 0 1 .3 0 .6.6 0 0 1 0 .2l-.1.4v.5c.2.1.4.2.7.1.2 0 .4-.3.6-.6.5-1 .2-2.2-.9-2.5h-1.1c-.7.5-1.3.7-1.9 1.2a.4.4 0 0 0 0 .4 56 56 0 0 0 .4 6.8l.2.8.3.3.3-.3.5-.8h.2l.1.1V46l.3.3.2-.3.1-.5a.4.4 0 0 1 .3-.1v1l.3.2.2-.3.3-.5.7-.6a.5.5 0 0 1 .3 0 .6.6 0 0 1 0 .2l-.5 1.2-.2.5h.3s.2 0 .2-.2v-.2l.3-.3a.5.5 0 0 1 .2.3l.2.5.3.2.2-.1.2-.6.3.1.2.4 1.2.1v-3.5l.3-3.2.2-3h.2zm15-20.4l-1.5-.1c-.3 0-.9 0-.9.3l.3.3c.7.5 2.8.6 3.6.5a1.6 1.6 0 0 0 0-.6c-.3-.6-1-1.2-1.7-1.4-.7-.2-1.6-.2-2.2 0l-.2-.5a7.2 7.2 0 0 0 0-2.8c0-.5-.1-.7-.4-1-.1-.2-.3-.2-.4 0a3.2 3.2 0 0 0-.5.4c-.7.9-.6 1.4-.5 2.7l.4.1c.3 0 .3 0 .3-.4l.1-1a.8.8 0 0 1 .1-.2l.3.2v.4c0 .7-.3 1.2-.3 1.5 0 .1.5.3.4.5 0 .2-.8.3-1.3.4-.3-.4-.6-.8-1.2-1-.3-.1-.7-.2-.4-.4l.4-.2c.7-.3.5-.7.4-1.4 0-.2-.1-.3-.3-.3-.4 0-.6 0-1 .2l-.4.4-.8.9H47v-.2l.6-1.6c0-.3.2-.4.4-.4a3 3 0 0 0 3-.7c.2-.4.2-.5-.2-.8-.6-.5-1.4-.8-2.3-.5a1 1 0 0 0-.4.3l-.2.4H49l.3-.1.2.1-.2.2-.6.1-1.2.3c-.2.1-.3 0-.3-.2 0-.3 0-.6.3-.8.5-.4.8-.9 1-1.5 0-.4-.3-.9-.4-1.2v-.2l1.3.6c.2 1.1.9 1.9 2 2.2l1 .4c.4 0 .6 0 .6-.4v-.5l.7-.2c.6 0 1.2.3 1.8.5l.2.3h-.3c-.5 0-.9-.2-1.3-.3-.3 0-.5.1-.6.4.2.3 1 .7 1.4.8.4.1 2 .3 2-.1a5.9 5.9 0 0 0-.2-1.3c0-.4-.4-.6-.7-.7-.7-.2-1.2-.3-2-.3h-.3l-.8.3V9c-.2-.7-.5-.8-1-1v-.5c.5-.3 1-.7 1.2-1l-.7-.4c-.6-.2-.7-.5-1.2-.7a3 3 0 0 0-1-.2c-.4 0-.9 0-1 .2 0 0 0 .2.2.3.3.3 1 .4 1.3.7h.1l-.1.1a3 3 0 0 1-1.3-.3l-.4-.3c-.3-.1-.4 0-.6.3-.1.3 0 .4.3.5.7.4 1.2.7 2.1.8l.2.4a22.7 22.7 0 0 1-1.1-.1 3.4 3.4 0 0 1-.7-.2l-1.5-.8-1-.3c-.1-.1-.2-.2 0-.3l2.7-1.7h.5c.4 0 .6.2 1 .3.3.1.5.2.6 0a4 4 0 0 1 .5-1.5c.4-.6 1-.9 1.7-1.4C54.1 1 55 0 55.3 0c1 0 1.8 1.6 2 2.2.1.5-.6.9-.1.9.4 0 .8 0 .8.4 0 .6-.2 1.3-.5 1.7-.3.4-.7 1-1.2 1.3v.2c.8.5 1.7 1 1.7 1.8 0 .5-.1.8-.4 1-.2.2-.4.4-.4.7v1.5c0 .4-1.2.5-1.3.7a5 5 0 0 1-.4 3l.3.5c1.2.9 1.4 1.7 1.5 2.3-.3.4-.9.7-1 .7-.9 0-2.6-.6-3-.7-.1.3 0 .5.1 1 .2.4.5.7.5 1.2 0 .2 0 .5-.6.6a4 4 0 0 1-2.7-.8l-.4-.2c-.3-.2-.6 0-.7.2l-.2.6c-.1.4-.3.4-.7.3-1.3-.3-1.9-1.6-1.9-2.8l.1-.2.2.1c0 .3 0 .5.2.7 0 .3.1.7.3 1 .3.4.6.7 1 .7.2 0 .3-.1.4-.4.3-.5.6-1 .5-1.6 0-.2-.1-.5-.3-.7l-.4-.4.3-.2c.6.3 1 .2 1.3 0 .3 0 .4-.2.5-.4a20.1 20.1 0 0 1 2-.4c.8 0 1.6.1 2.3.4v.2zM20.9 39c.4 0 1 .2 1 .7a1.4 1.4 0 0 1-.1.2.3.3 0 0 1-.1 0c-.2-.4-.5-.6-1-.5a2 2 0 0 0-1 .6c-.2.2.1.3.4.5l.5.3-.3.6a4 4 0 0 1-.6-.3l.3-.4h.6c0 .5-.7 2.2-.4 2.3.9.1 2-1 2.2-2.7 0-.6.3-1 1-1.1.7-.3 1-.7 1-1.5-.1-.5.1-.3.4-.7l.2-.3c0 .2.2.4.1.6-.2.6 0 1.2.3 1.8l.7 1.7.4.2c.5 1 1.2 2.7 2 3.4.7.6 1.4 1.6 2 2.2.5.3.7 1.2 1.2 1.4.3 0 .3.3.3.6s0 .4.2.4h.7c.2-.1.4 0 .3.2 0 .1-.1.2-.3.2h-.7l-.3.1.1.3 1.2.3.2.1-.2.3a1.2 1.2 0 0 1-.5 0c-.3 0-.7-.3-1-.4l-.3-.3H31v.5l.1.3-.3.1-.9-.6c-.3-.2-.6-.2-1 0l-1 .7c-.4.2-.8.7-1.3.7-.3 0-1-.5-1.2-.6l-1.4-.3c-.5-.1-1 0-1.4.3l-2 .3h-3a4 4 0 0 0-1.2.2H16c-.3 0-.6 0-.8-.2a1.1 1.1 0 0 0-.9-.1h-1c-.3-.4-1-1-1.3-.9-1.2.2-1.8 1-3 .6-.8-.2-1.3-.4-2.1-.1h-1c-.3 0-.4 0-.3-.4v-.1c0-.3-.2-.6-.5-.5-.4.1-.6.5-.9.6-.5.3-1 .2-1.7 0-.4-.2-.8-.1-1.2.1-.3.1-.7.8-1 .8L0 51v-.3c.1-.3.5-.6.7-.7.7-.3 1.4-.4 2.2-.3.4.1.8.2 1.1 0 .3-.1.6-.1.8-.3.5-.2.9-.4 1.4-.2.4-.2.5-.3.7-.6v-1.4l.5-1.2c0-.2.2-.2.3-.2.4.5.8 1 .6 1.5-.1.4.6.6.5 1-.1.2 0 .4.2.4h.2c.2 0 .2-.1.2-.4a8 8 0 0 0-.7-3.3l-.3-.8c-.3-.5-.2-1 0-1.5l.3-1a2 2 0 0 1 1-1.1l.3.1c.7 1 1 2.3.6 3.6l-.2 1.1v.3l.2-.2c.4-.5.8-1 1-1.6.3-.6.8-.8 1.4-1 .6 0 .8 0 .6.6l-.3 1a2 2 0 0 1-1 1.4c-.3 0-.6.3-.8.5a1.4 1.4 0 0 0-.3.2v.3h.5c.2-.3.5-.4.8-.6l1-.6c.2 0 .2 0 .2.3s0 .7-.3.8l-1.1.3a2 2 0 0 0-.5.4l-.4.8v.3h.3l1-1c.3-.2.4-.1.5.2a.9.9 0 0 0 .2.4l.4-.3.2-.4c0-.3.5-1.5.8-1.9l.3.1V47c0 .5.1.6.5.4l1-.5.2-.1h.3v.3l-.4.5v.4h.3l.7-.4h1.1l1.1.4c.3 0 .7 0 1-.2a9.3 9.3 0 0 1 1.5-.6 5 5 0 0 0 2-1.2l.4-.3c.2-.1.3-.6.3-.7v-2l.2-.4h.2v3.5c0 .2-.3.5-.5.5-1.2.5-2.5 1-3.8 1.3-.6.2-1.2.1-1.8.1H18c-.4 0-.9.4-1.3.4l-3 .3-2.7.7a1.6 1.6 0 0 0-.6.3l-.1.2.3.1h.6a33 33 0 0 1 1.8 0l.4.2c.3.2.6.2 1 .2.3-.1.6 0 .9.2.5.4.6.4 1.2.1.5-.3 1-.3 1.5-.2.6 0 1.2 0 1.8.2l1.4.2c.9 0 1.6-.1 2.1-.8l.8-1.1c.2-.3.4-.4.7-.4l2-.2c.3 0 .5.4.5.6 0 .2-.1.4-.3.3h-1.5c-.5-.1-.9 0-1.2.4-.2.2-.1.3.1.4h.4c.2 0 .3.2.4.4 0 .2.4.3.9.3l1.6-.1c.2 0 .4-.4.6-.6.4-.5.6-.7 1.3-.5.5 0 .8-.4 1.2-.4.5 0 .3-.7.1-1a5.4 5.4 0 0 0-.7-1c-.7-.5-1.2-1.5-1.8-2.3-.5-.5-1-.8-1.4-1.4a33.4 33.4 0 0 1-.9-1.6l-.6-1.2-.6-.9c-.3-.3-1 0-1.4.1l-.4.3c1 .8 1 2 .7 2.8 0 .3-.2.3-.5.2l-.7-.3H22l-1.8 1c-.3-.4-.8-1.3-.8-1.7 0-.4.2-.7.3-1a7.5 7.5 0 0 1-1-.6v-.3c.7-.6 1.5-1.2 2.2-1.2zM2 30.2c.1.6.4 1 1 1.3.7.4 1.8.5 2.7.6l3.6-.3c1.9-.4 4.1-1.2 5.8-2a16 16 0 0 1 3.5-1.4 8 8 0 0 1 3.8 0c.6 0 .7 0 .7-.4l-.2-.8c-.1-1-.1-1.8-.5-2.7 0-.1-.2-.3-.5-.4-.3-.2-.6-.3-1-.3a6.5 6.5 0 0 0-1.9 0 9.7 9.7 0 0 0-2.9.9l-2.7 1.5a7.9 7.9 0 0 1-4 1.1l-2.6-.1a9 9 0 0 1-3.8-1c-.2-.2-.4-.1-.5.2l-.2.7c-.2.8-.4 2-.3 3.1zm44.5 10.5a17.5 17.5 0 0 1-1.8.1l.2-.2c.5-.2 1-.4 1.3-.7.2-.2.2-.3.2-.5a8 8 0 0 1-2 .6h-.2l1.7-1.2c.3-.2 0-.3 0-.4l-1.8.6H44l.3-.3 1.7-1v-.2h-.3l-2 .2h-.2a.2.2 0 0 1 0-.1 3.6 3.6 0 0 0 1.1-.8c.1-.2.1-.3 0-.4l-.3.2-1.1.1v-.2l.8-.5.5-.4v-.2a7 7 0 0 1-1.3.3.7.7 0 0 1-.3 0l.1-.2 1.4-.7c.2-.1.3-.3.3-.4h-.2l-1.3.4-.3-.2.2-.2 1.8-.8 1-.8.6-.6v-.1c-1 .5-1.3.8-1.6 1a8.7 8.7 0 0 1-1.6.8.4.4 0 0 1-.2-.1.8.8 0 0 1 0-.2c.2 0 .5-.4.7-.7l1.8-.9.9-.6V31l-2 1v-.3c.5-.3 1.2-.8 1.7-1.4v-.2l-.3.1-1 .4h-.1l.1-.4a6 6 0 0 0 1.3-1.3v-.4c-.4.3-.9.5-1.3.6h-.1v-.2c.5-.5.9-.8 1.2-1.3v-.2l-1.1.3h-.2v-.3l.9-1v-.2a7 7 0 0 1-.7.1c-.1 0-.2 0-.3-.2l.3-.1.4-.3a.6.6 0 0 0 .2-.2l-.3-.1-.9.1c-.6.2-.6.2-.7.4l-.7 2.2c0 .2-.2.4-.4.5-.3.1-.2.3-.3.5-.1.6-.2.6-.4 1l-.6 1H41v-.7l-.3-.9v-.4l.1-.9.1-1.7-.1-.1a.4.4 0 0 0-.1.2l-.3 1.2c-.2.9 0 1.6 0 2.5-.1.7-.3 1.4-.2 2.1v.4l.7-.2c.5-.2.9-.2 1.4-.7.3-.3.3-.9.4-1.4.2-.6.4-.8.6-1l.2.1-.3.9c-.1.3-.3.8 0 .9h.3v.2c-.3.3-.6.7-2 1.1-.2 0-.6.5-.6.7a3.6 3.6 0 0 0 0 .9c.2 1.4.9 2.8 1.7 4.2.7 1.1 1.2 2 2 2.8.3.3.7.5 1.3.3l.8-.5v-.3zm-20-21.1c0 .5 0 .7-.8.5L25 20c-.3-.1-.6-.2-.8-.5-.3-.4-.7-.4-1 0l-.3.2-.2.2v-.3c0-.4.2-.6.5-.8l.8-.3c.7-.2 1-.6 1-1.4l.1-1.5c0-.3 0-.4-.4-.3L23 16a.7.7 0 0 0-.4.4l-.4.9-.1.1-.2-.1-.4-.6a10.1 10.1 0 0 0-.4-.7c-.3-.3-.3-.4 0-.6l1-.8c.4-.4.6-1 .6-1.6v-1c0-.4 0-.5.5-.4.2 0 .5 0 .7.2l1.3.6c.2.2.4.4.4.6 0 .4-.2.6-.5.5a9.2 9.2 0 0 0-1.4-.5c-.3 0-.5 0-.6.3 0 .5.4.5.4.7-.2.4-.8.5-.9.9 0 .3 0 .5.3.4l.9-.3 1.2-.6c.5-.2.8-.1.9.5l.7 4.1v.6zm12-4.3a2.2 2.2 0 0 1 .3-1.1c.2 0 .4 0 .5.2.3.7.9 1.4 1.7 1.8.2.2.5.2.7.2l.2-1.3c0-.5-.2-1-.6-1.3-.3-.4-.8-.7-1.2-1l-.5.1v.4c.2.3.7.6.8.9v.3a.5.5 0 0 1-.2-.1 8.2 8.2 0 0 1-.6-.5 5 5 0 0 1-.8-.8c-.2-.2-.4-.2-.5 0-.4.7-.7 1.4-.7 2.2-.2 1 .3 1.9 1.1 2.3.4.2.7.1.9-.2l.4-1V16l-.7-.7a1 1 0 0 0-.3-.2.4.4 0 0 0 0 .2v1a.6.6 0 0 1 0 .2.6.6 0 0 1-.4-.4l-.1-.7zM4.4 3.4l.5.7c.3.4.4.8.5 1.2.1.3.3.3.5.2a.8.8 0 0 0 .4-.7A2.3 2.3 0 0 0 6 4c-.2-.7 0-1.4.6-1.9.3-.1.4-.4.4-.7l-.3-1c0-.2-.3-.2-.4-.1-.8.4-1.7 1.5-1 2.5V3A1.7 1.7 0 0 1 5 3L3.6 1.6a1.9 1.9 0 0 0-.6-.3c0 .1-.2.5 0 1.3 0 .7.2 1.4.7 2.4l.5.6.6.2v-.6a16.3 16.3 0 0 0-.4-1.4l-.1-.4zm50.5 2.9l1.1-.4c.9-.3 1.4-.9 1.6-1.8.1-.3 0-.4-.3-.5l-.6-.1c-.5-.2-.6 0-.8.6-.2.4-.4.9-.8 1.2-.1.1-.6-.2-.7-.3.8-.5 1.4-1.3 1.8-2.3 0-.1 0-.3-.2-.4a2 2 0 0 0-.9 0c-1 0-2.5 1-3 2.2-.1.1 0 .4 0 .4h.6l.1-.2c.4-.7 1-1 1.7-1.3h.2a.3.3 0 0 1 0 .2 1 1 0 0 1-.3.2l-.7.5-.5.4V5l.3.1h.4l.4.7c.1.2.3.4.6.4zM36.4 6c0 .3-.2.5-.4.4-.6-.2-1-.8-1.6-1-.2-.1-.3 0-.4.3l-.2 1.4c0 1 .5 1.4 1 1.9v.3l-2 1c-.1.1-.4.2-.6 0-.2-.1-.2-.3-.2-.6l.7-2.9c.4-1.5 1-2 2.1-2.1h1c.3 0 .5 0 .5.3v1zm1.4 6.7c0-.7-.6-1-.8-1.6-.3-.6-.5-.6-1-.1s-.9 1-1 1.7c-.3.7-.2 1.4 0 2.1 0 .2.1.5.4.4a.4.4 0 0 0 .2-.4c0-.6.1-1.2.4-1.6l.3-.3v.4l-.2 1.3v.8c.3.3.4.3.5.1.6-.9 1.2-2.2 1.2-2.8zm-31.2 2c0-.7-.2-1.2-.4-1.8-.2-.6-.6-.9-.8-.9-.3 0-.8.6-1 1a3 3 0 0 0-.1 1.3c0 .8.2 1.5.7 2.2 0 .2.3.4.5.2l.7-.7c.2-.4.4-.9.4-1.3zm27 19.3c-.2-1.2-1-2-1.8-2.6l-.4-.3H31v.3l.2 2.4.2 1.7c0 .3.2.4.5.3l1.1-.6c.3-.2.6-.4.4-1.2zm11.7-11.7c-.2-.5-.5-.7-1-.8h-.6l-.9-.2c-.3 0-.5.3-.6.7v.2l.6.2.3.4c0 .1-.2.3-.5.3s-.3.3-.2.6c0 .3.1.6.4.9l.4-.3c.2-.2.2-.4.2-.6 0-.7.3-1.1.8-1.6l-.2 1.1c-.1.8-.4 1.4-1.1 2h.3a.8.8 0 0 0 .7-.2c.3-.3.5-.6.6-1l.2-.4.1.3v1l.4-.3c.3-.7.4-1.7.1-2.3zM54.7 7H54s-.2.4 0 .4c0 .1.1.2.3.2.4 0 .7 0 1.2.2l.3.1-.2.1c-.7.1-1.2.2-1.8-.2l-.2-.1c-.2-.1-.3 0-.2.2 0 .3.3.6.9.8.4.2.8.4 1.2.4L57 9c.3 0 .6-.2.6-.4l-.1-.6-.4-.4c-.6-.6-1-1-2-1 0 0-.2.4-.4.4zm.6 6.7l-.1-1c-.2-.7-.8-1.2-1.5-1.2-.4 0-.5 0-.4.4l.5.7c.2.4.4.7.4 1a1 1 0 0 1-.1.4c-.3-.1-.4-.4-.4-.5-.1-.3-.1-.5-.3-.7 0-.2-.1-.2-.2-.2s-.2 0-.2.2c0 .8.1 1.8 1 2.5l.6.4c.2.1.3 0 .4-.2a6 6 0 0 0 .3-1.8zM6 9.7L5.8 11c0 .4.2.7.6.8 1 .5 2.2.6 3.3.6l.2-.2-.1-.2h-.3L8 11.3a1 1 0 0 1-.4-.2c-.1-.2 0-.4.2-.4l.5.1 1 .5c0 .1.1.2.2 0 .1-.1.2-.2 0-.4l-.7-.6C8 10 7.2 9.7 6 9.8zm23.1 5.8c0 .8 0 1.7-.2 2.6l-.3.3-.3-.3c-.4-1.1-.8-2.2-1-3.4L27 14c0-.3 0-.4.3-.3.6 0 1 .3 1.6.5l.1.4v.8zM4.2 20.4v-.6l.2-1a1.4 1.4 0 0 0 0-.4l-.7.1c-.2.1-.3.3-.3.7v1l.2 1.6c0 .3.2.4.4.2l.5-.5 1-1.2c.4-.4.4-.8.3-1.2-.1-.3-.3-.4-.5-.4-.3 0-.4.2-.5.4 0 .3-.2.5-.3.8a3 3 0 0 1-.3.5zm46.2-2h1c.5.2.7.5.8.7l.1.3a1 1 0 0 1-.9-.1 2.9 2.9 0 0 0-.5-.4c-.3-.1-.7-.2-1 0 0 .2.3.6.5.8.7.5 1 .6 1.6.6h1l.1-.5c0-.6 0-1.2-.5-1.7-.6-.6-1.5-.5-2-.3a1.2 1.2 0 0 0-.4.2.6.6 0 0 0 .2.3zm-20.8-16h.1v.3c-.1.5-.4.9-.8 1.3-.2.1-.2.4 0 .5.2.3.5 0 .7-.1.4-.5.6-1 .8-1.6.3-.6.3-1.5 0-2-.2-.2-.5-.3-.7-.1-.6.6-1.2 1.5-1.2 2.4l.1.4.5-.4.5-.6zm12.2 24.3h.2l.1 1.1v.3l.3-.2.1-.7c.4-1 .1-1.8-.3-2.8 0-.2-.2-.2-.4-.1-.1 0-.2.2-.1.3v.4l-.4 1-.1.5-.1 3.6v.1a.3.3 0 0 0 0 .2.6.6 0 0 0 .2-.1l.2-.6c0-.6.3-.6.3-1.2zM8 3.8a.5.5 0 0 1 0-.2h.6c.3.1.4.1.5-.1.2-.5.1-.9-.3-1a2.3 2.3 0 0 0-.8 0l-1.2.3c-.4.1-.5.5-.2.8.4.4.8.9 1.3 1.2.4.4.8.4 1.3.3.2 0 .3-.1.3-.3a.5.5 0 0 0-.1-.4 1.3 1.3 0 0 0-.3-.2zm-.7 27c0 .2-.1.3-.4.3a4.1 4.1 0 0 1-1-.1c-.3-.1-.3-.2-.4-.4l.1-2 .5-.3 1.1.2c.2 0 .4.4.4.5v.6c0 .5-.2.9-.3 1.1zm33.4 18l.7.2c.4.1.7.2 1 .1.2 0 .4-.2.4-.5 0-.2-.2-.4-.4-.5l-1.9-.4c-.3-.1-.6-.1-.9.1-.4.4-.9.6-1.4.7l-.4.1v.3l.1.2h1.4zm3.3 2c.5 0 .9-.1 1.2-.3l.8-.5.6-.2c.3 0 .5-.3.5-.4 0-.3-.2-.3-.4-.4l-1.5-.2h-.5l-1 .8c-.1.1-.6.3-.7.6-.2.1-.2.3.2.4zM26.9 11.7c0-.3.4-.7.7-.6a.3.3 0 0 1 .1 0l.1.6.2.4c.6 0 1.2-.3 1.4-.8.4-.5.6-1 .8-1.5.1-.2.2-.4.4-.3.1 0 .2.2.1.4l-1 3c-.1.3-.2.3-.5.2l-1.7-.6a.9.9 0 0 1-.6-.8zm12.6 24.7h.3a1 1 0 0 0 .3-.2l.4-.5-.1-2.2-.2-.2h-.9l-1.2 1s-.1.2 0 .2l.2.1.6-.3.4-.2a.3.3 0 0 1 0 .2c-.4.4-.7.9-1.2 1.1v.2l.1.2.6-.3.7-.6c.1.1.2.3 0 .4l-.2.2-.6.5v.2h.1c.2 0 .4 0 .6-.2l.5-.5.2.2zM14 11.2c0 .9-.2 1.7-.6 2.5a1.7 1.7 0 0 1-.3.5l-.3-.6-.6-1.7a2 2 0 0 1-.2-.4l.7-1.1c0-.2.2-.2.3 0zm1.5 17.2c0 .3-.2.5-.6.7-.2.1-.5.3-1 .3 0 0-.2 0-.3-.2 0-.6-.2-1.1-.3-1.6l.2-.4c.4-.4.8-.5 1.3-.5l.5.2zM11 22c-.3 0-1 .4-1 .7v.2c0 .5 0 1 .3 1.4.2.2.3.3.5.1.5-.3 1-.6 1.3-1 .3-.2.5-.6.7-1 0-.2-.2-.3-.4-.4-.3-.1-.7-.1-.8 0-.2 0-.3.2-.3.4a3.6 3.6 0 0 1-.2.6l-.3.4a2 2 0 0 1 0-.6c0-.2 0-.5.2-.8zm4.8 27.5a3.8 3.8 0 0 1-.5 0c0-.2.1-.2.2-.2h.4c.6.1 1-.3 1.6-.4h2.1c.6.3 1.2.5 1.7.1a8.8 8.8 0 0 1 1-.6.6.6 0 0 1 .5 0s.2.3.1.4a.5.5 0 0 1-.3.3c-.9.3-1.8.5-2.8.6-1 0-1.9 0-2.9-.2h-.5zm-12.4-20c0 .2 0 .6.3.8v.2l-1-.1s.3-.3.3-.5l.2-1.9-.2-.3a.4.4 0 0 1 .1-.2c.7.2.8.2 1 .5l.4 1.2a.4.4 0 0 0 .2-.1v-1c0-.2 0-.3.3-.3h.6v.3c-.4 0-.4.1-.6 1l-.1 1-.1.4h-.3a12.5 12.5 0 0 0-.8-1.7h-.1l-.1.4a.9.9 0 0 0 0 .2zm22 4.8a2.7 2.7 0 0 0 0-.6l-.2-.7v-.2c.2-.6.3-1.1.2-1.6a12.6 12.6 0 0 1 0-1.9v-.1c.3 0 .4.1.5.3v.6c.1.5 0 1 0 1.6l-.1 3.2.1.5c.1.3 0 .7-.2 1h-.2c0-.5-.4-1-.5-1.6l.1-.1c.2 0 .3-.2.3-.4zm10.4-8c-.4 0-.8-.3-.8-1l-.7.7c0 .2.6.6 1 .7l.7.8.4-1c0-.8-.1-1.4-.3-1.7-.3-.4-.9-.7-1.4-1-.2.2.1.8.7 1.2-.1.4-.1 1 .5 1.3zM6 25.4l1-.1c.3 0 .6-.1.6-.4 0-.3-.3-.4-.5-.5-.8-.2-2.2-.2-3.2.3l-.6.5c-.3.2-.2.4 0 .5l.8.4.2-.8.5-.4c.4-.2.9-.2 1.4-.2h.2l-.1.2-.4.2-.3.1c0 .2.2.2.4.2zm2.2 5.8l.1-.3v-2.1l.2-.2.2.1.9 1v-1.3c-.1-.3-.3-.5-.1-.5h.8l-.1.5-.2 1 .2 1.3H10a.8.8 0 0 1-.2 0l-1.2-1.3a.4.4 0 0 0-.1.2c0 .3.2.7.4 1 .2.1.2.2-.1.3l-.7.1zm13.2.5c.5 0 1 0 1.4-.4.5-.3.7-1.2.5-1.7a.6.6 0 0 0-.1-.3c-.2-.2-.3-.2-.4.1l-.1.7-.1.4a3.5 3.5 0 0 0-1 0c-.4 0-1.1.3-1.1.7 0 .4.6.5 1 .5zm4.2-5.2l.2.5 1.4 1.2 1 .5a2.5 2.5 0 0 1 1.3 1l.4.4c.2.3.5.5 1 .6h.2c0-.3 0-.3-.3-.5a20 20 0 0 0-2.4-2 29 29 0 0 1-1.5-1l-.7-.4zm-15.4 17a63.2 63.2 0 0 0-.5-1.9l-.2-.1-.1.1-.5 1.4a.7.7 0 0 0 0 .4l.7 2 .3.2.1-.3zm2.6-15.7l.1.4v.2h-.2c-.3-.1-.6-.3-.9-.1v.3l1 .4c.4.1.5.3.4.8 0 .4-.4.6-.8.7a1.6 1.6 0 0 1-.6 0v.4h-.2a4 4 0 0 1-.2-.3l-.1-.7v-.2c.2 0 .3.3.5.4l.7.1.2-.3-.3-.2-.8-.4c-.3-.1-.3-.4-.3-.6 0-.3.1-.6.5-.7l.5-.2.1-.4h.2zM6.4 8.9c-.6 0-1-.2-1.5-.1-.5 0-.9.2-1.3.3l-.2.2.2.2.6.1L8 9.2l.2-.3-.4-.2-1.3-.2-.2.4zm14.3 18.5s-.2 0-.3.2a.8.8 0 0 1-.3.2l-.1-.1.2-.6c.1-.3.2-.3.5-.2l.2.2c.2.2.4.3.6.2.3-.1.1-.4 0-.5l-1-.5c-.3-.2-.4-.4-.4-.7 0-.2.2-.5.5-.6h.5c.2 0 .3 0 .4-.2.1-.1.3-.2.3 0v.9h-.3c-.2-.3-.4-.5-.6-.4-.2 0-.3.1-.2.3l.4.3.6.3c.5.3.4.6.4.9 0 .3-.3.5-.7.5a1.3 1.3 0 0 1-.7-.2zm-1-1v.5c-.2.4-.6.6-1 .6s-.6-.1-.7-.5l-.2-1.3-.5-.1-.1-.2.6-.2c.4 0 .4 0 .5.3l.2 1.4c0 .2.1.3.4.3.2 0 .3 0 .3-.3v-1.1l-.4-.5c-.1-.1-.2-.2 0-.3.7-.2.7-.4.8.4l.2 1zM20 29c0 .3.2 1.2.4 1.4l1.4-.3c.4-.1.6-.5.5-.9 0-.3-.2-.4-.4-.5a1.6 1.6 0 0 0-.3 0c-.6 0-1 .1-1.5.3zM7.4 25.4l-.6.1-.8.1-.8-.2c-.2 0-.4.2-.5.5 0 .3.2.5.5.6a9 9 0 0 0 2 .2c.2 0 .2 0 .2-.2zm16-14.3l-.8-.3-.2-.3V9.4c0-.2.1-.3.3-.2.3 0 .5 0 .8.2.3.1.8 1 .7 1.4-.2.3-.4.3-.8.3zm-5.7 16.4l-.3.3c-.3.2-1 .3-1.4.6-.2.1 0-.3 0-.5l-.3-1.1-.3-.6c-.2-.2.2-.2.3-.3l.7-.2h.2v.2c-.3.2-.3.3-.2.6v.9l.2.4c.2 0 .5-.2.5-.3V27l.2-.2.1.2.3.6zm1.2-6.9c-.1 0-.2 0-.3-.2l-.3-1.3c0-.2 0-.3.3-.3l1.7.5c.2 0 .2.2.1.3l-1.3 1zm25.7-16c0-.5-.5-1.4-.7-1.7-.3-.3-.6-.4-1 0a2.6 2.6 0 0 0-.2.2c-.3.4-.3.5.2.7l.9.5.7.7v-.4zM12.8 43.3a2.9 2.9 0 0 0-1 .8l-.5 1a5 5 0 0 0-.3 1h.1c.3 0 .9-.6 1-.6.4-.5.6-1 .8-2zm44-41.1c-.2-.6-.7-1.3-1-1.6-.2-.3-.3-.4-.6 0a2.5 2.5 0 0 0-.3.2c-.3.4-.5.9 0 1l1.3.1.5.4.2-.1zM6.2 29v1.3c0 .3.1.3.4.3.2 0 .3-.2.3-.5l.2-1c0-.3 0-.5-.2-.5-.3 0-.6.1-.7.4zm4-13.5a4 4 0 0 1-1-.3c-.5-.3-1-.8-.9-1.3 0-.2.2-.3.4-.2l.1.1.9 1c.2.1.4.4.5.7zm3.7 12l.2 1c0 .2.1.4.4.3.3 0 .4-.2.4-.4l-.2-1c0-.3-.2-.5-.5-.4-.2 0-.3 0-.3.4zm14.9-19L28 9.7l-.7.7H27v-.2L28 9l.4-.5h.2l.2.1zm20 10.4l-.1.7-.3-.5c0-.3-.4-.8-.7-1.4v-.2c0-.1.1-.2.2-.1h.3zM51 2.4s.2 0 .3.2v.3l-1.9.8s-.2.1-.1 0c0-.4 1.3-1.3 1.7-1.3zM33.8 24.2c-.3 0-.6.2-.6.5s.4.6.7.6c.3 0 .5-.2.5-.5 0-.4-.2-.6-.6-.6zM7.4 49.4l-.3.2c-.4 0-.5.1-.5.3 0 .2.1.3.3.3.5-.2.8-.2 1.4-.1h.1l.3-.4-.3-.2h-1zm35.2-28.8c0 .1-.2.2-.1.3v.3h.8l1.2.2.2-.1V21c-.4-.2-.9-.4-1.4-.4zm-22-10a15 15 0 0 1-.8-.4v-.3l.5-.7h.3l.4 1c0 .2 0 .3-.4.3zM10 20.5c.2 0 .3 0 .2.2 0 .1 0 .2-.2.2a3.5 3.5 0 0 1-.8.2 4.3 4.3 0 0 1-1 0l-.4-.2a.4.4 0 0 1 .3-.2zm5.7-16h-.2l-1.7-1-.1-.2h.2c.4 0 1 .3 1.4.4.3.2.4.4.4.7zm8.1 11.6c.1 0 .2.2 0 .4-.3.5-.3.9-.5 1.5a1.8 1.8 0 0 1-.2.3l-.2.1v-.2l.2-1 .3-.7c0-.3.2-.4.4-.4zm19.6-6c-.7 0-1.4-.3-2.1-.6a.4.4 0 0 1-.2-.2.5.5 0 0 1 .3 0l2 .5.2.2a.6.6 0 0 1-.2.2zM35 22.9a.7.7 0 0 0-.3-.3c0-.1-.2 0-.4 0a1.8 1.8 0 0 0-.3.3c-.1.2 0 .4.2.6h.6zm-13-9.7l-.2.4a25.5 25.5 0 0 1-.9 1h-.2v-.3a5.4 5.4 0 0 1 .4-.7l.5-.6h.3v.2zm-11.3-2.8l-.3-.2-.8-1.3-.2-.4.3-.3a.5.5 0 0 1 .1.2l.5 1 .4.7zm-.5 6.6l-.4-.2-1 .2a1.4 1.4 0 0 1-.4 0l-.3-.1.6-.3c.2 0 1-.1 1.6 0v.4zm40.5-8.5h.2l1.2 1v.1a.5.5 0 0 1 .1.2 1.3 1.3 0 0 1-.2 0c-.5-.3-1-.5-1.4-1v-.3zM21.5 10v.2l-.2-.2-.2-.6c0-.5 0-.8.3-1 .1-.2.2-.2.2 0V10zm-7.4-1.8v.2l.4 1.7v.6l-.2-.2-.2-.8-.2-1c0-.2 0-.4.2-.5zm34 7.2l.5.5.7.6v.3H49l-1.2-.9v-.4a.4.4 0 0 1 .1 0zM25.3 5.1h.8l.1.2-.1.2h-1.5a1 1 0 0 1-.2-.3l.2-.1zM35 7c.4.5.5 1 .6 1.5v.1h-.1c-.4-.5-.7-.9-.8-1.4l.1-.3h.2zm-6 34.3l.9-.6c.1-.1 0-.1 0-.2 0-.2-.1-.2-.3-.1-.4 0-.6.2-1 .3-.1 0-.2.2 0 .3zM17.2 5.8l.7-.3.8-.4a.4.4 0 0 1 .3.1l-.2.2-1.2.7a2.4 2.4 0 0 1-.4 0 .3.3 0 0 1 0-.3zm-12 9.8l-.1-1a2.6 2.6 0 0 1 0-.7l.2-.2.2.2v1.7h-.2zm26.1-12a8 8 0 0 1 1.4-.8 5 5 0 0 1-1.4 1.4zM25 24.4c0 .3.1.5.3.7l.2-.3v-1.3c0-.2-.2-.2-.2 0-.1.3-.3.6-.3 1zm22 17.4l-1.9.6c.4.5 1.7 0 1.9-.6zM19.6 8c0 .5 0 1.1-.3 1.6l-.2.2v-.3a61 61 0 0 1 .4-1.6zm26 35.4h1a.7.7 0 0 0 .2-.3l.1-.5-.5.3a8.1 8.1 0 0 1-.9.2l-.1.2.1.1zm-3.8-19.8l.4-.8-.2-.3a.8.8 0 0 0-.2 0c-.1.2-.7.9-.6 1h.6zm-31-7.8l.4-1h.2v1a.7.7 0 0 1-.2.4.5.5 0 0 1-.2 0V16zm22.6 7.3c-.2 0-.4.2-.5.4 0 .2.2.4.5.4.2 0 .4-.2.4-.4 0-.3-.1-.4-.4-.4zm-.2 2.5c0-.3-.2-.5-.5-.5-.2 0-.4.2-.4.4s.3.4.5.4c.3 0 .4-.1.4-.3zm-1-2.6c0 .3-.2.4-.4.4s-.5-.2-.5-.4.2-.4.4-.4c.3 0 .5.1.5.4zm.2 1c-.3 0-.4.2-.4.4s.2.4.4.4.4-.2.4-.4-.2-.4-.4-.4zm-2.7 18c-.3 0-.6 0-.5.2 0 .2.2.4.4.4s.3-.2.3-.4 0-.3-.2-.3zm-19-38c-.2-.5-.1-1 0-1.7.3.6.3 1.4 0 1.8zm22.5 17.6c-.2 0-.3.3-.3.3l.2.4a.6.6 0 0 0 .3-.3z"
						fill="#53565A"
					></path></svg
				>
--- End of File ---

--- File Path ---
frontend/src/lib/auth.js

// /lib/auth.js
import { supabase } from '$lib/supabase';

export async function syncSession() {
  const { data: sessionData, error } = await supabase.auth.getSession();
  if (error) {
    console.error('Error getting session client-side:', error);
    return null;
  }

  if (!sessionData?.session) {
    console.log('No session found client-side, attempting to refresh');
    const { data: refreshedSession, error: refreshError } = await supabase.auth.refreshSession();
    if (refreshError || !refreshedSession?.session) {
      console.error('Error refreshing session client-side:', refreshError);
      return null;
    }
    return refreshedSession.session;
  }

  return sessionData.session;
}

export async function getUserProfile(userId) {
  const { data: profile, error } = await supabase
    .from('user_profiles')
    .select('id, first_name, last_name, notification_frequency, disciplines, date_of_birth, status, specialty')
    .eq('id', userId)
    .single();

  if (error) {
    console.error('Error fetching user profile:', error);
    return null;
  }

  return profile;
}
--- End of File ---

--- File Path ---
frontend/src/lib/utils.ts

import { type ClassValue, clsx } from "clsx";
import { twMerge } from "tailwind-merge";

export function cn(...inputs: ClassValue[]) {
	return twMerge(clsx(inputs));
}

--- End of File ---

--- File Path ---
frontend/src/lib/stores/user.js

import { writable } from 'svelte/store';

const userProfile = writable(null);
export default userProfile;
--- End of File ---

--- File Path ---
frontend/src/lib/stores/supabase.ts

import { writable } from 'svelte/store';
import type { SupabaseClient } from '@supabase/supabase-js';

export const supabaseStore = writable<SupabaseClient | null>(null);

--- End of File ---

--- File Path ---
frontend/src/lib/stores/user.ts

import { writable } from 'svelte/store';

export interface UserProfile {
    id: string;
    first_name: string | null;
    last_name: string | null;
    email: string;
    disciplines: string[] | null;
    notification_frequency: string | null;
    date_of_birth: string | null;
    status: string | null;
    specialty: string | null;
    feedback_modal: string | null;
}

const userProfile = writable<UserProfile | null>(null);
export default userProfile; 
--- End of File ---

--- File Path ---
frontend/src/lib/utils/debounce.ts

// src/lib/utils/debounce.ts
export function debounce<T extends (...args: any[]) => any>(
    func: T,
    wait: number
): (...args: Parameters<T>) => void {
    let timeout: ReturnType<typeof setTimeout> | null = null;

    return function executedFunction(...args: Parameters<T>) {
        const later = () => {
            timeout = null;
            func(...args);
        };

        if (timeout !== null) {
            clearTimeout(timeout);
        }
        timeout = setTimeout(later, wait);
    };
}
--- End of File ---

--- File Path ---
frontend/src/lib/utils/articleUtils.ts

// src/lib/utils/articleUtils.ts

export interface FilterOption {
	value: string;
	label: string;
}

export interface SubDisciplineOption {
	id: number;
	name: string;
}

export interface Article {
	id: string | number;
	title: string;
	content: string;
	disciplines: string[];
	published_at: string;
	journal?: string;
	grade?: string;
	link?: string;
	article_id?: string | number;
	is_read?: boolean;
	is_liked?: boolean;
	like_count?: number;
	read_count?: number;
	is_thumbed_up?: boolean;
	thumbs_up_count?: number;
	added_at_out?: string;
	is_article_of_the_day?: boolean;
	is_recommandation?: boolean;
}

export interface ContentSection {
	emoji: string;
	title: string;
	content: string[];
	subsections?: ContentSection[];
	level: number;
}

export function formatTitle(title: string): string {
	if (!title) return '';
	const words = title.toLowerCase().split(' ');
	if (words.length === 0) return '';
	words[0] = words[0].charAt(0).toUpperCase() + words[0].slice(1);
	return words.join(' ');
}

export function formatDate(publishedAt: string): string {
	if (!publishedAt) return 'Non sp√©cifi√©e';
	try {
		const date = new Date(publishedAt);
		if (isNaN(date.getTime())) {
			return 'Date invalide';
		}
		return `${date.getDate().toString().padStart(2, '0')}/${(date.getMonth() + 1)
			.toString()
			.padStart(2, '0')}/${date.getFullYear()}`;
	} catch (e) {
		console.error('Error formatting date:', publishedAt, e);
		return 'Date invalide';
	}
}

export function extractTitleEmoji(content: string): string {
	if (!content || typeof content !== 'string') return 'üìù';
	const lines = content.split('\n');
	for (const line of lines) {
		if (
			line.trim().startsWith('# üìù') ||
			line.trim().startsWith('# üìå') ||
			line.trim().startsWith('# üß™') ||
			line.trim().startsWith('# üìä') ||
			line.trim().startsWith('# ü©∫') ||
			line.trim().startsWith('# üìñ') ||
			line.trim().startsWith('# üåü') ||
			line.trim().startsWith('# üíä')
		) {
			const parts = line.trim().split(' ');
			if (parts.length > 1) {
				return parts[1] || 'üìù';
			}
		}
	}
	return 'üìù';
}

export function parseContent(content: string): ContentSection[] {
	if (!content || typeof content !== 'string') return [];

	const sections: ContentSection[] = [];
	const lines = content.split('\n');
	const sectionStack: ContentSection[] = [];

	for (const line of lines) {
		const trimmedLine = line.trim();
		if (!trimmedLine) continue;

		const headerMatch = trimmedLine.match(/^(#{1,6})\s+(.+)$/);

		if (headerMatch) {
			const level = headerMatch[1].length;
			const fullTitle = headerMatch[2].trim();

			if (level === 1) {
				continue;
			}

			const emojiMatch = fullTitle.match(/^(\p{Emoji}(?:\uFE0F)?)\s*(.+)$/u);
			const emoji = emojiMatch ? emojiMatch[1] : 'üìÑ';
			const title = emojiMatch ? emojiMatch[2].trim() : fullTitle;

			const newSection: ContentSection = {
				emoji,
				title,
				content: [],
				subsections: [],
				level
			};

			while (sectionStack.length > 0 && sectionStack[sectionStack.length - 1].level >= level) {
				sectionStack.pop();
			}

			if (sectionStack.length > 0) {
				const parent = sectionStack[sectionStack.length - 1];
				if (!parent.subsections) {
					parent.subsections = [];
				}
				parent.subsections.push(newSection);
			} else {
				sections.push(newSection);
			}

			sectionStack.push(newSection);
		} else if (trimmedLine !== '---' && trimmedLine !== '***' && trimmedLine !== '___' && sectionStack.length > 0) {
			const currentSection = sectionStack[sectionStack.length - 1];
			
			if (trimmedLine.startsWith('- ')) {
				const cleanLine = trimmedLine.replace(/^-\s*/, '');
				if (cleanLine.trim()) {
					currentSection.content.push(`__BULLET__${cleanLine.trim()}`);
				}
			} else if (line.match(/^ {2,}/) && !trimmedLine.startsWith('**')) {
				const cleanLine = trimmedLine.replace(/^[‚Ä¢¬∑‚óã*]\s*/, '');
				if (cleanLine.trim()) {
					currentSection.content.push(`__NESTED__${cleanLine.trim()}`);
				}
			} else if (trimmedLine.startsWith('*') && !trimmedLine.startsWith('**')) {
				const cleanLine = trimmedLine.replace(/^\*\s*/, '');
				if (cleanLine.trim()) {
					currentSection.content.push(`__BULLET__${cleanLine.trim()}`);
				}
			} else {
				currentSection.content.push(trimmedLine);
			}
		}
	}

	if (sections.length === 0 && content?.trim()) {
		return [{ emoji: 'üìÑ', title: 'Contenu', content: content.split('\n').map(l => l.trim()).filter(Boolean), level: 1, subsections: [] }];
	}

	return sections;
}

export function getArticleId(article: Article): string | number {
	const id = article.id ?? article.article_id;
	if (id !== null && id !== undefined) {
		return id;
	}
	return Date.now() + Math.random();
}
--- End of File ---

--- File Path ---
frontend/src/lib/utils/subscriptionUtils.ts

// frontend/src/lib/utils/subscriptionUtils.ts
import type { SupabaseClient } from '@supabase/supabase-js';

export interface ActiveSubscription {
    id: number;
    user_profile_id: string;
    stripe_subscription_id: string;
    stripe_customer_id: string;
    stripe_price_id: string;
    status: string;
    current_period_start: string;
    current_period_end: string;
    cancel_at_period_end: boolean;
    canceled_at?: string | null;
    trial_start?: string | null;
    trial_end?: string | null;
    created_at: string;
    updated_at: string;
}

export interface SubscriptionStatus {
    isActive: boolean;
    error: string | null;
}

export interface SubscriptionStatusWithDetails extends SubscriptionStatus {
    activeSubscription: ActiveSubscription | null;
}


export async function checkUserSubscription(
    supabase: SupabaseClient,
    userId: string | null | undefined,
    returnDetails?: boolean
): Promise<SubscriptionStatusWithDetails>;

export async function checkUserSubscription(
    supabase: SupabaseClient,
    userId: string | null | undefined,
    returnDetails?: boolean
): Promise<SubscriptionStatus | SubscriptionStatusWithDetails> {
    if (!userId) {
        console.warn('[SubscriptionUtils] checkUserSubscription called with no userId.');
        const baseReturn: SubscriptionStatus = { isActive: false, error: 'User ID not provided.' };
        return returnDetails ? { ...baseReturn, activeSubscription: null } : baseReturn;
    }

    if (!supabase) {
        console.error('[SubscriptionUtils] Supabase client not provided.');
        const baseReturn: SubscriptionStatus = { isActive: false, error: 'Supabase client is required.' };
        return returnDetails ? { ...baseReturn, activeSubscription: null } : baseReturn;
    }

    try {
        const now = new Date().toISOString(); // Get current time in UTC ISO format

        const selectColumns = '*';

        const { data, error: dbError } = await supabase
            .from('user_profile_subscriptions')
            .select(selectColumns)
            .eq('user_profile_id', userId)
            .in('status', ['active', 'trialing'])
            .lte('current_period_start', now)
            .gt('current_period_end', now)
            .order('current_period_end', { ascending: false })
            .limit(1)
            .maybeSingle();

        if (dbError) {
            console.error('[SubscriptionUtils] Error fetching subscription:', dbError);
            const baseReturn: SubscriptionStatus = { isActive: false, error: dbError.message };
            return returnDetails ? { ...baseReturn, activeSubscription: null } : baseReturn;
        }

        if (data) {
            const baseReturn: SubscriptionStatus = { isActive: true, error: null };
            return returnDetails ? { ...baseReturn, activeSubscription: data as ActiveSubscription } : baseReturn;
        } else {
            const baseReturn: SubscriptionStatus = { isActive: false, error: null };
            return returnDetails ? { ...baseReturn, activeSubscription: null } : baseReturn;
        }
    } catch (err: unknown) {
        console.error('[SubscriptionUtils] Unexpected error in checkUserSubscription:', err);
        const baseReturn: SubscriptionStatus = { 
            isActive: false, 
            error: err instanceof Error ? err.message : 'An unexpected error occurred.' 
        };
        return returnDetails ? { ...baseReturn, activeSubscription: null } : baseReturn;
    }
}

/**
 * A simpler utility function that just returns a boolean indicating if the user is subscribed.
 */
export async function isUserSubscribed(
    supabase: SupabaseClient,
    userId: string | null | undefined
): Promise<boolean> {
    const { isActive } = await checkUserSubscription(supabase, userId); // Default is { returnDetails: false }
    return isActive;
}
--- End of File ---

--- File Path ---
frontend/src/lib/supabase.js

import { createClient } from '@supabase/supabase-js';

const supabaseUrl = 'https://etxelhjnqbrgwuitltyk.supabase.co';
const supabaseKey =
	'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImV0eGVsaGpucWJyZ3d1aXRsdHlrIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDA2OTE5NzAsImV4cCI6MjA1NjI2Nzk3MH0.EvaK9bCSYaBVaVOIgakKTAVoM8UrDYg2HX7Z-iyWoD4';
export const supabase = createClient(supabaseUrl, supabaseKey, {
	auth: {
		persistSession: true,
		autoRefreshToken: true,
		detectSessionInUrl: true
	}
});

--- End of File ---

--- File Path ---
frontend/src/lib/components/ui/sidebar/sidebar-footer.svelte

<script lang="ts">
	import type { HTMLAttributes } from "svelte/elements";
	import type { WithElementRef } from "bits-ui";
	import { cn } from "$lib/utils.js";

	let {
		ref = $bindable(null),
		class: className,
		children,
		...restProps
	}: WithElementRef<HTMLAttributes<HTMLElement>> = $props();
</script>

<div
	bind:this={ref}
	data-sidebar="footer"
	class={cn("flex flex-col gap-2 p-2", className)}
	{...restProps}
>
	{@render children?.()}
</div>

--- End of File ---

--- File Path ---
frontend/src/lib/components/ui/sidebar/sidebar-menu-skeleton.svelte

<script lang="ts">
	import { Skeleton } from "$lib/components/ui/skeleton/index.js";
	import { cn } from "$lib/utils.js";
	import type { WithElementRef } from "bits-ui";
	import type { HTMLAttributes } from "svelte/elements";

	let {
		ref = $bindable(null),
		class: className,
		showIcon = false,
		children,
		...restProps
	}: WithElementRef<HTMLAttributes<HTMLElement>> & {
		showIcon?: boolean;
	} = $props();

	// Random width between 50% and 90%
	const width = `${Math.floor(Math.random() * 40) + 50}%`;
</script>

<div
	bind:this={ref}
	data-sidebar="menu-skeleton"
	class={cn("flex h-8 items-center gap-2 rounded-md px-2", className)}
	{...restProps}
>
	{#if showIcon}
		<Skeleton class="size-4 rounded-md" data-sidebar="menu-skeleton-icon" />
	{/if}
	<Skeleton
		class="h-4 max-w-[var(--skeleton-width)] flex-1"
		data-sidebar="menu-skeleton-text"
		style="--skeleton-width: {width};"
	/>
	{@render children?.()}
</div>

--- End of File ---

--- File Path ---
frontend/src/lib/components/ui/sidebar/sidebar-menu-badge.svelte

<script lang="ts">
	import { cn } from "$lib/utils.js";
	import type { WithElementRef } from "bits-ui";
	import type { HTMLAttributes } from "svelte/elements";

	let {
		ref = $bindable(null),
		class: className,
		children,
		...restProps
	}: WithElementRef<HTMLAttributes<HTMLElement>> = $props();
</script>

<div
	bind:this={ref}
	data-sidebar="menu-badge"
	class={cn(
		"text-sidebar-foreground pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums",
		"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground",
		"peer-data-[size=sm]/menu-button:top-1",
		"peer-data-[size=default]/menu-button:top-1.5",
		"peer-data-[size=lg]/menu-button:top-2.5",
		"group-data-[collapsible=icon]:hidden",
		className
	)}
	{...restProps}
>
	{@render children?.()}
</div>

--- End of File ---

--- File Path ---
frontend/src/lib/components/ui/sidebar/sidebar-menu-action.svelte

<script lang="ts">
	import { cn } from "$lib/utils.js";
	import type { WithElementRef } from "bits-ui";
	import type { Snippet } from "svelte";
	import type { HTMLButtonAttributes } from "svelte/elements";

	let {
		ref = $bindable(null),
		class: className,
		showOnHover = false,
		children,
		child,
		...restProps
	}: WithElementRef<HTMLButtonAttributes> & {
		child?: Snippet<[{ props: Record<string, unknown> }]>;
		showOnHover?: boolean;
	} = $props();

	const mergedProps = $derived({
		class: cn(
			"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground peer-hover/menu-button:text-sidebar-accent-foreground absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-none transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0",
			// Increases the hit area of the button on mobile.
			"after:absolute after:-inset-2 after:md:hidden",
			"peer-data-[size=sm]/menu-button:top-1",
			"peer-data-[size=default]/menu-button:top-1.5",
			"peer-data-[size=lg]/menu-button:top-2.5",
			"group-data-[collapsible=icon]:hidden",
			showOnHover &&
				"peer-data-[active=true]/menu-button:text-sidebar-accent-foreground group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 md:opacity-0",
			className
		),
		"data-sidebar": "menu-action",
		...restProps,
	});
</script>

{#if child}
	{@render child({ props: mergedProps })}
{:else}
	<button bind:this={ref} {...mergedProps}>
		{@render children?.()}
	</button>
{/if}

--- End of File ---

--- File Path ---
frontend/src/lib/components/ui/sidebar/sidebar-menu-sub.svelte

<script lang="ts">
	import { cn } from "$lib/utils.js";
	import type { WithElementRef } from "bits-ui";
	import type { HTMLAttributes } from "svelte/elements";

	let {
		ref = $bindable(null),
		class: className,
		children,
		...restProps
	}: WithElementRef<HTMLAttributes<HTMLUListElement>> = $props();
</script>

<ul
	bind:this={ref}
	data-sidebar="menu-sub"
	class={cn(
		"border-sidebar-border mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l px-2.5 py-0.5",
		"group-data-[collapsible=icon]:hidden",
		className
	)}
	{...restProps}
>
	{@render children?.()}
</ul>

--- End of File ---

--- File Path ---
frontend/src/lib/components/ui/sidebar/sidebar-provider.svelte

<script lang="ts">
	import * as Tooltip from "$lib/components/ui/tooltip/index.js";
	import { cn } from "$lib/utils.js";
	import type { WithElementRef } from "bits-ui";
	import type { HTMLAttributes } from "svelte/elements";
	import {
		SIDEBAR_COOKIE_MAX_AGE,
		SIDEBAR_COOKIE_NAME,
		SIDEBAR_WIDTH,
		SIDEBAR_WIDTH_ICON,
	} from "./constants.js";
	import { setSidebar } from "./context.svelte.js";

	let {
		ref = $bindable(null),
		open = $bindable(true),
		onOpenChange = () => {},
		class: className,
		style,
		children,
		...restProps
	}: WithElementRef<HTMLAttributes<HTMLDivElement>> & {
		open?: boolean;
		onOpenChange?: (open: boolean) => void;
	} = $props();

	const sidebar = setSidebar({
		open: () => open,
		setOpen: (value: boolean) => {
			open = value;
			onOpenChange(value);

			// This sets the cookie to keep the sidebar state.
			document.cookie = `${SIDEBAR_COOKIE_NAME}=${open}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`;
		},
	});
</script>

<svelte:window onkeydown={sidebar.handleShortcutKeydown} />

<Tooltip.Provider delayDuration={0}>
	<div
		style="--sidebar-width: {SIDEBAR_WIDTH}; --sidebar-width-icon: {SIDEBAR_WIDTH_ICON}; {style}"
		class={cn(
			"group/sidebar-wrapper has-[[data-variant=inset]]:bg-sidebar flex min-h-svh w-full",
			className
		)}
		bind:this={ref}
		{...restProps}
	>
		{@render children?.()}
	</div>
</Tooltip.Provider>

--- End of File ---

--- File Path ---
frontend/src/lib/components/ui/sidebar/sidebar-menu-item.svelte

<script lang="ts">
	import { cn } from "$lib/utils.js";
	import type { WithElementRef } from "bits-ui";
	import type { HTMLAttributes } from "svelte/elements";

	let {
		ref = $bindable(null),
		class: className,
		children,
		...restProps
	}: WithElementRef<HTMLAttributes<HTMLLIElement>, HTMLLIElement> = $props();
</script>

<li
	bind:this={ref}
	data-sidebar="menu-item"
	class={cn("group/menu-item relative", className)}
	{...restProps}
>
	{@render children?.()}
</li>

--- End of File ---

--- File Path ---
frontend/src/lib/components/ui/sidebar/sidebar-rail.svelte

<script lang="ts">
	import { cn } from "$lib/utils.js";
	import type { WithElementRef } from "bits-ui";
	import type { HTMLAttributes } from "svelte/elements";
	import { useSidebar } from "./context.svelte.js";

	let {
		ref = $bindable(null),
		class: className,
		children,
		...restProps
	}: WithElementRef<HTMLAttributes<HTMLButtonElement>, HTMLButtonElement> = $props();

	const sidebar = useSidebar();
</script>

<button
	bind:this={ref}
	data-sidebar="rail"
	aria-label="Toggle Sidebar"
	tabIndex={-1}
	onclick={() => sidebar.toggle()}
	title="Toggle Sidebar"
	class={cn(
		"hover:after:bg-sidebar-border absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex",
		"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize",
		"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize",
		"group-data-[collapsible=offcanvas]:hover:bg-sidebar group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full",
		"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2",
		"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2",
		className
	)}
	{...restProps}
>
	{@render children?.()}
</button>

--- End of File ---

--- File Path ---
frontend/src/lib/components/ui/sidebar/sidebar-group-label.svelte

<script lang="ts">
	import { cn } from "$lib/utils.js";
	import type { WithElementRef } from "bits-ui";
	import type { Snippet } from "svelte";
	import type { HTMLAttributes } from "svelte/elements";

	let {
		ref = $bindable(null),
		children,
		child,
		class: className,
		...restProps
	}: WithElementRef<HTMLAttributes<HTMLElement>> & {
		child?: Snippet<[{ props: Record<string, unknown> }]>;
	} = $props();

	const mergedProps = $derived({
		class: cn(
			"text-sidebar-foreground/70 ring-sidebar-ring flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium outline-none transition-[margin,opa] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0",
			"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0",
			className
		),
		"data-sidebar": "group-label",
		...restProps,
	});
</script>

{#if child}
	{@render child({ props: mergedProps })}
{:else}
	<div bind:this={ref} {...mergedProps}>
		{@render children?.()}
	</div>
{/if}

--- End of File ---

--- File Path ---
frontend/src/lib/components/ui/sidebar/sidebar-trigger.svelte

<script lang="ts">
	import { Button } from "$lib/components/ui/button/index.js";
	import { cn } from "$lib/utils.js";
	import PanelLeft from "@lucide/svelte/icons/panel-left";
	import type { ComponentProps } from "svelte";
	import { useSidebar } from "./context.svelte.js";

	let {
		ref = $bindable(null),
		class: className,
		onclick,
		...restProps
	}: ComponentProps<typeof Button> & {
		onclick?: (e: MouseEvent) => void;
	} = $props();

	const sidebar = useSidebar();
</script>

<Button
	type="button"
	onclick={(e) => {
		onclick?.(e);
		sidebar.toggle();
	}}
	data-sidebar="trigger"
	variant="ghost"
	size="icon"
	class={cn("h-7 w-7", className)}
	{...restProps}
>
	<PanelLeft />
	<span class="sr-only">Toggle Sidebar</span>
</Button>

--- End of File ---

--- File Path ---
frontend/src/lib/components/ui/sidebar/constants.ts

export const SIDEBAR_COOKIE_NAME = "sidebar:state";
export const SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7;
export const SIDEBAR_WIDTH = "16rem";
export const SIDEBAR_WIDTH_MOBILE = "18rem";
export const SIDEBAR_WIDTH_ICON = "3rem";
export const SIDEBAR_KEYBOARD_SHORTCUT = "b";

--- End of File ---

--- File Path ---
frontend/src/lib/components/ui/sidebar/sidebar-menu-sub-button.svelte

<script lang="ts">
	import { cn } from "$lib/utils.js";
	import type { WithElementRef } from "bits-ui";
	import type { Snippet } from "svelte";
	import type { HTMLAnchorAttributes } from "svelte/elements";

	let {
		ref = $bindable(null),
		children,
		child,
		class: className,
		size = "md",
		isActive,
		...restProps
	}: WithElementRef<HTMLAnchorAttributes> & {
		child?: Snippet<[{ props: Record<string, unknown> }]>;
		size?: "sm" | "md";
		isActive?: boolean;
	} = $props();

	const mergedProps = $derived({
		class: cn(
			"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground active:bg-sidebar-accent active:text-sidebar-accent-foreground [&>svg]:text-sidebar-accent-foreground flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 outline-none focus-visible:ring-2 disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0",
			"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground",
			size === "sm" && "text-xs",
			size === "md" && "text-sm",
			"group-data-[collapsible=icon]:hidden",
			className
		),
		"data-sidebar": "menu-sub-button",
		"data-size": size,
		"data-active": isActive,
		...restProps,
	});
</script>

{#if child}
	{@render child({ props: mergedProps })}
{:else}
	<a bind:this={ref} {...mergedProps}>
		{@render children?.()}
	</a>
{/if}

--- End of File ---

--- File Path ---
frontend/src/lib/components/ui/sidebar/sidebar-header.svelte

<script lang="ts">
	import type { HTMLAttributes } from "svelte/elements";
	import type { WithElementRef } from "bits-ui";
	import { cn } from "$lib/utils.js";

	let {
		ref = $bindable(null),
		class: className,
		children,
		...restProps
	}: WithElementRef<HTMLAttributes<HTMLElement>> = $props();
</script>

<div
	bind:this={ref}
	data-sidebar="header"
	class={cn("flex flex-col gap-2 p-2", className)}
	{...restProps}
>
	{@render children?.()}
</div>

--- End of File ---

--- File Path ---
frontend/src/lib/components/ui/sidebar/sidebar-inset.svelte

<script lang="ts">
	import { cn } from "$lib/utils.js";
	import type { WithElementRef } from "bits-ui";
	import type { HTMLAttributes } from "svelte/elements";

	let {
		ref = $bindable(null),
		class: className,
		children,
		...restProps
	}: WithElementRef<HTMLAttributes<HTMLElement>> = $props();
</script>

<main
	bind:this={ref}
	class={cn(
		"bg-background relative flex min-h-svh flex-1 flex-col",
		"peer-data-[variant=inset]:min-h-[calc(100svh-theme(spacing.4))] md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow",
		className
	)}
	{...restProps}
>
	{@render children?.()}
</main>

--- End of File ---

--- File Path ---
frontend/src/lib/components/ui/sidebar/sidebar.svelte

<script lang="ts">
	import * as Sheet from "$lib/components/ui/sheet/index.js";
	import { cn } from "$lib/utils.js";
	import type { WithElementRef } from "bits-ui";
	import type { HTMLAttributes } from "svelte/elements";
	import { SIDEBAR_WIDTH_MOBILE } from "./constants.js";
	import { useSidebar } from "./context.svelte.js";

	let {
		ref = $bindable(null),
		side = "left",
		variant = "sidebar",
		collapsible = "offcanvas",
		class: className,
		children,
		...restProps
	}: WithElementRef<HTMLAttributes<HTMLDivElement>> & {
		side?: "left" | "right";
		variant?: "sidebar" | "floating" | "inset";
		collapsible?: "offcanvas" | "icon" | "none";
	} = $props();

	const sidebar = useSidebar();
</script>

{#if collapsible === "none"}
	<div
		class={cn(
			"bg-sidebar text-sidebar-foreground flex h-full w-[var(--sidebar-width)] flex-col",
			className
		)}
		bind:this={ref}
		{...restProps}
	>
		{@render children?.()}
	</div>
{:else if sidebar.isMobile}
	<Sheet.Root
		bind:open={() => sidebar.openMobile, (v) => sidebar.setOpenMobile(v)}
		{...restProps}
	>
		<Sheet.Content
			data-sidebar="sidebar"
			data-mobile="true"
			class="bg-sidebar text-sidebar-foreground w-[var(--sidebar-width)] p-0 [&>button]:hidden"
			style="--sidebar-width: {SIDEBAR_WIDTH_MOBILE};"
			{side}
		>
			<div class="flex h-full w-full flex-col">
				{@render children?.()}
			</div>
		</Sheet.Content>
	</Sheet.Root>
{:else}
	<div
		bind:this={ref}
		class="text-sidebar-foreground group peer hidden md:block"
		data-state={sidebar.state}
		data-collapsible={sidebar.state === "collapsed" ? collapsible : ""}
		data-variant={variant}
		data-side={side}
	>
		<!-- This is what handles the sidebar gap on desktop -->
		<div
			class={cn(
				"relative h-svh w-[var(--sidebar-width)] bg-transparent transition-[width] duration-200 ease-linear",
				"group-data-[collapsible=offcanvas]:w-0",
				"group-data-[side=right]:rotate-180",
				variant === "floating" || variant === "inset"
					? "group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]"
					: "group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)]"
			)}
		></div>
		<div
			class={cn(
				"fixed inset-y-0 z-10 hidden h-svh w-[var(--sidebar-width)] transition-[left,right,width] duration-200 ease-linear md:flex",
				side === "left"
					? "left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]"
					: "right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]",
				// Adjust the padding for floating and inset variants.
				variant === "floating" || variant === "inset"
					? "p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]"
					: "group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)] group-data-[side=left]:border-r group-data-[side=right]:border-l",
				className
			)}
			{...restProps}
		>
			<div
				data-sidebar="sidebar"
				class="bg-sidebar group-data-[variant=floating]:border-sidebar-border flex h-full w-full flex-col group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:shadow"
			>
				{@render children?.()}
			</div>
		</div>
	</div>
{/if}

--- End of File ---

--- File Path ---
frontend/src/lib/components/ui/sidebar/sidebar-menu.svelte

<script lang="ts">
	import { cn } from "$lib/utils.js";
	import type { WithElementRef } from "bits-ui";
	import type { HTMLAttributes } from "svelte/elements";

	let {
		ref = $bindable(null),
		class: className,
		children,
		...restProps
	}: WithElementRef<HTMLAttributes<HTMLUListElement>, HTMLUListElement> = $props();
</script>

<ul
	bind:this={ref}
	data-sidebar="menu"
	class={cn("flex w-full min-w-0 flex-col gap-1", className)}
	{...restProps}
>
	{@render children?.()}
</ul>

--- End of File ---

--- File Path ---
frontend/src/lib/components/ui/sidebar/sidebar-group-content.svelte

<script lang="ts">
	import { cn } from "$lib/utils.js";
	import type { WithElementRef } from "bits-ui";
	import type { HTMLAttributes } from "svelte/elements";

	let {
		ref = $bindable(null),
		class: className,
		children,
		...restProps
	}: WithElementRef<HTMLAttributes<HTMLDivElement>> = $props();
</script>

<div
	bind:this={ref}
	data-sidebar="group-content"
	class={cn("w-full text-sm", className)}
	{...restProps}
>
	{@render children?.()}
</div>

--- End of File ---

--- File Path ---
frontend/src/lib/components/ui/sidebar/index.ts

import { useSidebar } from "./context.svelte.js";
import Content from "./sidebar-content.svelte";
import Footer from "./sidebar-footer.svelte";
import GroupAction from "./sidebar-group-action.svelte";
import GroupContent from "./sidebar-group-content.svelte";
import GroupLabel from "./sidebar-group-label.svelte";
import Group from "./sidebar-group.svelte";
import Header from "./sidebar-header.svelte";
import Input from "./sidebar-input.svelte";
import Inset from "./sidebar-inset.svelte";
import MenuAction from "./sidebar-menu-action.svelte";
import MenuBadge from "./sidebar-menu-badge.svelte";
import MenuButton from "./sidebar-menu-button.svelte";
import MenuItem from "./sidebar-menu-item.svelte";
import MenuSkeleton from "./sidebar-menu-skeleton.svelte";
import MenuSubButton from "./sidebar-menu-sub-button.svelte";
import MenuSubItem from "./sidebar-menu-sub-item.svelte";
import MenuSub from "./sidebar-menu-sub.svelte";
import Menu from "./sidebar-menu.svelte";
import Provider from "./sidebar-provider.svelte";
import Rail from "./sidebar-rail.svelte";
import Separator from "./sidebar-separator.svelte";
import Trigger from "./sidebar-trigger.svelte";
import Root from "./sidebar.svelte";

export {
	Content,
	Footer,
	Group,
	GroupAction,
	GroupContent,
	GroupLabel,
	Header,
	Input,
	Inset,
	Menu,
	MenuAction,
	MenuBadge,
	MenuButton,
	MenuItem,
	MenuSkeleton,
	MenuSub,
	MenuSubButton,
	MenuSubItem,
	Provider,
	Rail,
	Root,
	Separator,
	//
	Root as Sidebar,
	Content as SidebarContent,
	Footer as SidebarFooter,
	Group as SidebarGroup,
	GroupAction as SidebarGroupAction,
	GroupContent as SidebarGroupContent,
	GroupLabel as SidebarGroupLabel,
	Header as SidebarHeader,
	Input as SidebarInput,
	Inset as SidebarInset,
	Menu as SidebarMenu,
	MenuAction as SidebarMenuAction,
	MenuBadge as SidebarMenuBadge,
	MenuButton as SidebarMenuButton,
	MenuItem as SidebarMenuItem,
	MenuSkeleton as SidebarMenuSkeleton,
	MenuSub as SidebarMenuSub,
	MenuSubButton as SidebarMenuSubButton,
	MenuSubItem as SidebarMenuSubItem,
	Provider as SidebarProvider,
	Rail as SidebarRail,
	Separator as SidebarSeparator,
	Trigger as SidebarTrigger,
	Trigger,
	useSidebar,
};

--- End of File ---

--- File Path ---
frontend/src/lib/components/ui/sidebar/sidebar-menu-sub-item.svelte

<script lang="ts">
	import type { WithElementRef } from "bits-ui";
	import type { HTMLAttributes } from "svelte/elements";

	let {
		ref = $bindable(null),
		children,
		...restProps
	}: WithElementRef<HTMLAttributes<HTMLLIElement>> = $props();
</script>

<li bind:this={ref} data-sidebar="menu-sub-item" {...restProps}>
	{@render children?.()}
</li>

--- End of File ---

--- File Path ---
frontend/src/lib/components/ui/sidebar/context.svelte.ts

import { IsMobile } from "$lib/hooks/is-mobile.svelte.js";
import { getContext, setContext } from "svelte";
import { SIDEBAR_KEYBOARD_SHORTCUT } from "./constants.js";

type Getter<T> = () => T;

export type SidebarStateProps = {
	/**
	 * A getter function that returns the current open state of the sidebar.
	 * We use a getter function here to support `bind:open` on the `Sidebar.Provider`
	 * component.
	 */
	open: Getter<boolean>;

	/**
	 * A function that sets the open state of the sidebar. To support `bind:open`, we need
	 * a source of truth for changing the open state to ensure it will be synced throughout
	 * the sub-components and any `bind:` references.
	 */
	setOpen: (open: boolean) => void;
};

class SidebarState {
	readonly props: SidebarStateProps;
	open = $derived.by(() => this.props.open());
	openMobile = $state(false);
	setOpen: SidebarStateProps["setOpen"];
	#isMobile: IsMobile;
	state = $derived.by(() => (this.open ? "expanded" : "collapsed"));

	constructor(props: SidebarStateProps) {
		this.setOpen = props.setOpen;
		this.#isMobile = new IsMobile();
		this.props = props;
	}

	// Convenience getter for checking if the sidebar is mobile
	// without this, we would need to use `sidebar.isMobile.current` everywhere
	get isMobile() {
		return this.#isMobile.current;
	}

	// Event handler to apply to the `<svelte:window>`
	handleShortcutKeydown = (e: KeyboardEvent) => {
		if (e.key === SIDEBAR_KEYBOARD_SHORTCUT && (e.metaKey || e.ctrlKey)) {
			e.preventDefault();
			this.toggle();
		}
	};

	setOpenMobile = (value: boolean) => {
		this.openMobile = value;
	};

	toggle = () => {
		return this.#isMobile.current
			? (this.openMobile = !this.openMobile)
			: this.setOpen(!this.open);
	};
}

const SYMBOL_KEY = "scn-sidebar";

/**
 * Instantiates a new `SidebarState` instance and sets it in the context.
 *
 * @param props The constructor props for the `SidebarState` class.
 * @returns  The `SidebarState` instance.
 */
export function setSidebar(props: SidebarStateProps): SidebarState {
	return setContext(Symbol.for(SYMBOL_KEY), new SidebarState(props));
}

/**
 * Retrieves the `SidebarState` instance from the context. This is a class instance,
 * so you cannot destructure it.
 * @returns The `SidebarState` instance.
 */
export function useSidebar(): SidebarState {
	return getContext(Symbol.for(SYMBOL_KEY));
}

--- End of File ---

--- File Path ---
frontend/src/lib/components/ui/sidebar/sidebar-separator.svelte

<script lang="ts">
	import { Separator } from "$lib/components/ui/separator/index.js";
	import { cn } from "$lib/utils.js";
	import type { ComponentProps } from "svelte";

	let {
		ref = $bindable(null),
		class: className,
		...restProps
	}: ComponentProps<typeof Separator> = $props();
</script>

<Separator
	bind:ref
	data-sidebar="separator"
	class={cn("bg-sidebar-border mx-2 w-auto", className)}
	{...restProps}
/>

--- End of File ---

--- File Path ---
frontend/src/lib/components/ui/sidebar/sidebar-group.svelte

<script lang="ts">
	import type { HTMLAttributes } from "svelte/elements";
	import type { WithElementRef } from "bits-ui";
	import { cn } from "$lib/utils.js";

	let {
		ref = $bindable(null),
		class: className,
		children,
		...restProps
	}: WithElementRef<HTMLAttributes<HTMLElement>> = $props();
</script>

<div
	bind:this={ref}
	data-sidebar="group"
	class={cn("relative flex w-full min-w-0 flex-col p-2", className)}
	{...restProps}
>
	{@render children?.()}
</div>

--- End of File ---

--- File Path ---
frontend/src/lib/components/ui/sidebar/sidebar-content.svelte

<script lang="ts">
	import type { HTMLAttributes } from "svelte/elements";
	import type { WithElementRef } from "bits-ui";
	import { cn } from "$lib/utils.js";

	let {
		ref = $bindable(null),
		class: className,
		children,
		...restProps
	}: WithElementRef<HTMLAttributes<HTMLElement>> = $props();
</script>

<div
	bind:this={ref}
	data-sidebar="content"
	class={cn(
		"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden",
		className
	)}
	{...restProps}
>
	{@render children?.()}
</div>

--- End of File ---

--- File Path ---
frontend/src/lib/components/ui/sidebar/sidebar-menu-button.svelte

<script lang="ts" module>
	import { tv, type VariantProps } from "tailwind-variants";

	export const sidebarMenuButtonVariants = tv({
		base: "peer/menu-button ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground active:bg-sidebar-accent active:text-sidebar-accent-foreground data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none transition-[width,height,padding] focus-visible:ring-2 disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:font-medium group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0",
		variants: {
			variant: {
				default: "hover:bg-sidebar-accent hover:text-sidebar-accent-foreground",
				outline:
					"bg-background hover:bg-sidebar-accent hover:text-sidebar-accent-foreground shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]",
			},
			size: {
				default: "h-8 text-sm",
				sm: "h-7 text-xs",
				lg: "h-12 text-sm group-data-[collapsible=icon]:!p-0",
			},
		},
		defaultVariants: {
			variant: "default",
			size: "default",
		},
	});

	export type SidebarMenuButtonVariant = VariantProps<
		typeof sidebarMenuButtonVariants
	>["variant"];
	export type SidebarMenuButtonSize = VariantProps<typeof sidebarMenuButtonVariants>["size"];
</script>

<script lang="ts">
	import * as Tooltip from "$lib/components/ui/tooltip/index.js";
	import { cn } from "$lib/utils.js";
	import { mergeProps, type WithElementRef, type WithoutChildrenOrChild } from "bits-ui";
	import type { ComponentProps, Snippet } from "svelte";
	import type { HTMLAttributes } from "svelte/elements";
	import { useSidebar } from "./context.svelte.js";

	let {
		ref = $bindable(null),
		class: className,
		children,
		child,
		variant = "default",
		size = "default",
		isActive = false,
		tooltipContent,
		tooltipContentProps,
		...restProps
	}: WithElementRef<HTMLAttributes<HTMLButtonElement>, HTMLButtonElement> & {
		isActive?: boolean;
		variant?: SidebarMenuButtonVariant;
		size?: SidebarMenuButtonSize;
		tooltipContent?: Snippet;
		tooltipContentProps?: WithoutChildrenOrChild<ComponentProps<typeof Tooltip.Content>>;
		child?: Snippet<[{ props: Record<string, unknown> }]>;
	} = $props();

	const sidebar = useSidebar();

	const buttonProps = $derived({
		class: cn(sidebarMenuButtonVariants({ variant, size }), className),
		"data-sidebar": "menu-button",
		"data-size": size,
		"data-active": isActive,
		...restProps,
	});
</script>

{#snippet Button({ props }: { props?: Record<string, unknown> })}
	{@const mergedProps = mergeProps(buttonProps, props)}
	{#if child}
		{@render child({ props: mergedProps })}
	{:else}
		<button bind:this={ref} {...mergedProps}>
			{@render children?.()}
		</button>
	{/if}
{/snippet}

{#if !tooltipContent}
	{@render Button({})}
{:else}
	<Tooltip.Root>
		<Tooltip.Trigger>
			{#snippet child({ props })}
				{@render Button({ props })}
			{/snippet}
		</Tooltip.Trigger>
		<Tooltip.Content
			side="right"
			align="center"
			hidden={sidebar.state !== "collapsed" || sidebar.isMobile}
			children={tooltipContent}
			{...tooltipContentProps}
		/>
	</Tooltip.Root>
{/if}

--- End of File ---

--- File Path ---
frontend/src/lib/components/ui/sidebar/sidebar-group-action.svelte

<script lang="ts">
	import { cn } from "$lib/utils.js";
	import type { WithElementRef } from "bits-ui";
	import type { Snippet } from "svelte";
	import type { HTMLButtonAttributes } from "svelte/elements";

	let {
		ref = $bindable(null),
		class: className,
		children,
		child,
		...restProps
	}: WithElementRef<HTMLButtonAttributes> & {
		child?: Snippet<[{ props: Record<string, unknown> }]>;
	} = $props();

	const propObj = $derived({
		class: cn(
			"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-none transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0",
			// Increases the hit area of the button on mobile.
			"after:absolute after:-inset-2 after:md:hidden",
			"group-data-[collapsible=icon]:hidden",
			className
		),
		"data-sidebar": "group-action",
		...restProps,
	});
</script>

{#if child}
	{@render child({ props: propObj })}
{:else}
	<button bind:this={ref} {...propObj}>
		{@render children?.()}
	</button>
{/if}

--- End of File ---

--- File Path ---
frontend/src/lib/components/ui/sidebar/sidebar-input.svelte

<script lang="ts">
	import type { ComponentProps } from "svelte";
	import { Input } from "$lib/components/ui/input/index.js";
	import { cn } from "$lib/utils.js";

	let {
		ref = $bindable(null),
		value = $bindable(""),
		class: className,
		...restProps
	}: ComponentProps<typeof Input> = $props();
</script>

<Input
	bind:ref
	bind:value
	data-sidebar="input"
	class={cn(
		"bg-background focus-visible:ring-sidebar-ring h-8 w-full shadow-none focus-visible:ring-2",
		className
	)}
	{...restProps}
/>

--- End of File ---

--- File Path ---
frontend/src/lib/components/ui/tooltip/tooltip-content.svelte

<script lang="ts">
	import { Tooltip as TooltipPrimitive } from "bits-ui";
	import { cn } from "$lib/utils.js";

	let {
		ref = $bindable(null),
		class: className,
		sideOffset = 4,
		...restProps
	}: TooltipPrimitive.ContentProps = $props();
</script>

<TooltipPrimitive.Content
	bind:ref
	{sideOffset}
	class={cn(
		"bg-popover text-popover-foreground animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 overflow-hidden rounded-md border px-3 py-1.5 text-sm shadow-md",
		className
	)}
	{...restProps}
/>

--- End of File ---

--- File Path ---
frontend/src/lib/components/ui/tooltip/index.ts

import { Tooltip as TooltipPrimitive } from "bits-ui";
import Content from "./tooltip-content.svelte";

const Root = TooltipPrimitive.Root;
const Trigger = TooltipPrimitive.Trigger;
const Provider = TooltipPrimitive.Provider;

export {
	Root,
	Trigger,
	Content,
	Provider,
	//
	Root as Tooltip,
	Content as TooltipContent,
	Trigger as TooltipTrigger,
	Provider as TooltipProvider,
};

--- End of File ---

--- File Path ---
frontend/src/lib/components/ui/input/input.svelte

<script lang="ts">
	import type { HTMLInputAttributes, HTMLInputTypeAttribute } from "svelte/elements";
	import type { WithElementRef } from "bits-ui";
	import { cn } from "$lib/utils.js";

	type InputType = Exclude<HTMLInputTypeAttribute, "file">;

	type Props = WithElementRef<
		Omit<HTMLInputAttributes, "type"> &
			({ type: "file"; files?: FileList } | { type?: InputType; files?: undefined })
	>;

	let {
		ref = $bindable(null),
		value = $bindable(),
		type,
		files = $bindable(),
		class: className,
		...restProps
	}: Props = $props();
</script>

{#if type === "file"}
	<input
		bind:this={ref}
		class={cn(
			"border-input bg-background ring-offset-background placeholder:text-muted-foreground focus-visible:ring-ring flex h-10 w-full rounded-md border px-3 py-2 text-base file:border-0 file:bg-transparent file:text-sm file:font-medium focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
			className
		)}
		type="file"
		bind:files
		bind:value
		{...restProps}
	/>
{:else}
	<input
		bind:this={ref}
		class={cn(
			"border-input bg-background ring-offset-background placeholder:text-muted-foreground focus-visible:ring-ring flex h-10 w-full rounded-md border px-3 py-2 text-base file:border-0 file:bg-transparent file:text-sm file:font-medium focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
			className
		)}
		{type}
		bind:value
		{...restProps}
	/>
{/if}

--- End of File ---

--- File Path ---
frontend/src/lib/components/ui/input/index.ts

import Root from "./input.svelte";

export {
	Root,
	//
	Root as Input,
};

--- End of File ---

--- File Path ---
frontend/src/lib/components/ui/skeleton/skeleton.svelte

<script lang="ts">
	import type { WithElementRef, WithoutChildren } from "bits-ui";
	import type { HTMLAttributes } from "svelte/elements";
	import { cn } from "$lib/utils.js";

	let {
		ref = $bindable(null),
		class: className,
		...restProps
	}: WithoutChildren<WithElementRef<HTMLAttributes<HTMLDivElement>>> = $props();
</script>

<div
	bind:this={ref}
	class={cn("bg-muted animate-pulse rounded-md", className)}
	{...restProps}
></div>

--- End of File ---

--- File Path ---
frontend/src/lib/components/ui/skeleton/index.ts

import Root from "./skeleton.svelte";

export {
	Root,
	//
	Root as Skeleton,
};

--- End of File ---

--- File Path ---
frontend/src/lib/components/ui/separator/separator.svelte

<script lang="ts">
	import { Separator as SeparatorPrimitive } from "bits-ui";
	import { cn } from "$lib/utils.js";

	let {
		ref = $bindable(null),
		class: className,
		orientation = "horizontal",
		...restProps
	}: SeparatorPrimitive.RootProps = $props();
</script>

<SeparatorPrimitive.Root
	bind:ref
	class={cn(
		"bg-border shrink-0",
		orientation === "horizontal" ? "h-[1px] w-full" : "min-h-full w-[1px]",
		className
	)}
	{orientation}
	{...restProps}
/>

--- End of File ---

--- File Path ---
frontend/src/lib/components/ui/separator/index.ts

import Root from "./separator.svelte";

export {
	Root,
	//
	Root as Separator,
};

--- End of File ---

--- File Path ---
frontend/src/lib/components/ui/ConfirmationModal.svelte

<!-- src/lib/components/ui/ConfirmationModal.svelte -->
<script lang="ts">
	import { createEventDispatcher, tick } from 'svelte';
	import { fly } from 'svelte/transition';

	// Props
	const {
		isOpen = false,
		title = 'Confirmer',
		message = '√ätes-vous s√ªr de vouloir continuer ?',
		confirmText = 'Confirmer',
		cancelText = 'Annuler',
		confirmColor = 'bg-red-600 hover:bg-red-700 focus-visible:ring-red-500', // Default to red for destructive actions
		cancelColor = 'bg-gray-600 hover:bg-gray-700 focus-visible:ring-gray-500'
	} = $props<{
		isOpen?: boolean;
		title?: string;
		message?: string;
		confirmText?: string;
		cancelText?: string;
		confirmColor?: string; // Allow customizing confirm button color
		cancelColor?: string;
	}>();

	const dispatch = createEventDispatcher<{ confirm: void; cancel: void }>();

	let modalElement: HTMLElement | null = null;

	function handleConfirm() {
		dispatch('confirm');
	}

	function handleCancel() {
		dispatch('cancel');
	}

	function handleKeydown(event: KeyboardEvent) {
		if (event.key === 'Escape') {
			handleCancel();
		}
		// Basic focus trapping (can be enhanced)
		if (event.key === 'Tab' && modalElement) {
			const focusableElements = modalElement.querySelectorAll<HTMLElement>(
				'button, [href], input, select, textarea, [tabindex]:not([tabindex="-1"])'
			);
			const firstElement = focusableElements[0];
			const lastElement = focusableElements[focusableElements.length - 1];

			if (event.shiftKey) { // Shift + Tab
				if (document.activeElement === firstElement) {
					lastElement.focus();
					event.preventDefault();
				}
			} else { // Tab
				if (document.activeElement === lastElement) {
					firstElement.focus();
					event.preventDefault();
				}
			}
		}
	}

	// Focus the first button when the modal opens
	$effect(() => {
		if (isOpen && modalElement) {
			const firstButton = modalElement.querySelector<HTMLButtonElement>('button.confirm-button'); // Target confirm button first
			if (firstButton) {
				 void tick().then(() => firstButton.focus()); // Wait for render then focus
			}
		}
	});

</script>

{#if isOpen}
	<!-- svelte-ignore a11y-no-static-element-interactions a11y-click-events-have-key-events -->
	<div
		class="fixed inset-0 z-[250] flex items-center justify-center bg-black/70 backdrop-blur-sm"
		on:click|self={handleCancel}
		on:keydown={handleKeydown}
		role="alertdialog"
		aria-modal="true"
		aria-labelledby="confirm-modal-title"
		aria-describedby="confirm-modal-message"
		transition:fly={{ y: -20, duration: 200 }}
	>
		<div
			bind:this={modalElement}
			class="relative w-full max-w-md rounded-xl bg-gray-800 shadow-2xl p-6 mx-4"
		>
			<h2 id="confirm-modal-title" class="text-lg font-semibold text-white mb-3">
				{title}
			</h2>

			<p id="confirm-modal-message" class="text-sm text-gray-300 mb-6">
				{@html message}
			</p>

			<div class="flex justify-end space-x-3">
				<button
					type="button"
					on:click={handleCancel}
					class="cancel-button px-4 py-2 rounded-md text-sm font-medium text-white {cancelColor} transition-colors duration-150 focus:outline-none focus-visible:ring-2 focus-visible:ring-offset-2 focus-visible:ring-offset-gray-800"
				>
					{cancelText}
				</button>
				<button
					type="button"
					on:click={handleConfirm}
					class="confirm-button px-4 py-2 rounded-md text-sm font-medium text-white {confirmColor} transition-colors duration-150 focus:outline-none focus-visible:ring-2 focus-visible:ring-offset-2 focus-visible:ring-offset-gray-800"
				>
					{confirmText}
				</button>
			</div>
		</div>
	</div>
{/if}
--- End of File ---

--- File Path ---
frontend/src/lib/components/ui/button/button.svelte

<script lang="ts" module>
	import type { WithElementRef } from "bits-ui";
	import type { HTMLAnchorAttributes, HTMLButtonAttributes } from "svelte/elements";
	import { type VariantProps, tv } from "tailwind-variants";

	export const buttonVariants = tv({
		base: "ring-offset-background focus-visible:ring-ring inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
		variants: {
			variant: {
				default: "bg-primary text-primary-foreground hover:bg-primary/90",
				destructive: "bg-destructive text-destructive-foreground hover:bg-destructive/90",
				outline:
					"border-input bg-background hover:bg-accent hover:text-accent-foreground border",
				secondary: "bg-secondary text-secondary-foreground hover:bg-secondary/80",
				ghost: "hover:bg-accent hover:text-accent-foreground",
				link: "text-primary underline-offset-4 hover:underline",
			},
			size: {
				default: "h-10 px-4 py-2",
				sm: "h-9 rounded-md px-3",
				lg: "h-11 rounded-md px-8",
				icon: "h-10 w-10",
			},
		},
		defaultVariants: {
			variant: "default",
			size: "default",
		},
	});

	export type ButtonVariant = VariantProps<typeof buttonVariants>["variant"];
	export type ButtonSize = VariantProps<typeof buttonVariants>["size"];

	export type ButtonProps = WithElementRef<HTMLButtonAttributes> &
		WithElementRef<HTMLAnchorAttributes> & {
			variant?: ButtonVariant;
			size?: ButtonSize;
		};
</script>

<script lang="ts">
	import { cn } from "$lib/utils.js";

	let {
		class: className,
		variant = "default",
		size = "default",
		ref = $bindable(null),
		href = undefined,
		type = "button",
		children,
		...restProps
	}: ButtonProps = $props();
</script>

{#if href}
	<a
		bind:this={ref}
		class={cn(buttonVariants({ variant, size }), className)}
		{href}
		{...restProps}
	>
		{@render children?.()}
	</a>
{:else}
	<button
		bind:this={ref}
		class={cn(buttonVariants({ variant, size }), className)}
		{type}
		{...restProps}
	>
		{@render children?.()}
	</button>
{/if}

--- End of File ---

--- File Path ---
frontend/src/lib/components/ui/button/index.ts

import Root, {
	type ButtonProps,
	type ButtonSize,
	type ButtonVariant,
	buttonVariants,
} from "./button.svelte";

export {
	Root,
	type ButtonProps as Props,
	//
	Root as Button,
	buttonVariants,
	type ButtonProps,
	type ButtonSize,
	type ButtonVariant,
};

--- End of File ---

--- File Path ---
frontend/src/lib/components/ui/select/select-separator.svelte

<script lang="ts">
	import type { Separator as SeparatorPrimitive } from "bits-ui";
	import { Separator } from "$lib/components/ui/separator/index.js";
	import { cn } from "$lib/utils.js";

	let {
		ref = $bindable(null),
		class: className,
		...restProps
	}: SeparatorPrimitive.RootProps = $props();
</script>

<Separator bind:ref class={cn("bg-muted -mx-1 my-1 h-px", className)} {...restProps} />

--- End of File ---

--- File Path ---
frontend/src/lib/components/ui/select/select-group-heading.svelte

<script lang="ts">
	import { Select as SelectPrimitive } from "bits-ui";
	import { cn } from "$lib/utils.js";

	let {
		ref = $bindable(null),
		class: className,
		...restProps
	}: SelectPrimitive.GroupHeadingProps = $props();
</script>

<SelectPrimitive.GroupHeading
	bind:ref
	class={cn("py-1.5 pl-8 pr-2 text-sm font-semibold", className)}
	{...restProps}
/>

--- End of File ---

--- File Path ---
frontend/src/lib/components/ui/select/select-item.svelte

<script lang="ts">
	import { Check } from 'lucide-svelte';
	import { Select as SelectPrimitive, type WithoutChild } from 'bits-ui';
	import { cn } from '$lib/utils.js';

	let {
		ref = $bindable(null),
		class: className,
		value,
		label,
		children: childrenProp,
		...restProps
	}: WithoutChild<SelectPrimitive.ItemProps> = $props();
</script>

<SelectPrimitive.Item
	bind:ref
	{value}
	class={cn(
		'data-[highlighted]:bg-accent data-[highlighted]:text-accent-foreground relative flex w-full cursor-default items-center rounded-sm py-1.5 pr-2 pl-8 text-sm outline-none select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50',
		className
	)}
	{...restProps}
>
	{#snippet children({ selected, highlighted })}
		<span class="absolute left-2 flex size-3.5 items-center justify-center">
			{#if selected}
				<Check class="size-4" />
			{/if}
		</span>
		<p class="ml-4">
			{#if childrenProp}
				{@render childrenProp({ selected, highlighted })}
			{:else}
				{label || value}
			{/if}
		</p>
	{/snippet}
</SelectPrimitive.Item>

--- End of File ---

--- File Path ---
frontend/src/lib/components/ui/select/select-content.svelte

<script lang="ts">
	import { Select as SelectPrimitive, type WithoutChild } from "bits-ui";
	import SelectScrollUpButton from "./select-scroll-up-button.svelte";
	import SelectScrollDownButton from "./select-scroll-down-button.svelte";
	import { cn } from "$lib/utils.js";

	let {
		ref = $bindable(null),
		class: className,
		sideOffset = 4,
		portalProps,
		children,
		...restProps
	}: WithoutChild<SelectPrimitive.ContentProps> & {
		portalProps?: SelectPrimitive.PortalProps;
	} = $props();
</script>

<SelectPrimitive.Portal {...portalProps}>
	<SelectPrimitive.Content
		bind:ref
		{sideOffset}
		class={cn(
			"data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 bg-popover text-popover-foreground relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border shadow-md data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1",
			className
		)}
		{...restProps}
	>
		<SelectScrollUpButton />
		<SelectPrimitive.Viewport
			class={cn(
				"h-[var(--bits-select-anchor-height)] w-full min-w-[var(--bits-select-anchor-width)] p-1"
			)}
		>
			{@render children?.()}
		</SelectPrimitive.Viewport>
		<SelectScrollDownButton />
	</SelectPrimitive.Content>
</SelectPrimitive.Portal>

--- End of File ---

--- File Path ---
frontend/src/lib/components/ui/select/select-scroll-up-button.svelte

<script lang="ts">
	import { ChevronUp } from "lucide-svelte";
	import { Select as SelectPrimitive, type WithoutChildrenOrChild } from "bits-ui";
	import { cn } from "$lib/utils.js";

	let {
		ref = $bindable(null),
		class: className,
		...restProps
	}: WithoutChildrenOrChild<SelectPrimitive.ScrollUpButtonProps> = $props();
</script>

<SelectPrimitive.ScrollUpButton
	bind:ref
	class={cn("flex cursor-default items-center justify-center py-1", className)}
	{...restProps}
>
	<ChevronUp class="size-4" />
</SelectPrimitive.ScrollUpButton>

--- End of File ---

--- File Path ---
frontend/src/lib/components/ui/select/select-trigger.svelte

<script lang="ts">
	import { Select as SelectPrimitive, type WithoutChild } from "bits-ui";
	import ChevronDown from "lucide-svelte/icons/chevron-down";
	import { cn } from "$lib/utils.js";

	let {
		ref = $bindable(null),
		class: className,
		children,
		...restProps
	}: WithoutChild<SelectPrimitive.TriggerProps> = $props();
</script>

<SelectPrimitive.Trigger
	bind:ref
	class={cn(
		"border-input bg-background ring-offset-background data-[placeholder]:text-muted-foreground focus:ring-ring flex h-10 w-full items-center justify-between rounded-md border px-3 py-2 text-sm focus:outline-none focus:ring-2 focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1",
		className
	)}
	{...restProps}
>
	{@render children?.()}
	<ChevronDown class="size-4 opacity-50" />
</SelectPrimitive.Trigger>

--- End of File ---

--- File Path ---
frontend/src/lib/components/ui/select/index.ts

import { Select as SelectPrimitive } from "bits-ui";

import GroupHeading from "./select-group-heading.svelte";
import Item from "./select-item.svelte";
import Content from "./select-content.svelte";
import Trigger from "./select-trigger.svelte";
import Separator from "./select-separator.svelte";
import ScrollDownButton from "./select-scroll-down-button.svelte";
import ScrollUpButton from "./select-scroll-up-button.svelte";

const Root = SelectPrimitive.Root;
const Group = SelectPrimitive.Group;

export {
	Root,
	Group,
	GroupHeading,
	Item,
	Content,
	Trigger,
	Separator,
	ScrollDownButton,
	ScrollUpButton,
	//
	Root as Select,
	Group as SelectGroup,
	GroupHeading as SelectGroupHeading,
	Item as SelectItem,
	Content as SelectContent,
	Trigger as SelectTrigger,
	Separator as SelectSeparator,
	ScrollDownButton as SelectScrollDownButton,
	ScrollUpButton as SelectScrollUpButton,
};

--- End of File ---

--- File Path ---
frontend/src/lib/components/ui/select/select-scroll-down-button.svelte

<script lang="ts">
	import { ChevronDown } from 'lucide-svelte';
	import { Select as SelectPrimitive, type WithoutChildrenOrChild } from 'bits-ui';
	import { cn } from '$lib/utils.js';

	let {
		ref = $bindable(null),
		class: className,
		...restProps
	}: WithoutChildrenOrChild<SelectPrimitive.ScrollDownButtonProps> = $props();
</script>

<SelectPrimitive.ScrollDownButton
	bind:ref
	class={cn('flex cursor-default items-center justify-center py-1', className)}
	{...restProps}
>
	<ChevronDown class="size-4" />
</SelectPrimitive.ScrollDownButton>

--- End of File ---

--- File Path ---
frontend/src/lib/components/ui/sheet/sheet-content.svelte

<script lang="ts" module>
	import { tv, type VariantProps } from "tailwind-variants";
	export const sheetVariants = tv({
		base: "bg-background data-[state=open]:animate-in data-[state=closed]:animate-out fixed z-50 gap-4 p-6 shadow-lg transition ease-in-out data-[state=closed]:duration-300 data-[state=open]:duration-500",
		variants: {
			side: {
				top: "data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top inset-x-0 top-0 border-b",
				bottom: "data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom inset-x-0 bottom-0 border-t",
				left: "data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left inset-y-0 left-0 h-full w-3/4 border-r sm:max-w-sm",
				right: "data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right inset-y-0 right-0 h-full w-3/4 border-l sm:max-w-sm",
			},
		},
		defaultVariants: {
			side: "right",
		},
	});

	export type Side = VariantProps<typeof sheetVariants>["side"];
</script>

<script lang="ts">
	import { Dialog as SheetPrimitive, type WithoutChildrenOrChild } from "bits-ui";
	import X from "@lucide/svelte/icons/x";
	import type { Snippet } from "svelte";
	import SheetOverlay from "./sheet-overlay.svelte";
	import { cn } from "$lib/utils.js";

	let {
		ref = $bindable(null),
		class: className,
		side = "right",
		portalProps,
		children,
		...restProps
	}: WithoutChildrenOrChild<SheetPrimitive.ContentProps> & {
		portalProps?: SheetPrimitive.PortalProps;
		side?: Side;
		children: Snippet;
	} = $props();
</script>

<SheetPrimitive.Portal {...portalProps}>
	<SheetOverlay />
	<SheetPrimitive.Content bind:ref class={cn(sheetVariants({ side }), className)} {...restProps}>
		{@render children?.()}
		<SheetPrimitive.Close
			class="ring-offset-background focus:ring-ring data-[state=open]:bg-secondary absolute right-4 top-4 rounded-sm opacity-70 transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-offset-2 disabled:pointer-events-none"
		>
			<X class="size-4" />
			<span class="sr-only">Close</span>
		</SheetPrimitive.Close>
	</SheetPrimitive.Content>
</SheetPrimitive.Portal>

--- End of File ---

--- File Path ---
frontend/src/lib/components/ui/sheet/sheet-footer.svelte

<script lang="ts">
	import type { WithElementRef } from "bits-ui";
	import type { HTMLAttributes } from "svelte/elements";
	import { cn } from "$lib/utils.js";

	let {
		ref = $bindable(null),
		class: className,
		children,
		...restProps
	}: WithElementRef<HTMLAttributes<HTMLDivElement>> = $props();
</script>

<div
	bind:this={ref}
	class={cn("flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2", className)}
	{...restProps}
>
	{@render children?.()}
</div>

--- End of File ---

--- File Path ---
frontend/src/lib/components/ui/sheet/sheet-overlay.svelte

<script lang="ts">
	import { Dialog as SheetPrimitive } from "bits-ui";
	import { cn } from "$lib/utils.js";

	let {
		ref = $bindable(null),
		class: className,
		...restProps
	}: SheetPrimitive.OverlayProps = $props();

	export { className as class };
</script>

<SheetPrimitive.Overlay
	bind:ref
	class={cn(
		"data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0  fixed inset-0 z-50 bg-black/80",
		className
	)}
	{...restProps}
/>

--- End of File ---

--- File Path ---
frontend/src/lib/components/ui/sheet/sheet-header.svelte

<script lang="ts">
	import type { HTMLAttributes } from "svelte/elements";
	import type { WithElementRef } from "bits-ui";
	import { cn } from "$lib/utils.js";

	let {
		ref = $bindable(null),
		class: className,
		children,
		...restProps
	}: WithElementRef<HTMLAttributes<HTMLDivElement>> = $props();
</script>

<div
	bind:this={ref}
	class={cn("flex flex-col space-y-2 text-center sm:text-left", className)}
	{...restProps}
>
	{@render children?.()}
</div>

--- End of File ---

--- File Path ---
frontend/src/lib/components/ui/sheet/sheet-title.svelte

<script lang="ts">
	import { Dialog as SheetPrimitive } from "bits-ui";
	import { cn } from "$lib/utils.js";

	let {
		ref = $bindable(null),
		class: className,
		...restProps
	}: SheetPrimitive.TitleProps = $props();
</script>

<SheetPrimitive.Title
	bind:ref
	class={cn("text-foreground text-lg font-semibold", className)}
	{...restProps}
/>

--- End of File ---

--- File Path ---
frontend/src/lib/components/ui/sheet/index.ts

import { Dialog as SheetPrimitive } from "bits-ui";
import Overlay from "./sheet-overlay.svelte";
import Content from "./sheet-content.svelte";
import Header from "./sheet-header.svelte";
import Footer from "./sheet-footer.svelte";
import Title from "./sheet-title.svelte";
import Description from "./sheet-description.svelte";

const Root = SheetPrimitive.Root;
const Close = SheetPrimitive.Close;
const Trigger = SheetPrimitive.Trigger;
const Portal = SheetPrimitive.Portal;

export {
	Root,
	Close,
	Trigger,
	Portal,
	Overlay,
	Content,
	Header,
	Footer,
	Title,
	Description,
	//
	Root as Sheet,
	Close as SheetClose,
	Trigger as SheetTrigger,
	Portal as SheetPortal,
	Overlay as SheetOverlay,
	Content as SheetContent,
	Header as SheetHeader,
	Footer as SheetFooter,
	Title as SheetTitle,
	Description as SheetDescription,
};

--- End of File ---

--- File Path ---
frontend/src/lib/components/ui/sheet/sheet-description.svelte

<script lang="ts">
	import { Dialog as SheetPrimitive } from "bits-ui";
	import { cn } from "$lib/utils.js";

	let {
		ref = $bindable(null),
		class: className,
		...restProps
	}: SheetPrimitive.DescriptionProps = $props();
</script>

<SheetPrimitive.Description
	bind:ref
	class={cn("text-muted-foreground text-sm", className)}
	{...restProps}
/>

--- End of File ---

--- File Path ---
frontend/src/lib/components/FeedbackModalChecker.svelte

<!-- src/lib/components/FeedbackModalChecker.svelte -->
<script lang="ts">
	import userProfileStore from '$lib/stores/user';
	import FeedbackModal from '../../components/FeedbackModal.svelte';

	let isFeedbackModalOpen = $state(false);
    let hasCheckedInitialNull = $state(false); // Prevent multiple init calls

	/**
	 * Checks if the feedback_modal timestamp is older than one month.
	 * Returns FALSE if the timestamp is NULL or not older than a month.
     * Returns TRUE only if the timestamp EXISTS and is older than one month.
	 */
	function isTimestampOlderThanOneMonth(feedbackModalTimestamp: string | null): boolean {
        if (!feedbackModalTimestamp) {
            // If timestamp is null, it's not older than a month, so don't show yet.
            // The initialization call will happen separately.
            return false;
        }

		try {
			const lastShown = new Date(feedbackModalTimestamp);
			if (isNaN(lastShown.getTime())) {
				console.warn("Feedback Check: Invalid feedback_modal timestamp:", feedbackModalTimestamp, "Treating as needing check/reset, but not showing yet.");
				// If invalid, we might want the backend to reset it, but don't open modal now.
                return false;
			}

            const now = new Date();
			const oneMonthAgo = new Date(now);
			oneMonthAgo.setMonth(oneMonthAgo.getMonth() - 1);

            const show = lastShown < oneMonthAgo;
            // console.log(`Feedback Check (isTimestampOlderThanOneMonth): LastShown=${lastShown.toISOString()}, OneMonthAgo=${oneMonthAgo.toISOString()}, ShouldShow=${show}`);
			return show;

		} catch (err) {
			console.error('Feedback Check: Error parsing feedback_modal timestamp:', err);
			return false; // Don't show modal on error
		}
	}

    // Function to silently call the API to initialize/update the timestamp
    async function triggerTimestampUpdateAPI() {
        // console.log("Feedback Checker: Triggering background API call to /api/update-feedback-modal");
        try {
            // This API call (from the previous correct version) handles the logic:
            // - If timestamp was NULL, it sets it to 23 days ago.
            // - If timestamp existed, it sets it to now().
            const response = await fetch('/api/update-feedback-modal', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' }
            });
             if (!response.ok) {
                 const errorData = await response.json().catch(() => ({ message: 'Failed to parse error response' }));
                //  console.error('Feedback Checker: Background API update failed:', response.status, errorData.message || response.statusText);
            } else {
                //  console.log("Feedback Checker: Background API timestamp update successful.");
            }
        } catch(err) {
            // console.error('Feedback Checker: Network error during background API update:', err);
        }
    }

    // Function called when the modal signals it's closing or submitted
	function handleModalClose() {
		isFeedbackModalOpen = false;
        // The API call to update timestamp to NOW() happens inside the FeedbackModal component's $effect
        // OR alternatively, trigger the update *here* explicitly after closing.
        // Let's assume the FeedbackModal's own effect handles the update-to-now() call.
	}

    // Effect to check when the user profile changes
	$effect(() => {
		const profile = $userProfileStore;

		if (profile) {
            const timestamp = profile.feedback_modal;
            // console.log("Feedback Checker $effect: Profile loaded, checking timestamp:", timestamp);

            if (timestamp === null && !hasCheckedInitialNull) {
                // --- Scenario 1: Timestamp is NULL (First time) ---
                // console.log("Feedback Checker: Timestamp is NULL. Triggering background initialization.");
                hasCheckedInitialNull = true; // Prevent re-triggering initialization immediately
                triggerTimestampUpdateAPI(); // Call API to set date to -23 days
                // **DO NOT** open the modal here
                isFeedbackModalOpen = false;

            } else if (timestamp !== null) {
                // --- Scenario 2: Timestamp EXISTS ---
                 hasCheckedInitialNull = true; // Mark as checked once a timestamp exists
                 // Check if it's time to show the modal (> 1 month old)
                if (isTimestampOlderThanOneMonth(timestamp)) {
                    // console.log("Feedback Checker: Timestamp is older than 1 month. Scheduling modal open.");
                    // Use setTimeout to avoid immediate opening on load/profile update
                    const timer = setTimeout(() => {
                        if ($userProfileStore) { // Re-check user is still logged in
                             // console.log("Feedback Checker: Timer fired, opening modal.");
                             isFeedbackModalOpen = true;
                        } else {
                              // console.log("Feedback Checker: User logged out before modal timer fired.");
                        }
                    }, 1500); // Shorter delay might be okay now

                    return () => {
                        clearTimeout(timer);
                    };
                } else {
                    // console.log("Feedback Checker: Timestamp exists but is not older than 1 month.");
                    isFeedbackModalOpen = false; // Ensure modal is closed if condition isn't met
                }
            } else {
                 // Timestamp is null, but we already checked/triggered init this session
                 // console.log("Feedback Checker: Timestamp is NULL, but initial check already done this session.");
                 isFeedbackModalOpen = false;
            }
		} else {
            // console.log("Feedback Checker $effect: Profile not yet loaded or user logged out.");
            hasCheckedInitialNull = false; // Reset check flag if user logs out
             isFeedbackModalOpen = false; // Ensure modal is closed
        }
	});

</script>

<!-- Pass the close handler -->
<FeedbackModal bind:isOpen={isFeedbackModalOpen} on:close={handleModalClose} />
--- End of File ---

--- File Path ---
frontend/src/lib/components/CheckoutForm.svelte

<script lang="ts">
	import { env } from '$env/dynamic/public';
	import { loadStripe, type StripeElements as StripeElementsType, type StripePaymentElement, type Stripe as StripeType } from '@stripe/stripe-js';
	import { AlertCircle, CreditCard } from 'lucide-svelte';
	import { onMount, tick } from 'svelte';

	const stripePublicKey = env.PUBLIC_STRIPE_KEY;

	let stripe: StripeType | null = $state(null);
	let elements: StripeElementsType | null = $state(null);
	let paymentElement: StripePaymentElement | null = $state(null);
	let clientSecret: string | null = $state(null);

	let isLoadingStripe = $state(true);
	let isCreatingIntent = $state(false);
	let paymentProcessing = $state(false);
	let errorMessage = $state('');

	let selectedPlan = $state<'monthly' | 'yearly' | null>(null);
	let hasAttemptedInitForCurrentPlan = $state(false);

	const plans = {
		monthly: {
			id: 'monthly' as const,
			name: 'Mensuel',
			priceString: '‚Ç¨0.99',
			frequency: 'par mois',
		},
		yearly: {
			id: 'yearly' as const,
			name: 'Annuel',
			priceString: '‚Ç¨9.99',
			frequency: 'par an',
			originalMonthlyTotal: (0.99 * 12).toFixed(2)
		}
	};

	onMount(async () => {
		if (!stripePublicKey) {
			errorMessage = 'Cl√© publique Stripe non configur√©e.';
			isLoadingStripe = false;
			return;
		}
		try {
			stripe = await loadStripe(stripePublicKey);
			isLoadingStripe = false;
		} catch (error: any) {
			console.error("Erreur chargement Stripe.js:", error);
			errorMessage = error.message || '√âchec du chargement de Stripe.';
			isLoadingStripe = false;
		}
	});

	function selectPlanForPayment(planId: 'monthly' | 'yearly') {
		if (paymentProcessing || isCreatingIntent) return;
		if (selectedPlan === planId) return;

		selectedPlan = planId;
		errorMessage = '';
		clientSecret = null;
		if (paymentElement) {
			try { paymentElement.destroy(); } catch(e) { /* ignore */ }
			paymentElement = null;
		}
		elements = null;
		hasAttemptedInitForCurrentPlan = false;
	}

	async function initializeStripeElements() {
		if (!stripe || !selectedPlan || elements || clientSecret || isLoadingStripe || hasAttemptedInitForCurrentPlan) {
			return;
		}

		hasAttemptedInitForCurrentPlan = true;
		isCreatingIntent = true;
		errorMessage = '';

		try {
			const response = await fetch('/api/create-subscription', {
				method: 'POST',
				headers: { 'Content-Type': 'application/json' },
				body: JSON.stringify({ planIdentifier: selectedPlan })
			});

			const result = await response.json();

            console.log("result", result);
			if (!response.ok) {
				throw new Error(result.error || `√âchec de cr√©ation de l'abonnement (${response.status})`);
			}
			if (!result.clientSecret || !result.subscriptionId) {
				throw new Error('Client secret ou ID d\'abonnement manquant dans la r√©ponse du serveur.');
			}

			clientSecret = result.clientSecret;

			const appearance = {
				theme: 'night' as const,
				labels: 'floating' as const,
				variables: {
					colorPrimary: '#ea580c',        // Orange for active elements/focus
                    colorBackground: '#2d3748',    // Darker gray (gray-800 from Tailwind) for element bg
                    colorText: '#e2e8f0',          // Light gray (gray-200) for text
                    colorDanger: '#e53e3e',        // Red (red-600) for errors
                    fontFamily: 'inherit',
                    spacingUnit: '4px',            // Default, fine
                    borderRadius: '0.375rem',      // Tailwind's rounded-md
                    colorTextPlaceholder: '#a0aec0' // Medium gray (gray-500) for placeholders
				}
			};
			elements = stripe.elements({ clientSecret, appearance, locale: 'fr' });
			paymentElement = elements.create('payment', {
				layout: {
					type: 'tabs',
					defaultCollapsed: false,
				}
			});

			await tick();
			const mountPoint = document.getElementById('card-element-placeholder');
			if (mountPoint) {
                mountPoint.innerHTML = '';
				paymentElement.mount(mountPoint);
			} else {
				throw new Error("L'√©l√©ment de montage pour le paiement (#card-element-placeholder) n'a pas √©t√© trouv√©.");
			}
			
			paymentElement.on('ready', () => {
				isCreatingIntent = false;
			});

			paymentElement.on('change', (event) => {
				if (event.error) {
					errorMessage = event.error.message ?? "Erreur de validation des informations de paiement.";
				} else {
					errorMessage = '';
				}
			});

		} catch (error: any) {
			console.error("Erreur d'initialisation Stripe Elements:", error);
			errorMessage = error.message || "√âchec de l'initialisation du formulaire de paiement.";
			isCreatingIntent = false;
			clientSecret = null;
			elements = null;
			if (paymentElement) {
				try { paymentElement.destroy(); } catch(e) { /* ignore */ }
				paymentElement = null;
			}
		}
	}

	$effect(() => {
		if (selectedPlan && stripe && !isLoadingStripe && !elements && !clientSecret && !hasAttemptedInitForCurrentPlan) {
			initializeStripeElements();
		}
	});

	async function handleSubmit() {
		if (!stripe || !elements || !clientSecret || paymentProcessing || isCreatingIntent || !paymentElement) {
			if (isCreatingIntent) errorMessage = "Initialisation du paiement en cours...";
			else if (!selectedPlan) errorMessage = "Veuillez s√©lectionner un plan.";
			else if (!paymentElement) errorMessage = "D√©tails de paiement non charg√©s. Veuillez r√©essayer ou s√©lectionner un plan.";
			else errorMessage = "Syst√®me de paiement non pr√™t.";
			return;
		}

		paymentProcessing = true;
		errorMessage = '';

		const { error } = await stripe.confirmPayment({
			elements,
			confirmParams: {
				return_url: `${window.location.origin}/payment-status`,
			},
		});

		if (error) {
			console.error("Erreur de confirmation Stripe:", error);
			errorMessage = error.message || 'Une erreur inattendue est survenue lors du paiement.';
			paymentProcessing = false;
		}
	}
</script>

<div class="checkout-container">
	{#if isLoadingStripe}
		<div class="loading-text">Chargement de Stripe...</div>
	{:else if !selectedPlan}
	    <h3 class="instruction-text">Choisissez votre plan :</h3>
    {/if}

	<div class="plan-selection-cards">
		<div
			class="plan-card"
			class:selected={selectedPlan === plans.monthly.id}
			on:click={() => selectPlanForPayment(plans.monthly.id)}
			role="button"
			tabindex="0"
			on:keydown={(e) => e.key === 'Enter' && selectPlanForPayment(plans.monthly.id)}
		>
			<h4>{plans.monthly.name}</h4>
			<div class="price">{plans.monthly.priceString}</div>
			<div class="frequency">{plans.monthly.frequency}</div>
		</div>

		<div
			class="plan-card"
			class:selected={selectedPlan === plans.yearly.id}
			on:click={() => selectPlanForPayment(plans.yearly.id)}
			role="button"
			tabindex="0"
			on:keydown={(e) => e.key === 'Enter' && selectPlanForPayment(plans.yearly.id)}
		>
			<span class="savings-badge">√âconomisez !</span>
			<h4>{plans.yearly.name}</h4>
			<div class="price">{plans.yearly.priceString}</div>
			<div class="frequency">{plans.yearly.frequency}</div>
			<div class="original-price">
				<s>‚Ç¨{plans.yearly.originalMonthlyTotal}</s>
			</div>
		</div>
	</div>

	{#if selectedPlan}
		<div class="payment-details-box mt-8 rounded-lg bg-gray-800 p-6 shadow-lg md:p-8">
			<div class="payment-method-header mb-5 flex items-center gap-2 border-b-2 border-orange-500 pb-3">
				<CreditCard class="h-5 w-5 text-orange-500" />
				<h3 class="font-semibold text-lg text-white">Paiement par Carte Bancaire</h3>
			</div>
            
			<div id="card-element-container" class="rounded-md bg-gray-900 p-1 border border-gray-700">
				<div id="card-element-placeholder" class="min-h-[180px] md:min-h-[200px]">
					{#if isCreatingIntent}
						<div class="flex items-center justify-center text-gray-400 italic h-full p-3">
							Initialisation du formulaire de paiement...
						</div>
					{:else if !paymentElement && !errorMessage && hasAttemptedInitForCurrentPlan}
						 <div class="flex items-center justify-center text-gray-500 italic h-full p-3">
							Impossible de charger le formulaire. V√©rifiez votre connexion et r√©essayez.
						</div>
					{:else if !paymentElement && !errorMessage && !hasAttemptedInitForCurrentPlan}
						 <div class="flex items-center justify-center text-gray-500 italic h-full p-3">
							Chargement du formulaire de carte...
						</div>
					{/if}
				</div>
			</div>
            <p class="mt-4 text-xs text-gray-400">
                En fournissant vos informations de carte bancaire, vous autorisez Veille M√©dicale √† d√©biter votre carte pour les paiements futurs conform√©ment √† ses conditions.
            </p>
		</div>
	{/if}

	{#if errorMessage && !isCreatingIntent}
		<div class="error-message mt-6 flex items-center gap-2" role="alert">
			<AlertCircle class="h-5 w-5 shrink-0 text-red-400" />
			<span class="text-red-400">{errorMessage}</span>
		</div>
	{/if}

	{#if selectedPlan}
		<form id="payment-form" on:submit|preventDefault={handleSubmit} class="mt-8">
			<button
				type="submit"
				disabled={paymentProcessing || isLoadingStripe || isCreatingIntent || !stripe || !elements || !paymentElement}
				class:processing={paymentProcessing}
				class="w-full rounded-lg bg-orange-600 px-6 py-3 text-base font-semibold text-white shadow-md transition-all duration-300 hover:bg-orange-700 focus:outline-none focus:ring-2 focus:ring-orange-500 focus:ring-offset-2 focus:ring-offset-gray-800 disabled:cursor-not-allowed disabled:opacity-60"
			>
				{#if paymentProcessing}
					<span class="flex items-center justify-center">
                        <svg class="mr-2 h-5 w-5 animate-spin" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24"> <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle> <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path> </svg>
                        Traitement...
                    </span>
				{:else if isLoadingStripe || isCreatingIntent}
					Chargement...
				{:else}
					S'abonner {selectedPlan === "monthly" ? "mensuellement" : 'annuellement'}
				{/if}
			</button>
		</form>
	{/if}
</div>

<style>
	.checkout-container {
		background-color: #1e1e1e; /* gray-900 */
		padding: 2rem;
		border-radius: 0.5rem; /* rounded-lg */
		box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05); /* shadow-lg */
		width: 100%;
		max-width: 28rem; /* max-w-md */
		margin: 2rem auto;
        color: #d1d5db; /* gray-300 */
        font-family: inherit; /* From global */
	}
    .loading-text, .instruction-text {
		text-align: center;
		margin-bottom: 1.5rem; /* mb-6 */
		color: #9ca3af; /* gray-400 */
		font-size: 1.25rem; /* text-xl */
		font-weight: 500; /* font-medium */
	}
	.plan-selection-cards {
		display: flex;
		gap: 1rem; /* gap-4 */
		margin-bottom: 1rem; /* mb-4 */
	}
	.plan-card {
		flex: 1;
		background-color: #374151; /* gray-700 */
		border: 2px solid #4b5563; /* gray-600 */
		border-radius: 0.5rem; /* rounded-lg */
		padding: 1.5rem 1rem; /* p-6 px-4 */
		text-align: center;
		cursor: pointer;
		transition: all 0.2s ease-in-out;
		position: relative;
	}
	.plan-card:hover {
		background-color: #4b5563; /* gray-600 */
		border-color: #6b7280; /* gray-500 */
		transform: translateY(-2px);
	}
	.plan-card.selected {
		border-color: #f97316; /* orange-500 */
		background-color: #c2410c; /* orange-700 (darker for selected) */
		box-shadow: 0 0 15px rgba(249, 115, 22, 0.3); /* orange-500 shadow */
		color: white;
	}
    .plan-card.selected .price, .plan-card.selected h4, .plan-card.selected .frequency, .plan-card.selected .original-price {
        color: white;
    }
	.plan-card h4 { margin-top: 0; margin-bottom: 0.5rem; font-size: 1.125rem; /* text-lg */ font-weight: 600; /* font-semibold */ color: #f3f4f6; /* gray-100 */ }
	.plan-card .price { font-size: 2.25rem; /* text-4xl */ font-weight: 700; /* font-bold */ color: #f97316; /* orange-500 */ margin-bottom: 0.25rem; line-height: 1.1; }
	.plan-card .frequency { font-size: 0.875rem; /* text-sm */ color: #9ca3af; /* gray-400 */ margin-bottom: 0.5rem; }
	.plan-card .original-price { font-size: 0.875rem; color: #6b7280; /* gray-500 */ margin-top: 0.25rem; }
	.plan-card .savings-badge {
		position: absolute; top: -0.625rem; /* -top-2.5 */ right: -0.625rem; /* -right-2.5 */
		background-color: #14b8a6; /* teal-500 */
		color: #111827; /* gray-900 */
		padding: 0.25em 0.625em; /* px-2.5 py-1 */ border-radius: 0.25rem; /* rounded */
		font-size: 0.75rem; /* text-xs */ font-weight: 700; line-height: 1;
	}

    .payment-details-box {
        background-color: #374151; /* gray-700 */
    }
    .payment-method-header {
        border-bottom-color: #f97316; /* orange-500 */
    }

    /* Container for Stripe Element for better background control */
    #card-element-container {
		background-color: #1f2937; /* gray-800 or Stripe's 'night' theme default if it matches */
        border-radius: 0.375rem; /* rounded-md */
	}
	#card-element-placeholder {
        /* This div itself will be styled by Stripe Elements via appearance API.
           We just need to provide a min-height for when it's empty or loading. */
        padding-top: 1rem;
        padding-bottom: 1rem;
        display: flex;
        align-items: center;
        justify-content: center;
	}

	.error-message {
		color: #fca5a5; /* red-300 */
		background-color: rgba(239, 68, 68, 0.1); /* bg-red-500/10 */
		border: 1px solid #ef4444; /* red-500 */
		padding: 0.75rem 1rem; /* p-3 px-4 */
		border-radius: 0.375rem; /* rounded-md */
		font-size: 0.875rem; /* text-sm */
	}
</style>
--- End of File ---

--- File Path ---
frontend/src/lib/components/Header.svelte

<script lang="ts">
	import MobileFeatureNoticeModal from '$lib/components/MobileFeatureNoticeModal.svelte';
	import NewFeatureNotice from '$lib/components/NewFeatureNotice.svelte';
	import { i18n } from '$lib/i18n';
	import userProfileStore from '$lib/stores/user';
	import { supabase } from '$lib/supabase';
	import { onMount } from 'svelte';

	let showAccountMenu = $state(false);
	let showMobileMenu = $state(false);
	let showHeader = $state(true);
	let lastScrollY = $state(0);

	let showNotice = $state(false);
	let showMobileNoticeModal = $state(false);
	let isLoadingNoticeState = $state(false);

	$effect(() => {
		const currentUser = $userProfileStore;
		// console.log("Header $effect: User changed:", currentUser?.id);

		if (currentUser?.id) {
			isLoadingNoticeState = true;
			// console.log("Header: Fetching tooltip status for user", currentUser.id);
			supabase
				.from('user_profiles')
				.select('has_seen_tooltip')
				.eq('id', currentUser.id)
				.maybeSingle()
				.then(({ data, error }) => {
					if (error) {
						// console.error("Header: Error fetching tooltip status:", error);
						showNotice = false;
					} else {
						const seen = data?.has_seen_tooltip ?? false;
						// console.log("Header: Fetched tooltip status:", seen);
						showNotice = !seen;
					}
				})
				.finally(() => {
					isLoadingNoticeState = false;
					// console.log("Header: Final showNotice state after fetch:", showNotice);
				});
		} else {
			// console.log("Header: User logged out, hiding notice.");
			showNotice = false;
			isLoadingNoticeState = false;
		}
	});

	function toggleMobileMenu() {
		showMobileMenu = !showMobileMenu;
	}

	function closeMobileMenu() {
		showMobileMenu = false;
	}

	function handleOutsideClick(event: MouseEvent) {
		const target = event.target as HTMLElement;
		if (showAccountMenu && !target.closest('.account-menu')) {
			showAccountMenu = false;
		}
		if (
			showMobileMenu &&
			!target.closest('.mobile-menu') &&
			!target.closest('.burger-button')
		) {
			showMobileMenu = false;
		}
	}

	onMount(() => {
		lastScrollY = window.scrollY;
		const handleScroll = () => {
			const currentScrollY = window.scrollY;

			if (currentScrollY > lastScrollY && currentScrollY > 80) {
				showHeader = false;
			} else {
				showHeader = true;
			}

			lastScrollY = currentScrollY;
		};

		window.addEventListener('scroll', handleScroll);
		document.addEventListener('click', handleOutsideClick);

		return () => {
			window.removeEventListener('scroll', handleScroll);
			document.removeEventListener('click', handleOutsideClick);
		};
	});

	function openMobileNotice() {
		if (showNotice) {
			showMobileNoticeModal = true;
		}
	}

	async function handleDismissNotice() {
		const wasShowing = showNotice;
		showNotice = false;
		showMobileNoticeModal = false;

		if (wasShowing && $userProfileStore?.id) {
			// console.log("Header: Calling API to dismiss notice...");
			try {
				const response = await fetch('/api/dismiss-feature-notice', { method: 'POST' });
				if (!response.ok && response.status !== 204) {
					// console.error("Header: API Error dismissing notice:", response.status, await response.text());
				} else {
					// console.log("Header: Notice dismissed successfully via API.");
					userProfileStore.update(p => p ? { ...p, has_seen_tooltip: true } : null);
				}
			} catch (err) {
				// console.error("Header: Fetch error dismissing notice:", err);
			}
		} else {
			// console.log("Header: Dismiss called but notice wasn't showing or user logged out.");
		}
	}
</script>

<header
	class="fixed z-[100] w-screen transition-transform duration-300 ease-in-out"
	class:bg-black={showHeader && lastScrollY === 0}
	class:bg-white={lastScrollY > 0}
	class:shadow-sm={lastScrollY > 0}
	style="transform: translateY({showHeader ? '0%' : '-100%'});"
>
	<nav class="mx-auto flex max-w-7xl items-center justify-between px-4 py-4 sm:px-6 lg:px-8">
		<div class="flex items-center">
			<a
				href="/"
				class="font-sans text-3xl font-bold {lastScrollY > 0 ? 'text-black' : 'text-white'}"
			>
				Veille
			</a>
		</div>

		<div class="hidden items-center space-x-6 md:flex">
			{#if $userProfileStore}
				<a
					href="/articles"
					class="font-sans text-sm font-medium {lastScrollY > 0
						? 'text-black hover:text-gray-700'
						: 'text-white hover:text-gray-300'} transition-colors duration-200"
				>
					{$i18n.header.articles}
				</a>
				<a
					href="/ma-veille"
					class="rounded-sm px-4 font-sans text-sm font-medium {lastScrollY > 0
						? 'text-black hover:text-gray-700'
						: 'text-white hover:text-gray-300'} transition-colors duration-200"
				>
					{$i18n.header.myVeille}
				</a>
				<a
					href="/favoris"
					class="font-sans text-sm font-medium {lastScrollY > 0
						? 'text-black hover:text-gray-700'
						: 'text-white hover:text-gray-300'} transition-colors duration-200"
				>
					Favoris
				</a>
				<a
					href="/qui-sommes-nous"
					class="font-sans text-sm font-medium {lastScrollY > 0
						? 'text-black hover:text-gray-700'
						: 'text-white hover:text-gray-300'} transition-colors duration-200"
				>
					Qui sommes-nous ?
				</a>
				<a
					href="/comite"
					class="font-sans text-sm font-medium {lastScrollY > 0
						? 'text-black hover:text-gray-700'
						: 'text-white hover:text-gray-300'} transition-colors duration-200"
				>
					Comit√© scientifique
				</a>
				<a
					href="/donations"
					class="font-sans text-sm font-medium {lastScrollY > 0
						? 'text-black hover:text-gray-700'
						: 'text-white hover:text-gray-300'} transition-colors duration-200"
				>
					{$i18n.header.donate}
				</a>
				<div class="account-menu relative">
					<button
						onclick={() => (showAccountMenu = !showAccountMenu)}
						class="flex items-center font-sans text-sm font-medium {lastScrollY > 0
							? 'text-black hover:text-gray-700'
							: 'text-white hover:text-gray-300'} transition-colors duration-200 focus:outline-none"
					>
						{$i18n.header.account}
						<svg class="ml-1 h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
							<path
								stroke-linecap="round"
								stroke-linejoin="round"
								stroke-width="2"
								d="M19 9l-7 7-7-7"
							/>
						</svg>
					</button>
					{#if showAccountMenu}
						<div
							class="animate-fade-in absolute right-0 z-10 mt-2 w-48 rounded-md bg-black py-1 shadow-lg"
						>
							<a href="/account" class="block px-4 py-2 text-sm text-white hover:bg-white/10">
								{$i18n.header.settings}
							</a>
						</div>
					{/if}
					<NewFeatureNotice isVisible={showNotice} on:dismiss={handleDismissNotice} />
				</div>
			{:else}
				<a
					href="/login"
					class="font-sans text-sm font-medium {lastScrollY > 0
						? 'text-black hover:text-gray-700'
						: 'text-white hover:text-gray-300'} transition-colors duration-200"
				>
					{$i18n.header.login}
				</a>
			{/if}
		</div>

		<div class="md:hidden">
			<!-- Mobile Header Area - Ensure buttons are side by side -->
			<div class="flex items-center gap-2">
				<!-- Mobile Notice Trigger Button -->
				{#if showNotice && $userProfileStore && !isLoadingNoticeState}
					<button
						type="button"
						onclick={openMobileNotice}
						class="notice-trigger-button flex h-10 w-10 items-center justify-center rounded-full p-2 text-teal-400 bg-gray-700/50 hover:bg-gray-600 focus:outline-none focus:ring-2 focus:ring-teal-500 focus:ring-offset-1 focus:ring-offset-black animate-pulse"
						aria-label="Afficher la notification de nouvelle fonctionnalit√©"
						title="Nouveaut√©s dans les param√®tres !"
					>
						<span class="text-lg leading-none">üí°</span>
					</button>
				{/if}
				<!-- Burger Button -->
				<button onclick={toggleMobileMenu} class="burger-button p-2">
					<svg
						class="h-6 w-6 {lastScrollY > 0 ? 'text-black' : 'text-white'}"
						fill="none"
						stroke="currentColor"
						viewBox="0 0 24 24"
					>
						<path
							stroke-linecap="round"
							stroke-linejoin="round"
							stroke-width="2"
							d={showMobileMenu ? 'M6 18L18 6M6 6l12 12' : 'M4 6h16M4 12h16M4 18h16'}
						/>
					</svg>
				</button>
			</div>

			{#if showMobileMenu}
				<div
					class="mobile-menu animate-fade-in absolute top-full left-0 z-50 w-full bg-black shadow-lg"
				>
					{#if $userProfileStore}
						<a
							href="/articles"
							onclick={closeMobileMenu}
							class="block px-6 py-3 text-base hover:bg-gray-100"
						>
							{$i18n.header.articles}
						</a>
						<a
							href="/ma-veille"
							onclick={closeMobileMenu}
							class="block px-6 py-3 text-base hover:bg-gray-100"
						>
							{$i18n.header.myVeille}
						</a>
						<a
							href="/favoris"
							onclick={closeMobileMenu}
							class="block px-6 py-3 text-base hover:bg-gray-100"
						>
							Favoris
						</a>
						<a
							href="/qui-sommes-nous"
							onclick={closeMobileMenu}
							class="block px-6 py-3 text-base hover:bg-gray-100"
						>
							Qui sommes-nous ?
						</a>
						<a
							href="/comite"
							onclick={closeMobileMenu}
							class="block px-6 py-3 text-base hover:bg-gray-100"
						>
							Comit√© scientifique
						</a>
						<a
							href="/donations"
							onclick={closeMobileMenu}
							class="block px-6 py-3 text-base hover:bg-gray-100"
						>
							{$i18n.header.donate}
						</a>
						<a
							href="/account"
							onclick={closeMobileMenu}
							class="block px-6 py-3 text-base hover:bg-gray-100"
						>
							{$i18n.header.settings}
						</a>
					{:else}
						<a
							href="/login"
							onclick={closeMobileMenu}
							class="block px-6 py-3 text-base hover:bg-gray-100"
						>
							{$i18n.header.login}
						</a>
					{/if}
				</div>
			{/if}
		</div>
	</nav>
</header>

<MobileFeatureNoticeModal
	isOpen={showMobileNoticeModal}
	on:closeAndDismiss={handleDismissNotice}
/>

<style>
	.animate-fade-in {
		animation: fadeIn 0.2s ease-out;
	}

	@keyframes fadeIn {
		from {
			opacity: 0;
			transform: translateY(-5px);
		}
		to {
			opacity: 1;
			transform: translateY(0);
		}
	}

	/* Ajustements sp√©cifiques pour le style Ledger */
	header.bg-black a,
	header.bg-black button {
		color: white;
	}

	header.bg-white a,
	header.bg-white button {
		color: black;
	}

	header.bg-black {
		background-color: #000000;
		border-bottom: 1px solid #333;
	}

	header.bg-white {
		background-color: #ffffff;
		box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
	}

	.burger-button svg {
		transition: color 0.3s ease;
	}

	.account-menu button svg {
		transition: stroke 0.3s ease;
	}
</style>

--- End of File ---

--- File Path ---
frontend/src/lib/components/auth/LoginForm.svelte

<!-- /lib/components/auth/LoginForm.svelte -->
<script>
	import { i18n } from '$lib/i18n';
  
	export let email = '';
	export let password = '';
	export let errorMessage = '';
	export let successMessage = '';
	export let isLoading = false;
  </script>
  
  <div class="space-y-6">
	<div>
	  <label for="email" class="block text-sm font-medium text-gray-700">{$i18n.login.emailLabel}</label>
	  <input
		id="email"
		name="email"
		type="email"
		bind:value={email}
		class="mt-1 w-full rounded-lg border border-gray-300 px-4 py-2 focus:border-blue-500 focus:ring focus:ring-blue-200 transition-all duration-200"
		placeholder={$i18n.login.emailPlaceholder}
		required
	  />
	</div>
  
	<div>
	  <label for="password" class="block text-sm font-medium text-gray-700">{$i18n.login.passwordLabel}</label>
	  <input
		id="password"
		name="password"
		type="password"
		bind:value={password}
		class="mt-1 w-full rounded-lg border border-gray-300 px-4 py-2 focus:border-blue-500 focus:ring focus:ring-blue-200 transition-all duration-200"
		placeholder={$i18n.login.passwordPlaceholder}
		required
	  />
	</div>
  
	<button
	  type="submit"
	  disabled={isLoading}
	  class="w-full rounded-lg bg-black px-4 py-2 text-white hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 transition-all duration-200 disabled:bg-blue-400 disabled:cursor-not-allowed"
	>
	  {#if isLoading}
		<svg class="animate-spin h-5 w-5 mr-2 inline-block text-white" viewBox="0 0 24 24">
		  <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4" />
		  <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z" />
		</svg>
		{$i18n.login.loggingIn}
	  {:else}
		{$i18n.login.submitLogin}
	  {/if}
	</button>
  </div>
--- End of File ---

--- File Path ---
frontend/src/lib/components/auth/SignUpForm.svelte

<!-- $lib/components/auth/SignUpForm.svelte -->
<script>
	import { createEventDispatcher } from 'svelte';

	export let email = '';
	export let password = '';
	export let errorMessage = '';
	export let isLoading = false;

	let successMessage = '';
	let confirmPassword = '';
	let showPassword = false;

	const dispatch = createEventDispatcher();

	async function handleSubmit(event) {
		event.preventDefault();
		errorMessage = '';
		successMessage = '';

		if (!email || !password || !confirmPassword) {
			errorMessage = 'Veuillez remplir tous les champs.';
			return;
		}
		if (password !== confirmPassword) {
			errorMessage = 'Les mots de passe ne correspondent pas.';
			return;
		}
		if (password.length < 6) {
			errorMessage = 'Le mot de passe doit contenir au moins 6 caract√®res.';
			return;
		}

		isLoading = true;

		try {
			// NOTE: These fields are sent because the original backend might expect them,
			// even if the simplified action doesn't use them directly for validation.
			const firstName = email.split('@')[0] || '';
			const lastName = '';
			const dateOfBirth = '';

			const formData = new FormData();
			formData.append('first_name', firstName);
			formData.append('last_name', lastName);
			formData.append('email', email);
			formData.append('password', password);
			formData.append('date_of_birth', dateOfBirth);

			// No disciplines or frequency sent from this simplified form

			const response = await fetch('/signup', { // Assumes this component lives on a page with this action
				method: 'POST',
				body: formData
			});

			// Attempt to parse error JSON only if response is not ok and looks like JSON
			if (!response.ok && response.headers.get('content-type')?.includes('application/json')) {
				const result = await response.json();
				errorMessage = result.error || `Erreur ${response.status}`; // Use error from JSON or generic
			} else if (!response.ok) {
                 errorMessage = `Erreur lors de l'inscription (${response.status})`;
            } else {
				// Success: Assume backend handled user/profile creation & session
                isLoading = false;
                successMessage = 'Compte cr√©√© avec succ√®s ! Vous allez √™tre redirig√©...';
				dispatch('signupSuccess');

				setTimeout(() => {
					// Redirect target depends on whether backend auto-logs in
					// If Supabase email confirmation is ON, user might not be logged in yet.
					// Adjust target (/account, /login, /ma-veille) as needed based on backend behavior.
					window.location.href = '/ma-veille';
				}, 2500);
				return;
			}
		} catch (error) {
			errorMessage = 'Erreur de connexion lors de l‚Äôinscription.';
			console.error("Signup Fetch Error:", error); // Keep one log for debugging network errors
		} finally {
            if (!successMessage) {
			    isLoading = false;
            }
		}
	}

	function togglePasswordVisibility() {
		showPassword = !showPassword;
	}
</script>

{#if successMessage}
	<div class="rounded-md bg-green-50 p-4 text-center">
		<div class="flex flex-col items-center">
			<svg class="h-12 w-12 text-green-400 mb-3" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor">
				<path stroke-linecap="round" stroke-linejoin="round" d="M9 12.75 11.25 15 15 9.75M21 12a9 9 0 1 1-18 0 9 9 0 0 1 18 0Z" />
			</svg>
			<p class="text-lg font-medium text-green-800">{successMessage}</p>
		</div>
	</div>
{:else}
	<form on:submit={handleSubmit} class="space-y-4">
		<div>
			<label for="email" class="block text-sm font-medium text-gray-700">Email</label>
			<input
				id="email"
				name="email"
				type="email"
				bind:value={email}
				disabled={isLoading}
				class="mt-1 w-full rounded-lg border border-gray-300 bg-blue-50 px-4 py-2 transition-all duration-200 focus:border-blue-500 focus:ring focus:ring-blue-200 disabled:cursor-not-allowed disabled:opacity-50"
				placeholder="votre.email@example.com"
				required
			/>
		</div>

		<div>
			<label for="password" class="block text-sm font-medium text-gray-700">Mot de passe</label>
			<div class="relative mt-1">
				<input
					id="password"
					name="password"
					type={showPassword ? 'text' : 'password'}
					bind:value={password}
					disabled={isLoading}
					class="w-full rounded-lg border border-gray-300 bg-blue-50 px-4 py-2 pr-10 transition-all duration-200 focus:border-blue-500 focus:ring focus:ring-blue-200 disabled:cursor-not-allowed disabled:opacity-50"
					placeholder="‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢"
					required
					minlength="6"
				/>
				<button
					type="button"
					on:click={togglePasswordVisibility}
					class="absolute inset-y-0 right-0 flex items-center px-3 text-gray-500 hover:text-gray-700 focus:outline-none"
					aria-label={showPassword ? 'Masquer le mot de passe' : 'Afficher le mot de passe'}
					disabled={isLoading}
				>
					{#if showPassword}
						<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="h-5 w-5"><path stroke-linecap="round" stroke-linejoin="round" d="M3.98 8.223A10.477 10.477 0 0 0 1.934 12C3.226 16.338 7.244 19.5 12 19.5c.993 0 1.953-.138 2.863-.395M6.228 6.228A10.451 10.451 0 0 1 12 4.5c4.756 0 8.773 3.162 10.065 7.498a10.522 10.522 0 0 1-4.293 5.774M6.228 6.228 3 3m3.228 3.228 3.65 3.65m7.894 7.894L21 21m-3.228-3.228-3.65-3.65m0 0a3 3 0 1 0-4.243-4.243m4.242 4.242L6.228 6.228" /></svg>
					{:else}
						<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="h-5 w-5"><path stroke-linecap="round" stroke-linejoin="round" d="M2.036 12.322a1.012 1.012 0 0 1 0-.639C3.423 7.51 7.36 4.5 12 4.5c4.638 0 8.573 3.007 9.963 7.178.07.207.07.431 0 .639C20.577 16.49 16.64 19.5 12 19.5c-4.638 0-8.573-3.007-9.963-7.178Z" /><path stroke-linecap="round" stroke-linejoin="round" d="M15 12a3 3 0 1 1-6 0 3 3 0 0 1 6 0Z" /></svg>
					{/if}
				</button>
			</div>
		</div>

		<div>
			<label for="confirmPassword" class="block text-sm font-medium text-gray-700">Confirmer le mot de passe</label>
			<div class="relative mt-1">
				<input
					id="confirmPassword"
					name="confirmPassword"
					type={showPassword ? 'text' : 'password'}
					bind:value={confirmPassword}
					disabled={isLoading}
					class="w-full rounded-lg border border-gray-300 bg-blue-50 px-4 py-2 pr-10 transition-all duration-200 focus:border-blue-500 focus:ring focus:ring-blue-200 disabled:cursor-not-allowed disabled:opacity-50"
					placeholder="‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢"
					required
					minlength="6"
				/>
			</div>
		</div>

		{#if errorMessage}
			<p class="text-sm text-red-600 pt-2">{errorMessage}</p>
		{/if}

		<div class="pt-2">
			<button
				type="submit"
				disabled={isLoading}
				class="w-full rounded-lg bg-black px-4 py-2 text-white transition-all duration-200 hover:bg-blue-700 focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 disabled:cursor-not-allowed disabled:bg-gray-400"
			>
				{#if isLoading}
					<svg class="mr-2 inline-block h-5 w-5 animate-spin text-white" viewBox="0 0 24 24"><circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle><path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path></svg>
					Inscription en cours...
				{:else}
					S‚Äôinscrire
				{/if}
			</button>
		</div>
	</form>
{/if}

<style>
	.relative input:focus + button {
		z-index: 10; /* Ensure visibility button is clickable when input is focused */
	}
</style>
--- End of File ---

--- File Path ---
frontend/src/lib/components/auth/MessageDisplay.svelte

<!-- /components/auth/MessageDisplay.svelte -->
<script>
    export let errorMessage = '';
    export let successMessage = '';
  </script>
  
  {#if errorMessage}
    <div class="rounded-lg bg-red-50 p-4 text-red-700 animate-fade-in">
      <span class="font-semibold">Erreur :</span> {errorMessage}
    </div>
  {/if}
  
  {#if successMessage}
    <div class="rounded-lg bg-green-50 p-4 text-green-700 animate-fade-in">
      <span class="font-semibold">Succ√®s :</span> {successMessage}
    </div>
  {/if}
  
  <style>
    .animate-fade-in {
      animation: fadeIn 0.3s ease-out;
    }
  
    @keyframes fadeIn {
      from {
        opacity: 0;
        transform: translateY(-10px);
      }
      to {
        opacity: 1;
        transform: translateY(0);
      }
    }
  </style>
--- End of File ---

--- File Path ---
frontend/src/lib/components/articles/ArticleListDisplay.svelte

<!-- src/lib/components/articles/ArticleListDisplay.svelte -->
<script lang="ts">
	import type { Article } from '$lib/utils/articleUtils';
	import { getArticleId } from '$lib/utils/articleUtils';
	import { createEventDispatcher } from 'svelte';
	import ArticleCard from './ArticleCard.svelte';

	// Define ListTitleInfo directly here or import if it becomes shared
    interface ListTitleInfo {
        text: string;
        iconType: 'heart' | 'book' | null;
    }

	const {
		articleOfTheDay = null as Article | null,
		articles = [] as Article[],
		isInitialLoading = true,
		fetchError = null as string | null, // Error specific to loading this list section
		userId = null as string | null, // For "login to see liked" message
		isLikedArticlesView = false, // For "login to see liked" message
		emptyStateMessage = null as string | null,
		filterForTitle = 'la s√©lection',
		isViewingSubDiscipline = false,
		selectedSubDiscipline = null as string | null, // For empty state message
        searchActive = false, // For empty state message
		searchQuery = '', // For empty state message
		isLoading = false, // For load more button state / spinner
		hasMore = true,
		loadMoreButtonText = "Charger plus d'articles",
		allArticlesLoadedText = "Tous les articles ont √©t√© charg√©s",
        mainArticleListTitleInfo = { text: 'Articles', iconType: 'book' } as ListTitleInfo,
        ALL_CATEGORIES_VALUE = "__ALL__", // From parent, for AOTD title logic
        isSubscribed = false // New prop for subscription status
	} = $props<{
		articleOfTheDay?: Article | null;
		articles?: Article[];
		isInitialLoading?: boolean;
		fetchError?: string | null;
		userId?: string | null;
		isLikedArticlesView?: boolean;
		emptyStateMessage?: string | null;
		filterForTitle?: string;
		isViewingSubDiscipline?: boolean;
		selectedSubDiscipline?: string | null;
        searchActive?: boolean;
		searchQuery?: string;
		isLoading?: boolean;
		hasMore?: boolean;
		loadMoreButtonText?: string;
		allArticlesLoadedText?: string;
        mainArticleListTitleInfo?: ListTitleInfo;
        ALL_CATEGORIES_VALUE?: string;
        isSubscribed?: boolean;
	}>();

	const dispatch = createEventDispatcher<{
		openArticle: Article;
		likeToggle: { articleId: number | string; currentlyLiked: boolean; currentLikeCount: number };
		toggleRead: Article;
		thumbsUpToggle: { articleId: number | string; currentlyThumbedUp: boolean; currentThumbsUpCount: number };
		loadMore: void;
		handleSignup: void; // For the "connectez-vous" button
	}>();

	function openImmersive(event: CustomEvent<Article>) {
		dispatch('openArticle', event.detail);
	}
	function handleLikeToggle(event: CustomEvent<{ articleId: number | string; currentlyLiked: boolean; currentLikeCount: number }>) {
		dispatch('likeToggle', event.detail);
	}
	function handleToggleRead(event: CustomEvent<Article>) {
		dispatch('toggleRead', event.detail);
	}
	function handleThumbsUpToggle(event: CustomEvent<{ articleId: number | string; currentlyThumbedUp: boolean; currentThumbsUpCount: number }>) {
		dispatch('thumbsUpToggle', event.detail);
	}
	function onLoadMoreClick() {
		dispatch('loadMore');
	}
	function onHandleSignupClick() {
		dispatch('handleSignup');
	}

    // Derive selectedFilter from filterForTitle for AOTD title conditional
    // This is a simplification; in practice, ArticleListView passes `selectedFilter` if needed for more complex logic here.
    // For now, we'll use filterForTitle and isViewingSubDiscipline for the AOTD title.
    const aotdTitleForFilter = $derived(filterForTitle === 'toutes les cat√©gories' ? '' : filterForTitle);

</script>

{#if isInitialLoading}
	<div class="flex justify-center items-center py-20" aria-live="polite" aria-busy="true"><div class="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-teal-500"></div></div>
{:else if fetchError && articles.length === 0 && !articleOfTheDay}
	<!-- This specific error message was for initial load errors that prevented any display -->
	<div class="my-10 p-4 rounded-lg bg-red-900/30 border border-red-700 text-red-300 text-center" role="alert"><p><strong>Erreur chargement initial :</strong> {fetchError}</p><p class="mt-2 text-sm">Veuillez r√©essayer.</p></div>
{:else if !userId && isLikedArticlesView}
	<div class="my-10 p-4 rounded-lg bg-gray-800/50 border border-gray-700 text-gray-400 text-center"><p>Connectez-vous pour voir vos favoris.</p><button on:click={onHandleSignupClick} class="mt-4 rounded-lg bg-teal-600 px-5 py-2.5 text-sm font-semibold text-white hover:bg-teal-700">Se connecter</button></div>
{:else if !articleOfTheDay && articles.length === 0 && !isLoading}
	<div class="my-10 p-4 rounded-lg bg-gray-800/50 border border-gray-700 text-gray-400 text-center">
		{#if emptyStateMessage}<p>{@html emptyStateMessage}</p>
		{:else}
			<p>{#if searchActive}Aucun article pour "{filterForTitle}"{#if isViewingSubDiscipline} dans "{selectedSubDiscipline}"{/if} avec "{searchQuery}".{:else}Aucun article pour "{filterForTitle}"{#if isViewingSubDiscipline} dans "{selectedSubDiscipline}"{/if}.{/if}</p>
			{#if isViewingSubDiscipline && !articleOfTheDay && !isLoading}<p class="mt-3 text-sm text-gray-500 italic">(Aucun article du jour sp√©cifique √† cette sous-sp√©cialit√©.)</p>{/if}
			<p class="mt-2 text-sm">{#if searchActive}Essayez de modifier recherche/filtres.{:else}Revenez plus tard ou autre filtre.{/if}</p>
		{/if}
	</div>
{:else}
	{#if articleOfTheDay}
		<div class="mb-8">
            <!-- Simplified AOTD title. Parent `ArticleListView` could pass a more specific `aotdTitle` prop if complex logic is needed -->
			<h2 class="text-2xl font-bold text-teal-500">üî• Article du jour {#if isViewingSubDiscipline && selectedSubDiscipline}{selectedSubDiscipline}{:else if aotdTitleForFilter}{aotdTitleForFilter}{/if}</h2>
			<ul class="mt-4 space-y-4"><ArticleCard article={articleOfTheDay} {isSubscribed} on:open={openImmersive} on:likeToggle={handleLikeToggle} on:toggleRead={handleToggleRead} on:thumbsUpToggle={handleThumbsUpToggle}/></ul>
		</div>
	{:else if isViewingSubDiscipline && !isLoading && articles.length > 0} <!-- Show this only if there are previous articles -->
		 <p class="mb-6 text-sm text-gray-500 italic">Aucun article du jour pour "{selectedSubDiscipline}". Voici les articles pr√©c√©dents :</p>
	{/if}

	<div class="mb-6">
		{#if articles.length > 0}
			<h2 class="text-2xl font-bold text-white flex items-center gap-2">
				{#if mainArticleListTitleInfo.iconType == 'heart'}
					<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6 fill-pink-500 text-pink-500"> <path stroke-linecap="round" stroke-linejoin="round" d="M21 8.25c0-2.485-2.099-4.5-4.688-4.5-1.935 0-3.597 1.126-4.312 2.733-.715-1.607-2.377-2.733-4.313-2.733C5.1 3.75 3 5.765 3 8.25c0 7.22 9 12 9 12s9-4.78 9-12Z" /> </svg>
				{:else if mainArticleListTitleInfo.iconType == 'book'}
					üìñ
				{/if}
				{mainArticleListTitleInfo.text}
			</h2>
			<ul class="mt-4 space-y-4">
				 {#each articles as article (getArticleId(article))}
					<ArticleCard {article} {isSubscribed} on:open={openImmersive} on:likeToggle={handleLikeToggle} on:toggleRead={handleToggleRead} on:thumbsUpToggle={handleThumbsUpToggle}/>
				 {/each}
			</ul>
		{/if}
	</div>

	{#if hasMore || isLoading}
		<div class="mt-8 text-center">
			{#if isLoading && !isInitialLoading}<div class="flex justify-center items-center py-4"><div class="animate-spin rounded-full h-8 w-8 border-t-2 border-b-2 border-teal-500"></div></div>
			{:else if hasMore}<button on:click={onLoadMoreClick} disabled={isLoading} class="rounded-lg bg-teal-600 px-5 py-2.5 text-sm font-semibold text-white hover:bg-teal-700 disabled:opacity-50 disabled:cursor-not-allowed">{loadMoreButtonText}</button>{/if}
		</div>
	{:else if !isInitialLoading && (articles.length > 0 || articleOfTheDay)} <!-- Show "all loaded" only if some articles were ever loaded -->
		<div class="mt-8 text-center text-gray-500"><span class="inline-flex items-center gap-2 rounded-full bg-gray-800 px-4 py-2 text-sm"><svg class="h-5 w-5 text-green-500" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"/></svg>{allArticlesLoadedText}</span></div>
	{/if}
{/if}
--- End of File ---

--- File Path ---
frontend/src/lib/components/articles/ArticleListView.svelte

<!-- src/lib/components/articles/ArticleListView.svelte -->
<script lang="ts">
	import { goto } from '$app/navigation';
	import SubscriptionRequired from '$lib/components/SubscriptionRequired.svelte';
	import ConfirmationModal from '$lib/components/ui/ConfirmationModal.svelte';
	import userProfileStore from '$lib/stores/user';
	import type { Article } from '$lib/utils/articleUtils';
	import { getArticleId } from '$lib/utils/articleUtils';
	import { debounce } from '$lib/utils/debounce';
	import { tick } from 'svelte';
	import ArticleImmersiveModal from './ArticleImmersiveModal.svelte';
	import ArticleListDisplay from './ArticleListDisplay.svelte';
	import ArticleListHeader from './ArticleListHeader.svelte';

    const ALL_CATEGORIES_VALUE = "__ALL__";
    const ALL_CATEGORIES_LABEL = "Toutes les cat√©gories";

	interface FilterOption { value: string; label: string; }
    interface SubDisciplineOption { id: number; name: string; }

	const {
        articleId = 0,
        articleTitle = "",
		pageTitle = 'Articles',
		filters = [] as FilterOption[],
		initialFilterValue = null,
		initialSubFilterValue = null,
		filterSelectLabel = 'Filtrer par',
		showSignupPromptProp = false,
        enableSearch = false,
        searchDebounceMs = 300,
        searchPlaceholder = "Rechercher par mots-cl√©s...",
		apiEndpoint = '/api/get_articles_my_veille',
		apiFilterParamName = 'specialty',
		userId: propUserId = null as string | null,
		loadMoreButtonText = "Charger plus d'articles",
		allArticlesLoadedText = "Tous les articles ont √©t√© charg√©s",
        emptyStateMessage = null as string | null,
        itemsPerPage = 10,
        subDisciplineSelectLabel = "Affiner par sous-sp√©cialit√©",
        showAllSubDisciplinesOption = true,
        allSubDisciplinesLabel = "Toutes les sous-sp√©cialit√©s",
        showAllCategoriesOption = true,
        subDisciplineFetchMode = 'user' as 'user' | 'public',
        filterByUserSubs = false,
        isSubscribed = false
	} = $props<{
        articleId?: number;
        articleTitle?: string;
		pageTitle?: string;
		filters?: FilterOption[];
		initialFilterValue?: string | null;
		initialSubFilterValue?: string | null;
		filterSelectLabel?: string;
		showSignupPromptProp?: boolean;
        enableSearch?: boolean;
        searchDebounceMs?: number;
        searchPlaceholder?: string;
		apiEndpoint?: string;
		apiFilterParamName?: string;
		userId?: string | null;
		loadMoreButtonText?: string;
		allArticlesLoadedText?: string;
        emptyStateMessage?: string | null;
        itemsPerPage?: number;
        subDisciplineSelectLabel?: string;
        showAllSubDisciplinesOption?: boolean;
        allSubDisciplinesLabel?: string;
        showAllCategoriesOption?: boolean;
        subDisciplineFetchMode?: 'user' | 'public';
        filterByUserSubs?: boolean;
        isSubscribed?: boolean;
	}>();

    const defaultInitialFilter = filters.length > 0 ? (filters[0]?.value ?? null) : (showAllCategoriesOption ? ALL_CATEGORIES_VALUE : null);

	    let selectedFilter = $state<string | null>(initialFilterValue ?? defaultInitialFilter);
    let selectedSubDiscipline = $state<string | null>(null);
    let availableSubDisciplines = $state<SubDisciplineOption[]>([]);
    let isLoadingSubDisciplines = $state(false);
	let articles = $state<Article[]>([]);
	let articleOfTheDay = $state<Article | null>(null);
	let isLoading = $state(false);
    let isInitialLoading = $state(true);
	let hasMore = $state(true);
	let offset = $state(0);
	let immersiveArticle = $state<Article | null>(null);
	let searchQuery = $state('');
    let fetchError = $state<string | null>(null);
    let showSignupPrompt = $state(false);
    let showUnlikeConfirmModal = $state(false);
    let showSubscriptionRequired = $state(false);
    let articleToUnlike = $state<{ articleId: number | string; currentlyLiked: boolean; currentLikeCount: number; } | null>(null);
    let hasInitialized = $state(false);
    let initialSearchSet = $state(false);

	const filterForTitle = $derived(
        selectedFilter === ALL_CATEGORIES_VALUE
            ? 'toutes les cat√©gories'
            : (filters.find((f: FilterOption) => f.value === selectedFilter)?.label ?? 'la s√©lection')
    );
    const searchActive = $derived(enableSearch && searchQuery.trim().length > 0);
    const showSubDisciplineFilter = $derived(
        (availableSubDisciplines.length > 0 || isLoadingSubDisciplines) &&
        selectedFilter !== ALL_CATEGORIES_VALUE &&
        selectedFilter !== null
    );
    const isViewingSubDiscipline = $derived(selectedSubDiscipline !== null && selectedSubDiscipline !== allSubDisciplinesLabel);
    const isLikedArticlesView = $derived(apiEndpoint === '/api/get-liked-articles');
	const currentUserIdFromStore = $derived($userProfileStore?.id ?? null);

    interface ListTitleInfo { text: string; iconType: 'heart' | 'book' | null; }
    let mainArticleListTitleInfo: ListTitleInfo = $state({ text: '', iconType: null });

    $effect(() => {
        if (articleOfTheDay) {
            if (isLikedArticlesView) {
                let titleText = "Favoris";
                if (selectedFilter !== ALL_CATEGORIES_VALUE && selectedFilter) { titleText += `: ${filterForTitle}`; }
                if (isViewingSubDiscipline) { titleText += ` - ${selectedSubDiscipline}`; }
                mainArticleListTitleInfo = { text: titleText, iconType: 'heart' };
            } else if (searchActive) {
                mainArticleListTitleInfo = { text: "R√©sultats de recherche", iconType: 'book' };
            } else if (isViewingSubDiscipline) {
                mainArticleListTitleInfo = { text: `Articles pour ${selectedSubDiscipline}`, iconType: 'book' };
            } else {
                mainArticleListTitleInfo = { text: `Articles pr√©c√©dents`, iconType: 'book' };
            }
        } else {
             if (isLikedArticlesView) {
                 let titleText = "Favoris";
                 if (selectedFilter !== ALL_CATEGORIES_VALUE && selectedFilter) { titleText += `: ${filterForTitle}`; }
                 if (isViewingSubDiscipline) { titleText += ` - ${selectedSubDiscipline}`; }
                 mainArticleListTitleInfo = { text: titleText, iconType: 'heart' };
             } else if (searchActive) {
                 mainArticleListTitleInfo = { text: "R√©sultats de recherche", iconType: 'book' };
             } else if (isViewingSubDiscipline) {
                 mainArticleListTitleInfo = { text: `Articles pour ${selectedSubDiscipline}`, iconType: 'book' };
             } else {
                 mainArticleListTitleInfo = { text: `Articles pour ${filterForTitle}`, iconType: 'book' };
             }
        }
    });

    $effect(() => {
        const currentMainFilter = selectedFilter;
        
        // Don't reset subdiscipline if we're on the initial filter and have an initial subdiscipline value
        const shouldKeepInitialSubdiscipline = currentMainFilter === initialFilterValue && 
                                               initialSubFilterValue && 
                                               selectedSubDiscipline === initialSubFilterValue;
        
        if (!shouldKeepInitialSubdiscipline) {
            selectedSubDiscipline = null;
        }
        availableSubDisciplines = [];

        if (!currentMainFilter || currentMainFilter === ALL_CATEGORIES_VALUE) {
             isLoadingSubDisciplines = false;
             return;
        }
        isLoadingSubDisciplines = true;
        const apiUrl = `/api/get_sub_disciplines?disciplineName=${encodeURIComponent(currentMainFilter)}&mode=${subDisciplineFetchMode}`;
        fetch(apiUrl)
            .then(async (res) => { if (!res.ok) { const errorText = await res.text().catch(() => `HTTP error ${res.status}`); throw new Error(`Erreur r√©seau ${res.status}: ${errorText}`); } return res.json();})
            .then((data: SubDisciplineOption[]) => {
                 availableSubDisciplines = data || [];
                 // Only set initial subdiscipline if it wasn't already set and it exists in the fetched data
                 if (initialSubFilterValue && 
                     data.some(sub => sub.name === initialSubFilterValue) && 
                     selectedFilter === initialFilterValue &&
                     selectedSubDiscipline !== initialSubFilterValue) {
                     selectedSubDiscipline = initialSubFilterValue;
                 }
            })
            .catch(error => { console.error("Error fetching sub-disciplines:", error); availableSubDisciplines = []; fetchError = `Erreur chargement sous-sp√©cialit√©s.`; })
            .finally(() => { isLoadingSubDisciplines = false; });
    });

    const debouncedFetchArticles = debounce(fetchArticles, searchDebounceMs);

    // Initialize search query with articleTitle if provided - handle both SSR and client scenarios
    $effect(() => {
        // Set initial search query immediately if we have articleTitle, regardless of user store
        if (!initialSearchSet && articleId && articleTitle) {
            searchQuery = articleTitle;
            initialSearchSet = true;
        }
        
        // Set initial subdiscipline if provided, to avoid second fetch
        if (!hasInitialized && initialSubFilterValue && selectedFilter === initialFilterValue) {
            selectedSubDiscipline = initialSubFilterValue;
        }
        
        // Mark as initialized when user store is available
        if (!hasInitialized && currentUserIdFromStore) {
            hasInitialized = true;
        }
    });

	$effect(() => {
        // Skip if not initialized yet to avoid multiple calls
        if (!hasInitialized) {
            return;
        }
        
        const _filter = selectedFilter;
        const _subFilter = selectedSubDiscipline;
        const _search = searchQuery;
        const _userId = currentUserIdFromStore;

        if (!_userId) { 
            return; 
        }
        if (apiEndpoint === '/api/get-liked-articles' && !_userId) {
            if (!isInitialLoading) { articles = []; articleOfTheDay = null; hasMore = false; }
            return;
        }
        if (_filter === null && filters.length > 0 && !showAllCategoriesOption) {
             if (!isInitialLoading) { articles = []; articleOfTheDay = null; hasMore = false;}
            return;
        }
        isInitialLoading = true; articles = []; articleOfTheDay = null; offset = 0; hasMore = true; fetchError = null;
        debouncedFetchArticles(false);
	});

    function processFetchedArticlesForAotD(newlyFetchedArticles: Article[], isSearchCurrentlyActive: boolean, isLikedArticlesPage: boolean): { aotd: Article | null; regularArticles: Article[] } {
        let potentialAotd: Article | null = null;
        let remainingArticles = [...newlyFetchedArticles];
        const isAotdContext = !isSearchCurrentlyActive && !isLikedArticlesPage;
        if (isAotdContext && newlyFetchedArticles.length > 0) {
            const firstArticle = newlyFetchedArticles[0];
            if (firstArticle?.is_article_of_the_day === true) {
                potentialAotd = firstArticle;
                remainingArticles = newlyFetchedArticles.slice(1);
            }
        }
        return { aotd: potentialAotd, regularArticles: remainingArticles };
    }

    function fetchArticles(isLoadMore = false) {
        const currentFilter = selectedFilter;
        const currentSubFilter = (currentFilter && currentFilter !== ALL_CATEGORIES_VALUE) ? selectedSubDiscipline : null;
        const currentSearch = searchQuery;
        const currentOffset = isLoadMore ? offset : 0;
        const userIdForFetch = currentUserIdFromStore;

        if (apiEndpoint === '/api/get-liked-articles' && !userIdForFetch) {
            if (!isLoadMore) { articles = []; articleOfTheDay = null; hasMore = false; isLoading = false; isInitialLoading = false; }
            return;
        }
         if (currentFilter === null && filters.length > 0 && !showAllCategoriesOption) {
            if (!isLoadMore) { articles = []; articleOfTheDay = null; hasMore = false; isLoading = false; isInitialLoading = false; }
            return;
        }

        isLoading = true;
        if (!isLoadMore) { fetchError = null; }

		const url = new URL(apiEndpoint, window.location.origin);
		url.searchParams.set('offset', currentOffset.toString());
		url.searchParams.set('limit', itemsPerPage.toString());
        if (currentFilter && currentFilter !== ALL_CATEGORIES_VALUE) {
		    url.searchParams.set(apiFilterParamName, currentFilter);
            if (currentSubFilter && currentSubFilter !== allSubDisciplinesLabel) {
                 url.searchParams.set('subDiscipline', currentSubFilter);
            }
        }
        if (enableSearch && currentSearch.trim()) {
            url.searchParams.set('search', currentSearch.trim());
        }
        if (filterByUserSubs) {
            url.searchParams.set('filterByUserSubs', filterByUserSubs.toString());
        }
        if (apiEndpoint === '/api/get-liked-articles' && userIdForFetch) {
            url.searchParams.set('userId', userIdForFetch);
        }

		fetch(url.toString())
			.then(async (res) => {  if (!res.ok) { const errorText = await res.text(); throw new Error(`Erreur r√©seau ${res.status}: ${errorText || res.statusText}`);} return res.json(); })
			.then((data) => {
                if (data && Array.isArray(data.data)) {
                    const fetchedArticles: Article[] = data.data.map((item: any) => ({
                        ...item, id: item.article_id, is_article_of_the_day: item.is_article_of_the_day
                    }));

                    if (isLoadMore) {
                        articles = [...articles, ...fetchedArticles];
                    } else {
                        const { aotd, regularArticles } = processFetchedArticlesForAotD(
                            fetchedArticles,
                            searchActive,
                            isLikedArticlesView
                        );
                        articleOfTheDay = aotd;
                        articles = regularArticles;
                    }
                    offset = currentOffset + fetchedArticles.length;
                    hasMore = fetchedArticles.length >= itemsPerPage;
				} else {
                    console.warn('API response format unexpected:', data); throw new Error("Format de r√©ponse invalide");
				}
            })
			.catch((error) => {  console.error('Error fetching articles:', error); fetchError = error.message || "Erreur chargement articles."; if (!isLoadMore) { articles = []; articleOfTheDay = null; } hasMore = false; })
			.finally(() => { isLoading = false; if (!isLoadMore) { isInitialLoading = false; } });
    }

    function loadMore() { if (!isLoading && hasMore) { fetchArticles(true); } }

    function openImmersive(clickedArticle: Article) {
        if (!isSubscribed) {
            showSubscriptionRequired = true;
            return;
        }
        const articleIdToUpdate = getArticleId(clickedArticle);
        markArticleAsReadUI(articleIdToUpdate);
        immersiveArticle = getArticleFromState(articleIdToUpdate) ?? clickedArticle;
        markArticleAsReadAPI(articleIdToUpdate, currentUserIdFromStore);
		document.body.classList.add('overflow-hidden');
	}
	function closeImmersive() { immersiveArticle = null; document.body.classList.remove('overflow-hidden');}
    function markArticleAsReadUI(articleId: string | number) { performOptimisticArticleUpdate(articleId, { is_read: true }); }
    function markArticleAsReadAPI(articleId: string | number, userIdToUse: string | null | undefined) {
         if (userIdToUse && typeof articleId === 'number' && !isNaN(articleId)) {
             fetch('/api/mark-article-read', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ articleId: articleId }), })
             .then(async (response) => { if (!response.ok) { const errorData = await response.json().catch(() => ({})); console.error(`API fail mark read ${articleId}:`, response.status, errorData.message);}})
             .catch((error) => { console.error(`Network error mark read ${articleId}:`, error); });
        }
    }
    function getArticleFromState(articleId: string | number): Article | null {
        if (articleOfTheDay && getArticleId(articleOfTheDay) === articleId) return articleOfTheDay;
        return articles.find(a => getArticleId(a) === articleId) || null;
    }

    $effect(() => {
        if (showSignupPromptProp && !currentUserIdFromStore) {
            const timer = setTimeout(() => { showSignupPrompt = true; }, 3000);
            return () => clearTimeout(timer);
        } else { showSignupPrompt = false; }
    });
	function handleSignup() { goto('/signup'); }

    function onSubDisciplineChangedByHeader(_newValue: string | null) {
        searchQuery = '';
    }

    let initialFilterSetForSearchClear = false;
    $effect(() => {
        const currentFilterValue = selectedFilter;
        
        // Only clear search if this isn't the initial load and we don't have a specific article to search for
        if (initialFilterSetForSearchClear && !articleId && !initialSearchSet) {
             searchQuery = '';
        }
        initialFilterSetForSearchClear = true;

		// This is to re-apply the initialSubFilterValue if the main filter changes back to initialFilterValue
        // and initialSubFilterValue was indeed set.
		if (currentFilterValue === initialFilterValue && initialSubFilterValue && availableSubDisciplines.some(sub => sub.name === initialSubFilterValue)) {
			if (selectedSubDiscipline !== initialSubFilterValue) {
				selectedSubDiscipline = initialSubFilterValue;
			}
		}
    });

    function performOptimisticArticleUpdate(
        articleIdToUpdate: number | string,
        updates: Partial<Pick<Article, 'is_liked' | 'like_count' | 'is_thumbed_up' | 'thumbs_up_count' | 'is_read'>>
    ) {
        const updateLogic = (article: Article): Article => (getArticleId(article) === articleIdToUpdate) ? { ...article, ...updates } : article;
        if (articleOfTheDay && getArticleId(articleOfTheDay) === articleIdToUpdate) articleOfTheDay = updateLogic(articleOfTheDay);
        articles = articles.map(updateLogic);
    }
    function handleLikeToggle(eventDetail: { articleId: number | string; currentlyLiked: boolean; currentLikeCount: number; }) {
		const { articleId, currentlyLiked, currentLikeCount } = eventDetail;
		if (!currentUserIdFromStore) return;
		if (isLikedArticlesView && currentlyLiked) { articleToUnlike = { articleId, currentlyLiked, currentLikeCount }; showUnlikeConfirmModal = true; return; }
		const newStateIsLiked = !currentlyLiked; const newLikeCount = currentlyLiked ? Math.max(0, currentLikeCount - 1) : currentLikeCount + 1;
		performOptimisticLikeUpdate(articleId, newStateIsLiked, newLikeCount); triggerLikeApiCall(articleId, currentlyLiked, currentLikeCount);
        if (isLikedArticlesView && !newStateIsLiked) removeArticleFromUI(articleId);
	}
    function handleThumbsUpToggle(eventDetail: { articleId: number | string; currentlyThumbedUp: boolean; currentThumbsUpCount: number; }) {
        const { articleId, currentlyThumbedUp, currentThumbsUpCount } = eventDetail;
        if (!currentUserIdFromStore) return;
        const newStateIsThumbedUp = !currentlyThumbedUp; const newThumbsUpCount = currentlyThumbedUp ? Math.max(0, currentThumbsUpCount - 1) : currentThumbsUpCount + 1;
        performOptimisticThumbsUpUpdate(articleId, newStateIsThumbedUp, newThumbsUpCount);
        triggerThumbsUpApiCall(articleId, currentlyThumbedUp, currentThumbsUpCount);
    }
    function performOptimisticThumbsUpUpdate(articleId: number | string, newStateIsThumbedUp: boolean, newThumbsUpCount: number) {
        performOptimisticArticleUpdate(articleId, { is_thumbed_up: newStateIsThumbedUp, thumbs_up_count: newThumbsUpCount });
    }
    function triggerThumbsUpApiCall(articleIdNum: number | string, originalIsThumbedUp: boolean, originalThumbsUpCount: number) {
        if (typeof articleIdNum !== 'number' || isNaN(articleIdNum)) return;
        const revert = () => performOptimisticThumbsUpUpdate(articleIdNum, originalIsThumbedUp, originalThumbsUpCount);
        fetch('/api/toggle-article-thumbs-up', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ articleId: articleIdNum }), })
        .then(async (res) => { const data = await res.json().catch(() => ({})); if (!res.ok) { console.error(`API err thumbsup ${articleIdNum}:`, res.status, data.message); revert(); } else { const optimState = getArticleFromState(articleIdNum); if (optimState && optimState.is_thumbed_up !== data.thumbed_up) revert(); }})
        .catch((err) => { console.error(`Net err thumbsup ${articleIdNum}:`, err); revert(); });
    }
	function handleConfirmUnlike() {
		if (!articleToUnlike) return; const { articleId, currentlyLiked, currentLikeCount } = articleToUnlike;
		performOptimisticLikeUpdate(articleId, false, Math.max(0, currentLikeCount - 1));
		triggerLikeApiCall(articleId, currentlyLiked, currentLikeCount);
        removeArticleFromUI(articleId);
		showUnlikeConfirmModal = false; articleToUnlike = null;
	}
	function handleCancelUnlike() { showUnlikeConfirmModal = false; articleToUnlike = null; }
    function removeArticleFromUI(articleIdToRemove: number | string) {
        if (articleOfTheDay && getArticleId(articleOfTheDay) === articleIdToRemove) articleOfTheDay = null;
        articles = articles.filter(a => getArticleId(a) !== articleIdToRemove);
    }
	function performOptimisticLikeUpdate(articleId: number | string, newStateIsLiked: boolean, newLikeCount: number) {
        performOptimisticArticleUpdate(articleId, { is_liked: newStateIsLiked, like_count: newLikeCount });
	}
	function triggerLikeApiCall(articleIdNum: number | string, originalIsLiked: boolean, originalLikeCount: number) {
		if (typeof articleIdNum !== 'number' || isNaN(articleIdNum)) return;
        const revert = () => { performOptimisticLikeUpdate(articleIdNum, originalIsLiked, originalLikeCount); if (isLikedArticlesView && !originalIsLiked) console.warn("Reverting unlike on /favoris. Re-fetch might be needed."); };
		fetch('/api/toggle-article-like', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ articleId: articleIdNum }), })
		.then(async (res) => { const data = await res.json().catch(() => ({})); if (!res.ok) { console.error(`API err like ${articleIdNum}:`, res.status, data.message); revert(); } else { const optimState = getArticleFromState(articleIdNum); if (optimState && optimState.is_liked !== data.liked) revert(); }})
		.catch((err) => { console.error(`Net err like ${articleIdNum}:`, err); revert(); });
	}
	async function handleToggleRead(articleToToggle: Article) {
		const articleId = getArticleId(articleToToggle);
		if (!currentUserIdFromStore || typeof articleId !== 'number' || isNaN(articleId)) return;
        const originalState = getArticleFromState(articleId); if (!originalState) return;
        const newReadState = !(originalState.is_read ?? false);
        performOptimisticArticleUpdate(articleId, { is_read: newReadState }); await tick();
		try {
			const response = await fetch('/api/toggle-article-read', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ articleId: articleId }), });
			const responseData = await response.json().catch(() => ({}));
			if (!response.ok) throw new Error(responseData.message || `API Error: ${response.status}`);
            if (responseData.read !== newReadState) performReadRevert(originalState);
		} catch (error: any) {
			console.error(`Error toggle read API for ${articleId}:`, error);
			performReadRevert(originalState);
            fetchError = `Erreur M√†J statut 'lu' pour article ${getArticleId(originalState)}.`;
		}
	}
    function performReadRevert(originalArticleState: Article) {
         performOptimisticArticleUpdate(getArticleId(originalArticleState), { is_read: originalArticleState.is_read ?? false });
    }
</script>

<div class="min-h-screen bg-black px-4 py-8 md:py-12 text-white">
	<div class="mx-auto max-w-4xl">
		{#if showSignupPrompt}
			<div class="mb-6 flex flex-col sm:flex-row items-center justify-between gap-3 rounded-lg bg-teal-600/20 p-4 shadow-md transition-all duration-300 hover:bg-teal-600/30">
				<p class="text-sm font-medium text-center sm:text-left">D√©bloquez tout le potentiel ! Inscrivez-vous pour sauvegarder vos articles favoris et personnaliser votre veille.</p>
				<button on:click={handleSignup} class="group flex shrink-0 inline-block items-center justify-center gap-2 rounded-full bg-teal-500 px-4 py-2 text-xs font-semibold text-white transition-all duration-200 hover:bg-teal-600 whitespace-nowrap">
					<span>S'inscrire gratuitement</span>
					<svg class="h-4 w-4 transition-transform duration-300 group-hover:translate-x-1" fill="none" stroke="currentColor" viewBox="0 0 24 24"> <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7m0 0l-7 7m7-7H3"/> </svg>
				</button>
			</div>
		{/if}

		{#if fetchError && !isLoading && (articles.length === 0 && !articleOfTheDay)}
             <div class="my-6 p-4 rounded-lg bg-red-900/30 border border-red-700 text-red-300 text-center" role="alert">
                <p><strong>Erreur :</strong> {fetchError}</p>
                <button on:click={() => fetchError = null} class="mt-2 text-xs underline hover:text-red-100">Ignorer</button>
             </div>
        {/if}

		<h1 class="mb-4 text-3xl font-bold text-white">{pageTitle}</h1>

		<ArticleListHeader
            {filters}
            bind:selectedFilter
            {filterSelectLabel}
            {showAllCategoriesOption}
            {ALL_CATEGORIES_VALUE}
            {ALL_CATEGORIES_LABEL}
            isContentLoading={isLoading && isInitialLoading}
            {showSubDisciplineFilter}
            {availableSubDisciplines}
            bind:selectedSubDiscipline
            {isLoadingSubDisciplines}
            {subDisciplineSelectLabel}
            {allSubDisciplinesLabel}
            {showAllSubDisciplinesOption}
            on:subdisciplinechanged={(e) => onSubDisciplineChangedByHeader(e.detail)}
            {enableSearch}
            bind:searchQuery
            {searchPlaceholder}
            isSearchDisabled={isLoading && isInitialLoading && !searchActive}
        />

        <ArticleListDisplay
            {articleOfTheDay}
            {articles}
            {isInitialLoading}
            fetchError={fetchError}
            userId={currentUserIdFromStore}
            {isLikedArticlesView}
            {emptyStateMessage}
            {filterForTitle}
            {isViewingSubDiscipline}
            {selectedSubDiscipline}
            {searchActive}
            {searchQuery}
            isLoading={isLoading}
            {hasMore}
            {loadMoreButtonText}
            {allArticlesLoadedText}
            {mainArticleListTitleInfo}
            {ALL_CATEGORIES_VALUE}
            {isSubscribed}
            on:openArticle={(e) => openImmersive(e.detail)}
            on:likeToggle={(e) => handleLikeToggle(e.detail)}
            on:toggleRead={(e) => handleToggleRead(e.detail)}
            on:thumbsUpToggle={(e) => handleThumbsUpToggle(e.detail)}
            on:loadMore={loadMore}
            on:handleSignup={handleSignup}
        />
	</div>
</div>
<ArticleImmersiveModal article={immersiveArticle} on:close={closeImmersive} />
<ConfirmationModal isOpen={showUnlikeConfirmModal} on:confirm={handleConfirmUnlike} on:cancel={handleCancelUnlike} title="Confirmer le retrait" message="Retirer cet article de vos favoris ?" confirmText="Retirer" cancelText="Annuler"/>
{#if showSubscriptionRequired}
    <SubscriptionRequired on:close={() => showSubscriptionRequired = false} />
{/if}

<style>
	button:focus-visible, input:focus-visible, [data-radix-select-trigger]:focus-visible { outline: 2px solid #14b8a6; outline-offset: 2px; }
	.scrollbar-thin { scrollbar-width: thin; scrollbar-color: #14b8a6 #1f2937; }
	.scrollbar-thin::-webkit-scrollbar { width: 8px; height: 8px; }
	.scrollbar-thin::-webkit-scrollbar-track { background: #1f2937; border-radius: 10px; }
	.scrollbar-thin::-webkit-scrollbar-thumb { background-color: #14b8a6; border-radius: 6px; border: 2px solid #1f2937; }
</style>
--- End of File ---

--- File Path ---
frontend/src/lib/components/articles/ArticleCard.svelte

<!-- src/lib/components/articles/ArticleCard.svelte -->
<script lang="ts">
	import {
		type Article,
		extractTitleEmoji,
		formatDate,
		formatTitle,
		getArticleId
	} from '$lib/utils/articleUtils';
	import { createEventDispatcher } from 'svelte';

	const { article, isSubscribed = false } = $props<{ article: Article; isSubscribed?: boolean }>();
	const dispatch = createEventDispatcher<{
		open: Article,
		likeToggle: { // Heart icon (Saved/Favorite)
			articleId: number | string;
			currentlyLiked: boolean;
			currentLikeCount: number;
		},
		toggleRead: Article, // Eye icon
		thumbsUpToggle: { // <<< NEW: Thumbs up icon
			articleId: number | string;
			currentlyThumbedUp: boolean;
			currentThumbsUpCount: number;
		}
	}>();

	const emoji = $derived(article.is_recommandation ? 'üåü' : extractTitleEmoji(article.content));
	const displayTitle = $derived(formatTitle(article.title));
	const displayDate = $derived(formatDate(article.published_at));
	const articleId = $derived(getArticleId(article));
	// Format counts
	const displayLikeCount = $derived(article.like_count != null ? article.like_count.toLocaleString() : '0'); // Heart count
	const displayReadCount = $derived(article.read_count != null ? article.read_count.toLocaleString() : '0'); // Eye count
	const displayThumbsUpCount = $derived(article.thumbs_up_count != null ? article.thumbs_up_count.toLocaleString() : '0'); // <<< NEW: Thumbs up count

	function handleCardClick() {
		dispatch('open', article);
	}

	function handleLikeClick() { // Heart toggle
		dispatch('likeToggle', {
			articleId: articleId,
			currentlyLiked: article.is_liked ?? false,
			currentLikeCount: article.like_count ?? 0
		});
	}

	function handleToggleReadClick() { // Eye toggle
		console.log(`Toggle Read button clicked for article: ${articleId}, current state: ${article.is_read}`);
		dispatch('toggleRead', article);
	}

	// <<< NEW: Handler for thumbs up toggle
	function handleThumbsUpClick() {
		dispatch('thumbsUpToggle', {
			articleId: articleId,
			currentlyThumbedUp: article.is_thumbed_up ?? false,
			currentThumbsUpCount: article.thumbs_up_count ?? 0
		});
	}
</script>

<li
	on:click={handleCardClick}
	class="group relative rounded-lg border p-4 transition-all duration-300 {!isSubscribed ? 'cursor-pointer' : ''} {article.is_recommandation ? 'border-yellow-400/50 bg-yellow-50 hover:border-yellow-400 hover:bg-yellow-100/80' : 'border-gray-700 bg-gray-800 hover:border-teal-500/50 hover:bg-gray-700/50'}"
	data-article-id={articleId}
>
	<!-- Status Icons Container (Top Right) -->
	<div class="absolute top-2 right-2 flex items-center space-x-2">
		<!-- Read Status Eye Icon / Button -->
		<button
			type="button"
			aria-label={article.is_read ? "Marquer comme non lu" : "Marquer comme lu"}
			title={article.is_read ? "Marquer comme non lu" : "Marquer comme lu"}
			on:click|stopPropagation={handleToggleReadClick}
			class="focus:outline-none rounded-full p-0.5 transition-colors duration-150 hover:bg-gray-600 focus-visible:ring-2 focus-visible:ring-teal-500 focus-visible:ring-offset-2 focus-visible:ring-offset-gray-800"
		>
			{#if article.is_read}
				<!-- Read Icon -->
				<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class="w-5 h-5 text-teal-400 pointer-events-none">
					<path d="M12 15a3 3 0 1 0 0-6 3 3 0 0 0 0 6Z" />
					<path fill-rule="evenodd" d="M1.323 11.447C2.811 6.976 7.028 3.75 12.001 3.75c4.97 0 9.185 3.223 10.675 7.69.12.362.12.752 0 1.113-1.487 4.471-5.705 7.697-10.677 7.697-4.97 0-9.186-3.223-10.675-7.69a1.762 1.762 0 0 1 0-1.113ZM17.25 12a5.25 5.25 0 1 1-10.5 0 5.25 5.25 0 0 1 10.5 0Z" clip-rule="evenodd" />
				</svg>
			{:else}
				<!-- Unread Icon -->
				<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-5 h-5 text-gray-500 pointer-events-none">
					<path stroke-linecap="round" stroke-linejoin="round" d="M2.036 12.322a1.012 1.012 0 0 1 0-.639C3.423 7.51 7.36 4.5 12 4.5c4.638 0 8.573 3.007 9.963 7.178.07.207.07.431 0 .639C20.577 16.49 16.64 19.5 12 19.5c-4.638 0-8.573-3.007-9.963-7.178Z" />
					<path stroke-linecap="round" stroke-linejoin="round" d="M15 12a3 3 0 1 1-6 0 3 3 0 0 1 6 0Z" />
				</svg>
			{/if}
		</button>

        <!-- <<< NEW: Thumbs Up Button/Icon >>> -->
		<button
			type="button"
			aria-label={article.is_thumbed_up ? "Retirer le pouce lev√©" : "Mettre un pouce lev√©"}
			title={article.is_thumbed_up ? "Retirer le pouce lev√©" : "Mettre un pouce lev√©"}
			on:click|stopPropagation={handleThumbsUpClick}
			class="focus:outline-none rounded-full p-0.5 transition-transform duration-100 ease-in-out hover:scale-110 active:scale-95 focus-visible:ring-2 focus-visible:ring-blue-500 focus-visible:ring-offset-2 focus-visible:ring-offset-gray-800"
		>
			<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor"
                 class:w-5={true}
                 class:h-5={true}
                 class:fill-blue-500={article.is_thumbed_up}
                 class:text-blue-500={article.is_thumbed_up}
                 class:fill-gray-500={!article.is_thumbed_up}
                 class:text-gray-500={!article.is_thumbed_up}
                 class:hover:fill-blue-400={!article.is_thumbed_up}
                 class:hover:text-blue-400={!article.is_thumbed_up}
                 class="pointer-events-none">
                <path d="M7.493 19.5c-.425 0-.82-.236-.975-.632A7.48 7.48 0 0 1 6 15.125c0-1.75.599-3.358 1.602-4.634.151-.192.373-.309.6-.397.473-.183.89-.514 1.212-.924a9.042 9.042 0 0 1 2.861-2.4c.723-.384 1.35-.956 1.653-1.715a4.498 4.498 0 0 0 .322-1.672V3a.75.75 0 0 1 .75-.75 2.25 2.25 0 0 1 2.25 2.25c0 1.152-.26 2.243-.723 3.218-.266.558.107 1.282.725 1.282h3.126c1.026 0 1.945.694 2.054 1.715.045.422.068.85.068 1.285a11.95 11.95 0 0 1-2.649 7.521c-.388.482-.987.729-1.605.729H14.23c-.483 0-.964-.078-1.423-.23l-3.114-1.04a4.501 4.501 0 0 0-1.423-.23h-.777ZM2.331 10.727a11.969 11.969 0 0 0-.831 4.398 12 12 0 0 0 .52 3.507C2.28 19.482 3.105 20 3.994 20H4.9c.445 0 .72-.498.523-.898a8.963 8.963 0 0 1-.924-3.977c0-1.708.476-3.305 1.302-4.666.245-.403-.028-.959-.5-.959H4.25c-.832 0-1.612.453-1.918 1.227Z" />
            </svg>
		</button>

		<!-- Like (Heart) Button/Icon -->
		<button
			type="button"
			aria-label={article.is_liked ? "Retirer des favoris" : "Ajouter aux favoris"}
			title={article.is_liked ? "Retirer des favoris" : "Ajouter aux favoris"}
			on:click|stopPropagation={handleLikeClick}
			class="focus:outline-none rounded-full p-0.5 transition-transform duration-100 ease-in-out hover:scale-110 active:scale-95 focus-visible:ring-2 focus-visible:ring-pink-500 focus-visible:ring-offset-2 focus-visible:ring-offset-gray-800"
		>
			<!-- Single SVG for Heart -->
			<svg
				xmlns="http://www.w3.org/2000/svg"
				viewBox="0 0 24 24"
				stroke-width="1.5"
				stroke="currentColor"
				class:w-5={true}
				class:h-5={true}
				class:fill-pink-500={article.is_liked}
				class:text-pink-500={article.is_liked}
				class:fill-none={!article.is_liked}
				class:text-gray-500={!article.is_liked}
				class:hover:text-pink-400={!article.is_liked}
				class="pointer-events-none"
			>
				<path stroke-linecap="round" stroke-linejoin="round" d="M21 8.25c0-2.485-2.099-4.5-4.688-4.5-1.935 0-3.597 1.126-4.312 2.733-.715-1.607-2.377-2.733-4.313-2.733C5.1 3.75 3 5.765 3 8.25c0 7.22 9 12 9 12s9-4.78 9-12Z" />
			</svg>
		</button>
	</div>

	<h3 class="text-left text-lg font-bold pr-24 {article.is_recommandation ? 'text-gray-900' : 'text-white'}"> <!-- Increased pr to avoid overlap -->
		<span class="mr-2">{emoji}</span>{displayTitle}
	</h3>
	{#if article.is_recommandation}
		<p class="mt-1 text-sm font-semibold text-green-500">Recommandation scientifique</p>
	{:else if article.grade}
		<p class="mt-1 text-sm {article.grade == 'A' ? 'text-green-500' : article.grade == 'B' ? 'text-yellow-400' : article.grade == 'C' ? 'text-orange-400' : 'text-red-400'}">Grade de recommandation : {article.grade}</p>
	{/if}
	<div class="mt-2 flex items-center text-sm {article.is_recommandation ? 'text-gray-600' : 'text-gray-400'}">
		{#if article.journal}
			<span class="mr-1">{article.journal}</span>
		{/if}
	</div>
	<div class="mt-2 flex items-center text-sm {article.is_recommandation ? 'text-gray-600' : 'text-gray-400'}">
		<svg class="mr-1 h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
			<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"/>
		</svg>
		<span class="mr-1">Date :</span>
		<span>{displayDate}</span>
	</div>

	<!-- Counts Display (Bottom Right) -->
	<div class="absolute bottom-2 right-3 flex items-center space-x-3 text-xs {article.is_recommandation ? 'text-gray-600' : 'text-gray-400'}">
		{#if article.read_count != null}
			<div class="flex items-center space-x-1" title="Nombre total de lectures">
				<!-- Use the filled eye icon (teal color) -->
				<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class="w-4 h-4 text-teal-400">
					<path d="M12 15a3 3 0 1 0 0-6 3 3 0 0 0 0 6Z" />
					<path fill-rule="evenodd" d="M1.323 11.447C2.811 6.976 7.028 3.75 12.001 3.75c4.97 0 9.185 3.223 10.675 7.69.12.362.12.752 0 1.113-1.487 4.471-5.705 7.697-10.677 7.697-4.97 0-9.186-3.223-10.675-7.69a1.762 1.762 0 0 1 0-1.113ZM17.25 12a5.25 5.25 0 1 1-10.5 0 5.25 5.25 0 0 1 10.5 0Z" clip-rule="evenodd" />
				</svg>
				<span>{displayReadCount}</span>
			</div>
		{/if}

        <!-- <<< NEW: Thumbs Up Count Display >>> -->
		{#if article.thumbs_up_count != null}
			<div class="flex items-center space-x-1" title="Nombre total de pouces lev√©s">
                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class="w-3.5 h-3.5 text-blue-500">
                    <path d="M7.493 19.5c-.425 0-.82-.236-.975-.632A7.48 7.48 0 0 1 6 15.125c0-1.75.599-3.358 1.602-4.634.151-.192.373-.309.6-.397.473-.183.89-.514 1.212-.924a9.042 9.042 0 0 1 2.861-2.4c.723-.384 1.35-.956 1.653-1.715a4.498 4.498 0 0 0 .322-1.672V3a.75.75 0 0 1 .75-.75 2.25 2.25 0 0 1 2.25 2.25c0 1.152-.26 2.243-.723 3.218-.266.558.107 1.282.725 1.282h3.126c1.026 0 1.945.694 2.054 1.715.045.422.068.85.068 1.285a11.95 11.95 0 0 1-2.649 7.521c-.388.482-.987.729-1.605.729H14.23c-.483 0-.964-.078-1.423-.23l-3.114-1.04a4.501 4.501 0 0 0-1.423-.23h-.777ZM2.331 10.727a11.969 11.969 0 0 0-.831 4.398 12 12 0 0 0 .52 3.507C2.28 19.482 3.105 20 3.994 20H4.9c.445 0 .72-.498.523-.898a8.963 8.963 0 0 1-.924-3.977c0-1.708.476-3.305 1.302-4.666.245-.403-.028-.959-.5-.959H4.25c-.832 0-1.612.453-1.918 1.227Z" />
                </svg>
				<span>{displayThumbsUpCount}</span>
			</div>
		{/if}

		{#if article.like_count != null}
			<div class="flex items-center space-x-1" title="Nombre total de favoris">
				<svg
					xmlns="http://www.w3.org/2000/svg"
					viewBox="0 0 24 24"
					stroke-width="1.5"
					stroke="currentColor"
					class="w-3.5 h-3.5 fill-pink-500 text-pink-500"
				>
					<path stroke-linecap="round" stroke-linejoin="round" d="M21 8.25c0-2.485-2.099-4.5-4.688-4.5-1.935 0-3.597 1.126-4.312 2.733-.715-1.607-2.377-2.733-4.313-2.733C5.1 3.75 3 5.765 3 8.25c0 7.22 9 12 9 12s9-4.78 9-12Z" />
				</svg>
				<span>{displayLikeCount}</span>
			</div>
		{/if}
	</div>
</li>
--- End of File ---

--- File Path ---
frontend/src/lib/components/articles/ArticleImmersiveModal.svelte

<!-- src/lib/components/articles/ArticleImmersiveModal.svelte -->
<script lang="ts">
	import userProfileStore from '$lib/stores/user';
	import {
		extractTitleEmoji,
		formatDate,
		formatTitle,
		getArticleId,
		parseContent,
		type Article,
		type ContentSection
	} from '$lib/utils/articleUtils';
	import { Check, Copy } from 'lucide-svelte';
	import { createEventDispatcher } from 'svelte';

	const { article } = $props<{ article: Article | null }>();
	const dispatch = createEventDispatcher<{ close: void }>();

	let copyStatus = $state<'idle' | 'copied' | 'error'>('idle');
	let copyTimeoutId: ReturnType<typeof setTimeout> | null = null;

	const emoji = $derived(article ? extractTitleEmoji(article.content) : 'üìù');
	const displayTitle = $derived(article ? formatTitle(article.title) : '');
	const displayDate = $derived(article ? formatDate(article.published_at) : '');
	const contentSections = $derived.by(() => {
		if (!article) return [];
		const sections = parseContent(article.content);
		return sections;
	});
	const articleId = $derived(article ? getArticleId(article) : null);

	$effect(() => {
		const currentArticle = article;
		const currentUser = $userProfileStore;

		if (currentArticle && currentUser && articleId) {
			const articleIdNumber = typeof articleId === 'string' ? parseInt(articleId, 10) : articleId;

			if (!isNaN(articleIdNumber)) {
				fetch('/api/mark-article-read', {
					method: 'POST',
					headers: { 'Content-Type': 'application/json' },
					body: JSON.stringify({ articleId: articleIdNumber }),
				})
				.then(async (response) => {
					if (!response.ok) {
						const errorData = await response.json().catch(() => ({ message: 'Failed to parse error response' }));
					}
				})
				.catch((error) => {
					console.error(`Network error marking article ${articleIdNumber} as read:`, error);
				});
			}
		}

		return () => {
			if (copyTimeoutId) {
				clearTimeout(copyTimeoutId);
                copyStatus = 'idle';
			}
		};
	});

	function handleClose() {
		dispatch('close');
	}

	function handleKeydown(event: KeyboardEvent) {
		if (event.key === 'Escape') {
			handleClose();
		}
	}

    async function handleCopyContent() {
        if (!article || copyStatus === 'copied') return;

        let textToCopy = '';
        textToCopy += `${emoji} ${displayTitle}\n\n`;

        if (article.journal) textToCopy += `Journal: ${article.journal}\n`;
        if (displayDate !== 'Non sp√©cifi√©e' && displayDate !== 'Date invalide') textToCopy += `Publi√© le: ${displayDate}\n`;
        if (article.grade) textToCopy += `Grade: ${article.grade}\n`;
        textToCopy += `\n---\n\n`;

        contentSections.forEach(section => {
            textToCopy += `${section.emoji} ${section.title}\n`;
            
            if (section.content && section.content.length > 0) {
            section.content.forEach(paragraph => {
                    if (paragraph.startsWith('__EMOJI_BULLET__')) {
                        const parts = paragraph.replace('__EMOJI_BULLET__', '').split('__');
                        if (parts.length >= 2) {
                            textToCopy += `${parts[0]} ${parts[1]}\n`;
                        }
                    } else if (paragraph.startsWith('**') && paragraph.includes(':**')) {
                        textToCopy += `${paragraph}\n`;
                    } else if (paragraph.startsWith('__NESTED__')) {
                        textToCopy += `  ${paragraph.replace('__NESTED__', '')}\n`;
                    } else {
                        textToCopy += `${paragraph}\n`;
                    }
                });
            }
            
            if (section.subsections && section.subsections.length > 0) {
                section.subsections.forEach(subsection => {
                    textToCopy += `\n${subsection.emoji} ${subsection.title}\n`;
                    subsection.content.forEach(item => {
                        textToCopy += `- ${item}\n`;
                    });
                });
            }
            
            textToCopy += '\n';
        });

        if (contentSections.length === 0 && article.content) {
             textToCopy += `${article.content}\n\n`;
        }

        if (article.link) {
            textToCopy += `---\nLien original: ${article.link}\n`;
        }

        try {
            await navigator.clipboard.writeText(textToCopy.trim());
            copyStatus = 'copied';

            if (copyTimeoutId) clearTimeout(copyTimeoutId);
            copyTimeoutId = setTimeout(() => {
                copyStatus = 'idle';
                copyTimeoutId = null;
            }, 2000);

        } catch (err) {
            copyStatus = 'error';
            console.error('Failed to copy article content:', err);
            if (copyTimeoutId) clearTimeout(copyTimeoutId);
            copyTimeoutId = setTimeout(() => {
                copyStatus = 'idle';
                copyTimeoutId = null;
            }, 3000);
        }
    }
</script>

{#if article}
	<div
		class="fixed inset-0 z-[200] flex items-center justify-center bg-black/70 backdrop-blur-sm"
		on:click|self={handleClose}
		on:keydown={handleKeydown}
		role="dialog"
        aria-modal="true"
        aria-labelledby="immersive-title"
	>
		<div
			class="modal-content relative max-h-[90vh] w-full max-w-4xl overflow-y-auto rounded-2xl bg-gray-900 p-6 md:p-8 shadow-2xl scrollbar-thin scrollbar-thumb-teal-500 scrollbar-track-gray-800"
		>
            <div class="absolute top-3 right-3 flex items-center space-x-2">
                <button
                    type="button"
                    class="text-gray-400 hover:text-white focus:outline-none focus:ring-2 focus:ring-teal-500 rounded-full p-1.5 transition-colors duration-150"
                    on:click={handleCopyContent}
                    aria-label="Copier le contenu de l'article"
                    title="Copier le contenu"
                    disabled={copyStatus === 'copied'}
                >
                    {#if copyStatus === 'copied'}
                        <Check class="w-5 h-5 text-green-500" />
                    {:else if copyStatus === 'error'}
                         <Copy class="w-5 h-5 text-red-500" />
                    {:else}
                        <Copy class="w-5 h-5" />
                    {/if}
                </button>

                <button
                    type="button"
                    class="text-3xl text-gray-400 hover:text-white focus:outline-none focus:ring-2 focus:ring-teal-500 rounded-full p-1 leading-none"
                    on:click={handleClose}
                    aria-label="Fermer la vue d√©taill√©e de l'article"
                >
                    √ó
                </button>
            </div>

			<h2 id="immersive-title" class="mb-4 pr-16 text-2xl md:text-3xl font-bold text-white">
				<span class="mr-2">{emoji}</span>{displayTitle}
			</h2>

			{#if article.grade}
				{#if article.is_recommandation}
					<p class="mb-2 text-sm text-green-500">
					Recommandation scientifique
				</p>
				{:else}
					<p class="mb-2 text-sm {article.grade == 'A' ? 'text-green-500' : article.grade == 'B' ? 'text-yellow-400' : article.grade == 'C' ? 'text-orange-400' : 'text-red-400'}">
					Grade de recommandation : {article.grade}
				</p>
				{/if}
			{/if}

			<div class="mb-4 flex flex-wrap items-center gap-x-4 text-sm text-gray-400">
				{#if article.journal}
				    <span>{article.journal}</span>
                {/if}
				{#if article.journal && displayDate !== 'Non sp√©cifi√©e' && displayDate !== 'Date invalide'} <span class="text-gray-600">‚Ä¢</span> {/if}
                {#if displayDate !== 'Non sp√©cifi√©e' && displayDate !== 'Date invalide'}
				    <span>Publi√© le : {displayDate}</span>
                {/if}
                {#if article.read_count != null || article.thumbs_up_count != null || article.like_count != null}
                    <span class="text-gray-600">‚Ä¢</span>
                    <div class="flex items-center space-x-3">
                        {#if article.read_count != null}
                            <div class="flex items-center space-x-1" title="Nombre total de lectures">
                                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class="w-4 h-4 text-teal-400">
                                    <path d="M12 15a3 3 0 1 0 0-6 3 3 0 0 0 0 6Z" />
                                    <path fill-rule="evenodd" d="M1.323 11.447C2.811 6.976 7.028 3.75 12.001 3.75c4.97 0 9.185 3.223 10.675 7.69.12.362.12.752 0 1.113-1.487 4.471-5.705 7.697-10.677 7.697-4.97 0-9.186-3.223-10.675-7.69a1.762 1.762 0 0 1 0-1.113ZM17.25 12a5.25 5.25 0 1 1-10.5 0 5.25 5.25 0 0 1 10.5 0Z" clip-rule="evenodd" />
                                </svg>
                                <span>{article.read_count.toLocaleString()}</span>
                            </div>
                        {/if}
                        {#if article.thumbs_up_count != null}
                            <div class="flex items-center space-x-1" title="Nombre total de pouces lev√©s">
                                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class="w-3.5 h-3.5 text-blue-500">
                                    <path d="M7.493 19.5c-.425 0-.82-.236-.975-.632A7.48 7.48 0 0 1 6 15.125c0-1.75.599-3.358 1.602-4.634.151-.192.373-.309.6-.397.473-.183.89-.514 1.212-.924a9.042 9.042 0 0 1 2.861-2.4c.723-.384 1.35-.956 1.653-1.715a4.498 4.498 0 0 0 .322-1.672V3a.75.75 0 0 1 .75-.75 2.25 2.25 0 0 1 2.25 2.25c0 1.152-.26 2.243-.723 3.218-.266.558.107 1.282.725 1.282h3.126c1.026 0 1.945.694 2.054 1.715.045.422.068.85.068 1.285a11.95 11.95 0 0 1-2.649 7.521c-.388.482-.987.729-1.605.729H14.23c-.483 0-.964-.078-1.423-.23l-3.114-1.04a4.501 4.501 0 0 0-1.423-.23h-.777ZM2.331 10.727a11.969 11.969 0 0 0-.831 4.398 12 12 0 0 0 .52 3.507C2.28 19.482 3.105 20 3.994 20H4.9c.445 0 .72-.498.523-.898a8.963 8.963 0 0 1-.924-3.977c0-1.708.476-3.305 1.302-4.666.245-.403-.028-.959-.5-.959H4.25c-.832 0-1.612.453-1.918 1.227Z" />
                                </svg>
                                <span>{article.thumbs_up_count.toLocaleString()}</span>
                            </div>
                        {/if}
                        {#if article.like_count != null}
                            <div class="flex items-center space-x-1" title="Nombre total de favoris">
                                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-3.5 h-3.5 fill-pink-500 text-pink-500">
                                    <path stroke-linecap="round" stroke-linejoin="round" d="M21 8.25c0-2.485-2.099-4.5-4.688-4.5-1.935 0-3.597 1.126-4.312 2.733-.715-1.607-2.377-2.733-4.313-2.733C5.1 3.75 3 5.765 3 8.25c0 7.22 9 12 9 12s9-4.78 9-12Z" />
                                </svg>
                                <span>{article.like_count.toLocaleString()}</span>
                            </div>
                        {/if}
                    </div>
                {/if}
			</div>

			{#each contentSections as section (section.title)}
				<div class="mb-6">
					<h3 class="mb-2 flex items-center text-lg font-semibold text-teal-400">
						<span class="mr-2 text-xl">{section.emoji}</span>
						{section.title}
					</h3>
					
					{#if section.content && section.content.length > 0}
						<div class="space-y-2">
							{#each section.content as paragraph}
								{#if paragraph.startsWith('__BULLET__')}
									{@const cleanContent = paragraph.replace('__BULLET__', '')}
									<p class="ml-6 text-gray-300 selectable-text before:content-['‚Ä¢'] before:mr-2 before:text-teal-400 before:inline-block before:translate-y-[-1px]">{@html cleanContent.replace(/\*\*([^*]+)\*\*/g, '<strong>$1</strong>')}</p>
								{:else if paragraph.startsWith('__NESTED__')}
									{@const cleanContent = paragraph.replace('__NESTED__', '')}
									<div class="ml-4 text-gray-400 selectable-text">{@html cleanContent.replace(/\*\*([^*]+)\*\*/g, '<strong>$1</strong>')}</div>
								{:else}
									<p class="ml-6 text-gray-300 selectable-text before:content-['‚Ä¢'] before:mr-2 before:text-teal-400 before:inline-block before:translate-y-[-1px]">{@html paragraph.replace(/\*\*([^*]+)\*\*/g, '<strong>$1</strong>')}</p>
								{/if}
							{/each}
						</div>
					{/if}

					{#snippet renderSubsections(subsections: ContentSection[] | undefined)}
						{#if subsections && subsections.length > 0}
							<div class="space-y-4 pt-4">
								{#each subsections as subsection}
									<div style="margin-left: {(subsection.level - 2) * 1}rem;">
										<h4 class="mb-2 flex items-center text-md font-medium text-white">
											<span class="mr-2">{subsection.emoji}</span>
											{subsection.title}
										</h4>
										
										{#if subsection.content && subsection.content.length > 0}
											<div class="space-y-2">
												{#each subsection.content as item}
													{#if item.startsWith('__BULLET__')}
														{@const cleanContent = item.replace('__BULLET__', '')}
														<p class="ml-6 text-gray-300 selectable-text before:content-['‚Ä¢'] before:mr-2 before:text-teal-400 before:inline-block before:translate-y-[-1px]">{@html cleanContent.replace(/\*\*([^*]+)\*\*/g, '<strong>$1</strong>')}</p>
													{:else if item.startsWith('__NESTED__')}
														{@const cleanContent = item.replace('__NESTED__', '')}
														<div class="ml-4 text-gray-400 selectable-text">{@html cleanContent.replace(/\*\*([^*]+)\*\*/g, '<strong>$1</strong>')}</div>
													{:else}
														<p class="ml-6 text-gray-300 selectable-text before:content-['‚Ä¢'] before:mr-2 before:text-teal-400 before:inline-block before:translate-y-[-1px]">{@html item.replace(/\*\*([^*]+)\*\*/g, '<strong>$1</strong>')}</p>
													{/if}
												{/each}
											</div>
										{/if}
										
										{@render renderSubsections(subsection.subsections)}
									</div>
								{/each}
							</div>
						{/if}
					{/snippet}
					
					{@render renderSubsections(section.subsections)}
					
					{#if (!section.subsections || section.subsections.length === 0) && (!section.content || section.content.length === 0)}
						<ul class="section-content ml-4 list-disc space-y-1.5 pl-4 text-gray-300 marker:text-teal-500">
							<li class="selectable-text">Contenu de section non disponible</li>
						</ul>
					{/if}
				</div>
			{:else}
				<p class="selectable-text text-gray-400">{article.content || "Contenu non disponible."}</p>
			{/each}

			{#if article.link}
                <div class="mt-6 border-t border-gray-700 pt-4">
				    <a href={article.link} target="_blank" rel="noopener noreferrer" class="inline-flex items-center gap-2 text-teal-400 underline hover:text-teal-300 transition-colors duration-200">
					    Acc√©der √† l'article original
                        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-4 h-4">
                            <path stroke-linecap="round" stroke-linejoin="round" d="M13.5 6H5.25A2.25 2.25 0 0 0 3 8.25v10.5A2.25 2.25 0 0 0 5.25 21h10.5A2.25 2.25 0 0 0 18 18.75V10.5m-10.5 6L21 3m0 0h-5.25M21 3v5.25" />
                        </svg>
				    </a>
                </div>
			{/if}
		</div>
	</div>
{/if}

<style>
    .modal-content h2,
    .modal-content h3,
    .modal-content p,
    .modal-content li,
    .modal-content span:not(.mr-2):not(.text-gray-600),
    .modal-content a
    {
        user-select: text !important;
        -webkit-user-select: text !important;
        cursor: text;
    }
    
    .selectable-text {
        user-select: text !important;
        -webkit-user-select: text !important;
        cursor: text;
    }

	.scrollbar-thin {
		scrollbar-width: thin;
		scrollbar-color: #14b8a6 #1f2937;
	}

	.scrollbar-thin::-webkit-scrollbar {
		width: 8px;
		height: 8px;
	}

	.scrollbar-thin::-webkit-scrollbar-track {
		background: #1f2937;
        border-radius: 10px;
	}

	.scrollbar-thin::-webkit-scrollbar-thumb {
		background-color: #14b8a6;
		border-radius: 6px;
		border: 2px solid #1f2937;
	}
</style>
--- End of File ---

--- File Path ---
frontend/src/lib/components/articles/ArticleListHeader.svelte

<!-- src/lib/components/articles/ArticleListHeader.svelte -->
<script lang="ts">
	import * as Select from '$lib/components/ui/select';
	import { createEventDispatcher } from 'svelte';

	interface FilterOption {
		value: string;
		label: string;
	}
	interface SubDisciplineOption {
		id: number; // Or string, ensure consistency
		name: string;
	}

	let {
		// Main Filter Props
		filters = [] as FilterOption[],
		selectedFilter = $bindable<string | null>(null),
		filterSelectLabel = 'Filtrer par',
		showAllCategoriesOption = true,
		ALL_CATEGORIES_VALUE = "__ALL__",
		ALL_CATEGORIES_LABEL = "Toutes les cat√©gories",
		isContentLoading = false, // Disables filter when main content is initially loading

		// Sub-Discipline Filter Props
		showSubDisciplineFilter = false,
		availableSubDisciplines = [] as SubDisciplineOption[],
		selectedSubDiscipline = $bindable<string | null>(null),
		isLoadingSubDisciplines = false,
		subDisciplineSelectLabel = "Affiner par sous-sp√©cialit√©",
		allSubDisciplinesLabel = "Toutes les sous-sp√©cialit√©s",
		showAllSubDisciplinesOption = true,

		// Search Props
		enableSearch = false,
		searchQuery = $bindable(''),
		searchPlaceholder = "Rechercher par mots-cl√©s...",
        isSearchDisabled = false // To disable search specifically if needed (e.g. during initial load)
	} = $props<{
		// Main Filter Props
		filters?: FilterOption[];
		selectedFilter?: string | null;
		filterSelectLabel?: string;
		showAllCategoriesOption?: boolean;
		ALL_CATEGORIES_VALUE?: string;
		ALL_CATEGORIES_LABEL?: string;
		isContentLoading?: boolean;

		// Sub-Discipline Filter Props
		showSubDisciplineFilter?: boolean;
		availableSubDisciplines?: SubDisciplineOption[];
		selectedSubDiscipline?: string | null;
		isLoadingSubDisciplines?: boolean;
		subDisciplineSelectLabel?: string;
		allSubDisciplinesLabel?: string;
		showAllSubDisciplinesOption?: boolean;

		// Search Props
		enableSearch?: boolean;
		searchQuery?: string;
		searchPlaceholder?: string;
        isSearchDisabled?: boolean;
	}>();

	const sortedFilters = $derived(
        [...filters].sort((a: FilterOption, b: FilterOption) =>
			a.label.localeCompare(b.label, 'fr', { sensitivity: 'base' })
		)
    );

	const triggerContent = $derived(
        selectedFilter === ALL_CATEGORIES_VALUE
            ? ALL_CATEGORIES_LABEL
            : (filters.find((f: FilterOption) => f.value === selectedFilter)?.label ?? filterSelectLabel)
    );

    const subDisciplineTriggerContent = $derived(
        selectedSubDiscipline === null ? subDisciplineSelectLabel :
        selectedSubDiscipline === allSubDisciplinesLabel ? allSubDisciplinesLabel : selectedSubDiscipline
    );

    // Event dispatcher for sub-discipline change to allow parent to clear search query
    const dispatch = createEventDispatcher<{ subdisciplinechanged: string | null }>();

    function handleSubDisciplineChange(value: string | null) {
        const newValue = value === allSubDisciplinesLabel ? null : value;
        if (selectedSubDiscipline !== newValue) {
            selectedSubDiscipline = newValue; // Update bound value
            dispatch('subdisciplinechanged', newValue); // Notify parent
        }
    }

    function handleFilterChange(value: string | null) {
        if (selectedFilter !== value) {
            selectedFilter = value;
            // searchQuery = ''; // Parent will handle clearing search query
        }
    }
</script>

<div class="mb-6 flex flex-col gap-4">
    <div class="flex flex-col md:flex-row flex-wrap gap-4">
        {#if filters.length > 0 || showAllCategoriesOption}
            <div class="relative w-full md:max-w-xs shrink-0">
                <Select.Root type="single" name="selectedFilter" value={selectedFilter ?? undefined} onValueChange={(detail) => handleFilterChange(detail)}>
                    <Select.Trigger class="w-full rounded-lg border border-gray-700 bg-gray-800 px-4 py-3 text-sm font-medium text-white shadow-sm hover:bg-gray-700 focus:ring-2 focus:ring-teal-500 focus:outline-none" disabled={isContentLoading}>{triggerContent}</Select.Trigger>
                    <Select.Content class="scrollbar-thin scrollbar-thumb-teal-500 scrollbar-track-gray-800 z-20 max-h-60 overflow-y-auto rounded-lg border border-gray-700 bg-gray-900 shadow-lg">
                        <Select.Group>
                            <Select.GroupHeading class="px-4 py-2 font-semibold text-gray-400 text-xs uppercase tracking-wider">{filterSelectLabel}</Select.GroupHeading>
                            {#if showAllCategoriesOption}
                                <Select.Item value={ALL_CATEGORIES_VALUE} label={ALL_CATEGORIES_LABEL} class="cursor-pointer px-4 py-2 text-white hover:bg-teal-600/80 data-[selected]:bg-teal-700">{ALL_CATEGORIES_LABEL}</Select.Item>
                            {/if}
                            {#each sortedFilters as filter (filter.value)}
                                <Select.Item value={filter.value} label={filter.label} class="cursor-pointer px-4 py-2 text-white hover:bg-teal-600/80 data-[selected]:bg-teal-700">{filter.label}</Select.Item>
                            {/each}
                        </Select.Group>
                    </Select.Content>
                </Select.Root>
            </div>
        {/if}
        {#if showSubDisciplineFilter}
            <div class="relative w-full md:max-w-xs shrink-0">
                <Select.Root type="single" name="selectedSubDiscipline" value={selectedSubDiscipline ?? allSubDisciplinesLabel} onValueChange={(detail) => handleSubDisciplineChange(detail)}>
                    <Select.Trigger class="w-full rounded-lg border border-gray-700 bg-gray-800 px-4 py-3 text-sm font-medium text-white shadow-sm hover:bg-gray-700 focus:ring-2 focus:ring-teal-500 focus:outline-none" disabled={isLoadingSubDisciplines || isContentLoading}>
                        {#if isLoadingSubDisciplines}
                            <span class="flex items-center gap-2 opacity-70"><svg class="animate-spin h-4 w-4 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24"> <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle> <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path> </svg>Chargement...</span>
                        {:else}{subDisciplineTriggerContent}{/if}
                    </Select.Trigger>
                    <Select.Content class="scrollbar-thin scrollbar-thumb-teal-500 scrollbar-track-gray-800 z-10 max-h-60 overflow-y-auto rounded-lg border border-gray-700 bg-gray-900 shadow-lg">
                        <Select.Group>
                            <Select.GroupHeading class="px-4 py-2 font-semibold text-gray-400 text-xs uppercase tracking-wider">{subDisciplineSelectLabel}</Select.GroupHeading>
                            {#if showAllSubDisciplinesOption}
                                <Select.Item value={allSubDisciplinesLabel} label={allSubDisciplinesLabel} class="cursor-pointer px-4 py-2 text-white hover:bg-teal-600/80 data-[selected]:bg-teal-700">{allSubDisciplinesLabel}</Select.Item>
                            {/if}
                            {#each availableSubDisciplines as sub (sub.name)} <!-- Assuming sub.name is unique for keying -->
                                <Select.Item value={sub.name} label={sub.name} class="cursor-pointer px-4 py-2 text-white hover:bg-teal-600/80 data-[selected]:bg-teal-700">{sub.name}</Select.Item>
                            {/each}
                        </Select.Group>
                    </Select.Content>
                </Select.Root>
            </div>
        {/if}
    </div>
    {#if enableSearch}
        <div class="relative w-full">
            <input type="search" bind:value={searchQuery} placeholder={searchPlaceholder} class="w-full rounded-lg border border-gray-700 bg-gray-800 px-4 py-3 pl-10 text-sm font-medium text-white shadow-sm placeholder-gray-500 focus:ring-2 focus:ring-teal-500 focus:outline-none focus:border-teal-500" disabled={isSearchDisabled}/>
            <svg class="absolute left-3 top-1/2 transform -translate-y-1/2 h-5 w-5 text-gray-500 pointer-events-none" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" d="m21 21-5.197-5.197m0 0A7.5 7.5 0 1 0 5.196 5.196a7.5 7.5 0 0 0 10.607 10.607Z" /></svg>
            {#if searchQuery}
                <button aria-label="Effacer la recherche" on:click={() => searchQuery = ''} class="absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-500 hover:text-white focus:outline-none focus:ring-1 focus:ring-teal-500 rounded-full p-0.5">
                    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" class="w-4 h-4"><path stroke-linecap="round" stroke-linejoin="round" d="M6 18 18 6M6 6l12 12" /></svg>
                </button>
            {/if}
        </div>
    {/if}
</div>
--- End of File ---

--- File Path ---
frontend/src/lib/components/SubscriptionStatus.svelte

<!-- $lib/components/SubscriptionStatus.svelte -->
<script lang="ts">
	export interface StripeSubscription {
		id: number;
		user_profile_id: string;
		stripe_customer_id: string | null;
		stripe_subscription_id: string | null;
		stripe_price_id: string | null;
		status: 'active' | 'trialing' | 'canceled' | 'past_due' | 'incomplete' | 'incomplete_expired' | 'unpaid' | string | null;
		current_period_start: string | null;
		current_period_end: string | null;
		cancel_at_period_end: boolean | null;
		canceled_at: string | null;
		trial_start: string | null;
		trial_end: string | null;
		metadata: Record<string, any> | null;
		created_at: string;
		updated_at: string;
	}
	import { AlertTriangle, CheckCircle, Info, Loader2, XCircle } from 'lucide-svelte';
	import { createEventDispatcher } from 'svelte';

	let { subscription }: { subscription: StripeSubscription | null | undefined } = $props();
	let isLoading = $state(false); // Internal loading state for this component's actions

	const dispatch = createEventDispatcher<{ subscriptionUpdated: void, manageSubscription: void }>();


	function formatDate(dateString: string | null | undefined): string {
		if (!dateString) return 'N/A';
		try {
			return new Date(dateString).toLocaleDateString('fr-FR', {
				year: 'numeric',
				month: 'long',
				day: 'numeric'
			});
		} catch (e) {
			return 'Date invalide';
		}
	}

	function getSubscriptionStatusText(status: string | null | undefined): string {
		if (!status) return 'Inconnu';
		switch (status) {
			case 'active': return 'Actif';
			case 'trialing': return 'En p√©riode d\'essai';
			case 'canceled': return 'Annul√©';
			case 'past_due': return 'Paiement en attente';
			case 'incomplete': return 'Incomplet';
			case 'incomplete_expired': return 'Expir√© (incomplet)';
			case 'unpaid': return 'Impay√©';
			default: return status.charAt(0).toUpperCase() + status.slice(1);
		}
	}

	async function handleCancelSubscription() {
		if (!subscription?.stripe_subscription_id) {
			alert('Erreur: ID d\'abonnement introuvable.');
			return;
		}

		if (!confirm('√ätes-vous s√ªr de vouloir annuler votre abonnement ? Il restera actif jusqu\'√† la fin de la p√©riode en cours.')) {
			return;
		}

		isLoading = true;
		let localErrorMessage = ''; // Local error message for this action

		try {
			const response = await fetch('/api/cancel-stripe-subscription', {
				method: 'POST',
				headers: { 'Content-Type': 'application/json' },
				body: JSON.stringify({ stripeSubscriptionId: subscription.stripe_subscription_id })
			});

			const result = await response.json();

			if (!response.ok) {
				throw new Error(result.message || `Erreur ${response.status} lors de l'annulation.`);
			}

			alert('Votre demande d\'annulation a √©t√© prise en compte. Votre abonnement prendra fin √† la date indiqu√©e.');
			dispatch('subscriptionUpdated'); // Notify parent to re-fetch data

		} catch (err: any) {
			localErrorMessage = err.message || "Une erreur est survenue lors de l'annulation.";
			alert(`Erreur: ${localErrorMessage}`); // Show error to user
		} finally {
			isLoading = false;
		}
	}

	async function handleManageSubscription() {
		isLoading = true;
		let localErrorMessage = '';
		try {
			const response = await fetch('/api/create-customer-portal-session', {
				method: 'POST',
			});
			const result = await response.json();
			if (!response.ok) {
				throw new Error(result.message || `HTTP Error ${response.status}`);
			}
			if (result.url) {
				window.location.href = result.url;
			} else {
				throw new Error('URL du portail client non re√ßue.');
			}
		} catch (err: any) {
			localErrorMessage = err.message || 'Erreur lors de la redirection vers le portail de gestion.';
			alert(`Erreur: ${localErrorMessage}`);
		} finally {
			isLoading = false;
		}
	}

    const statusText = $derived(getSubscriptionStatusText(subscription?.status));
    const currentPeriodEndDate = $derived(formatDate(subscription?.current_period_end));
    const trialEndDate = $derived(formatDate(subscription?.trial_end || subscription?.current_period_end));
    const canceledAtDate = $derived(formatDate(subscription?.canceled_at));
    const isEffectivelyActive = $derived(subscription && (subscription.status === 'active' || subscription.status === 'trialing'));
    const showSubscriptionCard = $derived(
        subscription && (
            subscription.status === 'active' ||
            subscription.status === 'trialing' ||
            subscription.status === 'canceled' ||
            subscription.status === 'past_due' ||
            subscription.status === 'unpaid' ||
            subscription.status === 'incomplete'
        )
    );
</script>

{#if showSubscriptionCard && subscription}
	<div class="mb-8 rounded-lg bg-gray-800 p-6 text-white shadow-lg md:p-8">
		<h2 class="mb-6 flex items-center border-b border-gray-700 pb-3 text-xl font-semibold text-white md:text-2xl">
            {#if subscription.status === 'active'} <CheckCircle class="mr-3 h-6 w-6 shrink-0 text-green-400" />
            {:else if subscription.status === 'trialing'} <Info class="mr-3 h-6 w-6 shrink-0 text-blue-400" />
            {:else if subscription.status === 'canceled'} <XCircle class="mr-3 h-6 w-6 shrink-0 text-gray-500" />
            {:else if subscription.status === 'past_due' || subscription.status === 'unpaid' || subscription.status === 'incomplete'} <AlertTriangle class="mr-3 h-6 w-6 shrink-0 text-yellow-400" />
            {/if}
			Votre abonnement
		</h2>
		<div class="space-y-3">
			<p class="text-sm text-gray-300">
				Statut : <span class="ml-1 font-medium text-white">{statusText}</span>
			</p>

			{#if subscription.status === 'active' || subscription.status === 'trialing'}
				{#if subscription.cancel_at_period_end}
					<p class="text-sm text-gray-300">
						Votre abonnement {subscription.status === 'trialing' ? "d'essai " : ""}
						prendra fin le <span class="font-medium text-white">{currentPeriodEndDate}</span>.
						Vous continuerez √† b√©n√©ficier de tous les avantages jusqu'√† cette date.
					</p>
				{:else}
					<p class="text-sm text-gray-300">
						{#if subscription.status === 'trialing'}
							Votre p√©riode d'essai est active jusqu'au <span class="font-medium text-white">{trialEndDate}</span>.
							Votre abonnement payant d√©butera ensuite, sauf annulation avant cette date.
						{:else}
							Votre abonnement est actif et sera renouvel√© automatiquement le
							<span class="font-medium text-white">{currentPeriodEndDate}</span>.
						{/if}
					</p>
				{/if}
			{/if}

			{#if subscription.status === 'canceled'}
				<p class="text-sm text-gray-300">
					Votre abonnement a √©t√© annul√©
					{#if subscription.canceled_at} le <span class="font-medium text-white">{canceledAtDate}</span>{/if}.
					Il a pris fin le <span class="font-medium text-white">{currentPeriodEndDate}</span>.
				</p>
			{/if}

			{#if subscription.status === 'past_due' || subscription.status === 'unpaid' || subscription.status === 'incomplete'}
				<p class="text-sm text-yellow-300">
					{#if subscription.status === 'past_due'}
						Votre dernier paiement a √©chou√©. Veuillez mettre √† jour vos informations de paiement pour r√©activer votre abonnement.
					{:else if subscription.status === 'unpaid'}
						Votre abonnement est impay√©. Veuillez mettre √† jour vos informations de paiement.
					{:else if subscription.status === 'incomplete'}
						La configuration de votre abonnement est incompl√®te. Veuillez finaliser le paiement.
					{/if}
				</p>
			{/if}

			<div class="flex flex-col gap-4 pt-3 sm:flex-row">
				{#if isEffectivelyActive && !subscription?.cancel_at_period_end}
					<button type="button" on:click={handleCancelSubscription}
							class="flex w-full items-center justify-center rounded-lg bg-red-600 px-5 py-2.5 text-sm font-medium text-white transition-colors duration-200 hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-red-500 focus:ring-offset-2 focus:ring-offset-gray-800 disabled:opacity-60 sm:w-auto"
							disabled={isLoading}>
                            {#if isLoading} <Loader2 class="mr-2 h-4 w-4 animate-spin" /> Annulation... {:else} Annuler l'abonnement {/if}
					</button>
				{/if}
                {#if subscription.status !== 'canceled'}
                    <button type="button" on:click={handleManageSubscription}
                            class="flex w-full items-center justify-center rounded-lg bg-gray-600 px-5 py-2.5 text-sm font-medium text-white transition-colors duration-200 hover:bg-gray-500 focus:outline-none focus:ring-2 focus:ring-gray-400 focus:ring-offset-2 focus:ring-offset-gray-800 disabled:opacity-60 sm:w-auto"
                            disabled={isLoading}>
                        {#if isLoading} <Loader2 class="mr-2 h-4 w-4 animate-spin" /> Chargement... {:else} G√©rer mon abonnement {/if}
                    </button>
                {/if}
			</div>
		</div>
	</div>
{:else}
    <div class="mb-8 rounded-lg bg-gray-800 p-6 text-white shadow-lg md:p-8">
        <h2 class="mb-6 flex items-center border-b border-gray-700 pb-3 text-xl font-semibold text-white md:text-2xl">
            <Info class="mr-3 h-6 w-6 shrink-0 text-blue-400" />
            Abonnement
        </h2>
        <div class="space-y-4">
            <p class="text-gray-300">
                Vous n'avez pas encore d'abonnement actif.
            </p>
            <a href="/checkout"
               class="inline-flex items-center justify-center rounded-lg bg-blue-600 px-5 py-2.5 text-sm font-medium text-white transition-colors duration-200 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 focus:ring-offset-gray-800">
                S'abonner maintenant
            </a>
        </div>
    </div>
{/if}
--- End of File ---

--- File Path ---
frontend/src/lib/components/NewFeatureNotice.svelte

<!-- src/lib/components/SupportCommitteeNotice.svelte -->
<script lang="ts">
	import { cn } from '$lib/utils.js';
	import { X } from 'lucide-svelte';
	import { createEventDispatcher } from 'svelte';

	// Define the event this component can dispatch
	const dispatch = createEventDispatcher<{ dismiss: void }>();

	// Receive visibility state directly from the parent
	let { isVisible = false } = $props<{ isVisible: boolean }>();

	// Function to handle the dismiss action
	function dismiss() {
		// Signal the parent component to handle the logic (API call, state update)
		dispatch('dismiss');
	}

	// CSS classes for the notice box
	const wrapperClasses = $derived(cn(
		"w-72 rounded-lg border border-gray-700 bg-gray-800 p-4 shadow-lg animate-fade-in text-white", // Wider for new content
		"absolute top-full right-0 z-20 mt-2" // Desktop positioning
	));

	// CSS classes for the close button
	const closeButtonClasses = $derived(cn(
		"absolute top-1.5 right-1.5 rounded-full p-1 text-gray-400 transition-colors hover:bg-gray-700 hover:text-white focus:outline-none focus:ring-2 focus:ring-teal-500 focus:ring-offset-2 focus:ring-offset-gray-800"
	));

</script>

{#if isVisible}
	<div
		class={wrapperClasses}
		role="status"
		aria-live="polite"
	>
		<button
			type="button"
			on:click={dismiss}
			class={closeButtonClasses}
			aria-label="Fermer la notification"
		>
			<X class="h-4 w-4" />
		</button>

		<!-- Notice Content -->
		<h4 class="mb-2 text-sm font-semibold text-white">üíñ Contribuez √† Veille M√©dicale !</h4>
		<ul class="mb-3 list-none space-y-1 pl-0 text-xs text-gray-300">
			<li>
                üôè <strong class="font-medium text-teal-400">Soutenez-nous</strong> : Aidez √† maintenir le service via un
                <a href="/donations" class="font-medium text-teal-500 hover:text-teal-400 hover:underline">don</a>.
            </li>
			<li>
                üßë‚Äçüî¨ <strong class="font-medium text-teal-400">Comit√© Scientifique</strong> : Envie de participer ?
                <a href="/comite" class="font-medium text-teal-500 hover:text-teal-400 hover:underline">Rejoignez-nous</a> !
            </li>
		</ul>
		<p class="border-t border-gray-700 pt-2 text-xs text-gray-400">
			Votre soutien et votre expertise sont pr√©cieux !
		</p>
	</div>
{/if}

<style>
	.animate-fade-in {
		animation: fadeIn 0.3s ease-out forwards;
	}

	@keyframes fadeIn {
		from {
			opacity: 0;
			transform: translateY(-5px);
		}
		to {
			opacity: 1;
			transform: translateY(0);
		}
	}
</style>
--- End of File ---

--- File Path ---
frontend/src/lib/components/DonationForm.svelte

<script lang="ts">
	import { i18n } from '$lib/i18n';
	import { AlertCircle } from 'lucide-svelte';
	import { createEventDispatcher } from 'svelte';

    // --- Props & Events ---
    const dispatch = createEventDispatcher<{ amountChange: number }>();

	// --- Component State ---
	let errorMessage = $state(''); // Keep for amount validation
    let currentAmount = $state(10); // Default donation amount in EUR
    let customAmountInput = $state('');
    let isCustomAmountConfirmed = $state(false); // Track if the current amount is from confirmed custom input
    const presetAmounts = [5, 10, 20, 50];
    let { disabled = false } = $props<{ disabled?: boolean }>(); // Allow disabling from parent

    // --- Amount Selection Logic (Simplified) ---
    function selectAmount(amount: number) {
        if (disabled) return;
        currentAmount = amount;
        isCustomAmountConfirmed = false;
        customAmountInput = '';
        errorMessage = ''; // Clear error on preset selection
        dispatch('amountChange', amount * 100); // Dispatch amount in cents
    }

    function handleCustomAmountChange(event: Event) {
        if (disabled) return;
        const input = event.target as HTMLInputElement;
        const value = input.value.replace(/,/g, '.');
        const numericValue = parseFloat(value);
        isCustomAmountConfirmed = false; // Input changed, needs reconfirmation

        if (value === '') {
            errorMessage = '';
        } else if (isNaN(numericValue) || numericValue < 0.50) {
            errorMessage = $i18n.donations.errors.invalidAmount;
        } else {
            errorMessage = '';
        }
        customAmountInput = input.value; // Update display value immediately
    }

    function confirmCustomAmount() {
        if (disabled) return;
        const value = customAmountInput.replace(/,/g, '.');
        const numericValue = parseFloat(value);

        if (!isNaN(numericValue) && numericValue >= 0.50) {
            currentAmount = numericValue; // Update internal amount state if needed
            isCustomAmountConfirmed = true;
            errorMessage = '';
            dispatch('amountChange', Math.round(numericValue * 100)); // Dispatch confirmed amount
        } else {
            errorMessage = $i18n.donations.errors.invalidAmount;
            isCustomAmountConfirmed = false;
        }
    }
</script>

<div class="donation-amount-selector text-white">
    <div class="mb-6">
        <div class="grid grid-cols-2 gap-3 sm:grid-cols-4">
            {#each presetAmounts as amount}
                <button type="button" on:click={() => selectAmount(amount)}
                     class="rounded-md border-2 px-4 py-3 text-center font-medium transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-gray-800 disabled:opacity-60 disabled:cursor-not-allowed"
                     class:border-orange-500={currentAmount === amount && !customAmountInput}
                     class:bg-orange-600={currentAmount === amount && !customAmountInput}
                     class:text-white={currentAmount === amount && !customAmountInput}
                     class:border-gray-600={!(currentAmount === amount && !customAmountInput)}
                     class:hover:border-orange-400={currentAmount !== amount || !!customAmountInput}
                     class:hover:bg-gray-700={currentAmount !== amount || !!customAmountInput}
                     class:text-gray-300={!(currentAmount === amount && !customAmountInput)}
                     disabled={disabled}>
                     {amount} ‚Ç¨
                </button>
            {/each}
        </div>
        <div class="mt-4 flex items-center gap-2">
            <div class="relative flex-grow">
                <span class="pointer-events-none absolute inset-y-0 left-0 flex items-center pl-3 text-gray-400">‚Ç¨</span>
                <input type="text" id="custom-amount-input" inputmode="decimal"
                     placeholder="Autre montant" bind:value={customAmountInput}
                     on:input={handleCustomAmountChange}
                     class="w-full rounded-md border-2 bg-gray-700 py-3 pl-8 pr-4 text-white placeholder-gray-400 transition-colors duration-200 focus:z-10 focus:border-orange-500 focus:ring-2 focus:ring-orange-500 focus:ring-offset-0 disabled:opacity-60 disabled:cursor-not-allowed"
                     class:border-orange-500={customAmountInput !== '' && isCustomAmountConfirmed}
                     class:border-gray-600={customAmountInput === '' || !isCustomAmountConfirmed}
                     class:border-yellow-500={customAmountInput !== '' && !isCustomAmountConfirmed}
                     disabled={disabled} />
            </div>
            <button type="button" on:click={confirmCustomAmount}
                 class="shrink-0 rounded-md border-2 bg-gray-600 px-4 py-3 font-medium text-white transition-colors hover:bg-gray-500 focus:z-10 focus:outline-none focus:ring-2 focus:ring-orange-500 focus:ring-offset-0 disabled:cursor-not-allowed disabled:opacity-60"
                 class:border-orange-500={customAmountInput !== '' && isCustomAmountConfirmed}
                 class:border-gray-600={customAmountInput === ''}
                 class:border-yellow-500={customAmountInput !== '' && !isCustomAmountConfirmed}
                 disabled={disabled || customAmountInput === '' || (customAmountInput !== '' && parseFloat(customAmountInput.replace(/,/g, '.')) < 0.50) || isCustomAmountConfirmed}
                 title="Valider ce montant">
                 OK
             </button>
        </div>
         {#if errorMessage}
            <p class="mt-2 text-sm text-red-400 flex items-center gap-1"><AlertCircle class="w-4 h-4"/> {errorMessage}</p>
         {/if}
    </div>
</div>

<style>
    /* ... styles for amount buttons/input if needed ... */
</style>
--- End of File ---

--- File Path ---
frontend/src/lib/components/Footer.svelte

<script>
	import { i18n } from '$lib/i18n';
	import userProfileStore from '$lib/stores/user';
	import { supabase } from '$lib/supabase'; // Import supabase client
	import { goto } from '$app/navigation'; // Import goto for navigation

	async function handleLogout() {
		try {
			const { error } = await supabase.auth.signOut();
			if (error) throw error;
			userProfileStore.set(null); // Clear local store
			goto('/'); // Redirect to home after logout
		} catch (error) {
			console.error('Error logging out:', error.message);
			// Optionally display an error message to the user
		}
	}
</script>

<footer class="bg-black py-12 text-white">
	<div class="mx-auto max-w-7xl px-4 sm:px-6 lg:px-8">
		<div class="grid grid-cols-1 gap-y-8 gap-x-6 md:grid-cols-5">
			<!-- Slogan -->
			<div>
				<h3 class="mb-4 text-lg font-semibold">{$i18n.footer.slogan}</h3>
			</div>

			<!-- Liens de navigation -->
			<div>
				<h3 class="mb-4 text-lg font-semibold">Navigation</h3>
				<ul class="space-y-3">
					<li>
						<a href="/ma-veille" class="hover:underline">{$i18n.footer.myArticles}</a>
					</li>
					<li>
						<a href="/articles" class="hover:underline">{$i18n.footer.articles}</a>
					</li>
					<li>
						<a href="/favoris" class="hover:underline">Favoris</a>
					</li>
					<li>
						<a href="/qui-sommes-nous" class="hover:underline">Qui sommes-nous ?</a>
					</li>
					<li>
						<a href="/comite" class="hover:underline">Comit√© scientifique</a>
					</li>
					<li>
						{#if $userProfileStore}
							<a href="/account" class="hover:underline">{$i18n.footer.account}</a>
						{/if}
					</li>
				</ul>
			</div>

			<!-- Section Soutenez-nous -->
			<div>
				<h3 class="mb-4 text-lg font-semibold">Soutenez-nous</h3>
				<a
					href="/donations"
					class="inline-block rounded-full border-2 border-white px-6 py-2 text-sm text-white transition-colors duration-200 hover:bg-white hover:text-black focus:outline-none focus:ring-2 focus:ring-white focus:ring-offset-2 focus:ring-offset-black"
				>
					Faire un don
				</a>
			</div>

			<!-- Section R√©seaux Sociaux / Rejoignez-nous -->
			<div>
				{#if !$userProfileStore}
					<!-- Show Signup Button if not logged in -->
					<h3 class="mb-4 text-lg font-semibold">Rejoignez-nous</h3>
					<a
						href="/signup"
						class="inline-block rounded-full border-2 border-white px-6 py-2 text-sm text-white transition-colors duration-200 hover:bg-white hover:text-black focus:outline-none focus:ring-2 focus:ring-white focus:ring-offset-2 focus:ring-offset-black"
					>
						{$i18n.footer.signup}
					</a>
				{:else}
					<!-- Show LinkedIn Icon if logged in (or always) -->
					<h3 class="mb-4 text-lg font-semibold">Suivez-nous</h3>
					<div class="flex items-center space-x-4">
						<!-- LinkedIn Icon Link -->
						<a
							href="https://www.linkedin.com/in/baptiste-mazas-577219182/"
							target="_blank"
							rel="noopener noreferrer"
							aria-label="Suivez Baptiste Mazas sur LinkedIn"
							title="Suivez Baptiste Mazas sur LinkedIn"
							class="text-gray-400 transition-colors duration-200 hover:text-white focus:outline-none focus:ring-2 focus:ring-white focus:ring-offset-2 focus:ring-offset-black rounded-full"
						>
							<svg
								xmlns="http://www.w3.org/2000/svg"
								class="h-7 w-7"
								fill="currentColor"
								viewBox="0 0 24 24"
							>
								<path
									d="M19 0h-14c-2.761 0-5 2.239-5 5v14c0 2.761 2.239 5 5 5h14c2.762 0 5-2.239 5-5v-14c0-2.761-2.238-5-5-5zm-11 19h-3v-11h3v11zm-1.5-12.268c-.966 0-1.75-.79-1.75-1.764s.784-1.764 1.75-1.764 1.75.79 1.75 1.764-.783 1.764-1.75 1.764zm13.5 12.268h-3v-5.604c0-3.368-4-3.113-4 0v5.604h-3v-11h3v1.765c1.396-2.586 7-2.777 7 2.476v6.759z"
								/>
							</svg>
						</a>
						<!-- Add other social icons here if needed -->
					</div>
				{/if}
			</div>

			<!-- Section Contact -->
			<div>
				<h3 class="mb-4 text-lg font-semibold">Contact</h3>
				<a
					href="mailto:contact@veillemedicale.fr"
					class="mt-1 inline-block text-base text-gray-300 hover:text-white hover:underline"
				>
					contact@veillemedicale.fr
				</a>
			</div>
		</div>

		<!-- Ligne de s√©paration -->
		<hr class="my-8 border-gray-600" />

		<!-- Mention de droits d'auteur et D√©connexion -->
		<div class="flex flex-col items-center justify-between gap-4 text-sm text-gray-400 sm:flex-row">
			<span>¬© {new Date().getFullYear()} Veille M√©dicale. Tous droits r√©serv√©s.</span>
			{#if $userProfileStore}
				<button
					on:click={handleLogout}
					class="text-gray-400 transition-colors duration-200 hover:text-white hover:underline focus:outline-none focus:ring-1 focus:ring-white focus:ring-offset-1 focus:ring-offset-black rounded"
				>
					D√©connexion
				</button>
			{/if}
		</div>
	</div>
</footer>
--- End of File ---

--- File Path ---
frontend/src/lib/components/SubscriptionRequired.svelte

<!-- frontend/src/lib/components/SubscriptionRequired.svelte -->
<script lang="ts">
	import { goto } from '$app/navigation';
	import { Lock, X } from 'lucide-svelte';
	import { createEventDispatcher } from 'svelte';

	const dispatch = createEventDispatcher();

	// Props for customization, though defaults are provided
	let {
		title = "Acc√®s Restreint",
		message = "Le contenu de cette page est r√©serv√© √† nos abonn√©s.",
		ctaText = "S'abonner maintenant pour y acc√©der",
		subscribeUrl = "/checkout", // Default based on your CheckoutForm path
		homeUrl = "/"
	} = $props<{
		title?: string;
		message?: string;
		ctaText?: string;
		subscribeUrl?: string;
		homeUrl?: string;
	}>();

	function navigateToSubscribe() {
		goto(subscribeUrl);
	}

    function navigateToHome() {
        goto(homeUrl);
    }

    function handleBackdropClick(event: MouseEvent) {
        if (event.target === event.currentTarget) {
            dispatch('close');
        }
    }

    function handleKeydown(event: KeyboardEvent) {
        if (event.key === 'Escape') {
            dispatch('close');
        }
    }

    function handleClose() {
        dispatch('close');
    }
</script>

<svelte:window on:keydown={handleKeydown} />

<div 
    class="fixed inset-0 z-50 flex items-center justify-center bg-black/40 p-4 backdrop-blur-[2px]"
    on:click={handleBackdropClick}
    role="dialog"
    aria-modal="true"
>
    <div class="relative w-full max-w-md rounded-xl bg-gray-800 p-8 shadow-2xl">
        <button
            on:click={handleClose}
            class="absolute -right-2 -top-2 rounded-full bg-gray-700 p-1.5 text-gray-400 transition-colors hover:bg-gray-600 hover:text-white focus:outline-none focus:ring-2 focus:ring-teal-500 focus:ring-offset-2 focus:ring-offset-gray-800"
            aria-label="Fermer"
        >
            <X class="h-5 w-5" />
        </button>

        <div class="mb-6 flex justify-center">
            <Lock class="h-16 w-16 text-orange-500" stroke-width="1.5" />
        </div>

        <h2 class="mb-3 text-3xl font-bold text-white text-center">
            {title}
        </h2>

        <p class="mb-8 text-gray-300 text-center">
            {message}
        </p>

        <div class="space-y-4">
            <button
                on:click={navigateToSubscribe}
                class="w-full rounded-lg bg-orange-600 px-6 py-3 text-base font-semibold text-white shadow-md transition-all duration-300 ease-in-out hover:bg-orange-700 focus:outline-none focus:ring-2 focus:ring-orange-500 focus:ring-offset-2 focus:ring-offset-gray-800"
            >
                {ctaText}
            </button>

            <button
                on:click={navigateToHome}
                class="w-full rounded-lg border-2 border-gray-600 px-6 py-3 text-base font-semibold text-gray-300 transition-colors duration-300 ease-in-out hover:border-gray-500 hover:bg-gray-700 focus:outline-none focus:ring-2 focus:ring-gray-500 focus:ring-offset-2 focus:ring-offset-gray-800"
            >
                Retour √† l'accueil
            </button>
        </div>
        <!-- Optional: Link to learn more about subscription benefits -->
        <!--
        <p class="mt-6 text-sm text-gray-400">
            <a href="/pricing" class="underline hover:text-teal-400">
                D√©couvrir les avantages de l'abonnement
            </a>
        </p>
        -->
    </div>
</div>

<style>
    /* You can add any component-specific global styles here if needed,
       but Tailwind should handle most of it. */
</style>
--- End of File ---

--- File Path ---
frontend/src/lib/components/MobileFeatureNoticeModal.svelte

<!-- src/lib/components/MobileSupportCommitteeNoticeModal.svelte -->
<script lang="ts">
	import { X } from 'lucide-svelte';
	import { createEventDispatcher } from 'svelte';
	import { fly } from 'svelte/transition';

	// Prop to control modal visibility
	let { isOpen = false } = $props<{ isOpen: boolean }>();

	// Event dispatcher to signal dismissal to the parent
	const dispatch = createEventDispatcher<{ closeAndDismiss: void }>();

	function closeAndDismiss() {
		// Signal parent to close modal AND handle the API call/state update
		dispatch('closeAndDismiss');
	}

	function handleBackdropClick(event: MouseEvent) {
		// Close if clicking the backdrop itself
		if (event.target === event.currentTarget) {
			closeAndDismiss();
		}
	}

	function handleKeydown(event: KeyboardEvent) {
		// Close on Escape key
		if (event.key === 'Escape') {
			closeAndDismiss();
		}
	}

</script>

{#if isOpen}
	<!-- svelte-ignore a11y-click-events-have-key-events a11y-no-static-element-interactions -->
	<div
		class="fixed inset-0 z-[200] flex items-center justify-center bg-black/70 backdrop-blur-sm p-4"
		on:click={handleBackdropClick}
		on:keydown={handleKeydown}
		role="dialog"
		aria-modal="true"
		aria-labelledby="mobile-support-committee-notice-title"
		transition:fly={{ y: 20, duration: 200 }}
	>
		<div class="relative w-full max-w-sm rounded-xl bg-gray-800 p-6 shadow-2xl text-white">
			<!-- Close Button -->
			<button
				type="button"
				on:click={closeAndDismiss}
				class="absolute top-2 right-2 rounded-full p-1.5 text-gray-400 transition-colors hover:bg-gray-700 hover:text-white focus:outline-none focus:ring-2 focus:ring-teal-500 focus:ring-offset-2 focus:ring-offset-gray-800"
				aria-label="Fermer la notification et ne plus afficher"
			>
				<X class="h-5 w-5" />
			</button>

			<!-- Notice Content -->
			<h4 id="mobile-support-committee-notice-title" class="mb-3 text-base font-semibold text-white pr-6">
				üíñ Contribuez √† Veille M√©dicale !
			</h4>
			<ul class="mb-4 list-none space-y-1.5 pl-0 text-sm text-gray-300">
                 <li>
                    üôè <strong class="font-medium text-teal-400">Soutenez-nous</strong> : Aidez √† maintenir le service via un
                    <a href="/donations" on:click={closeAndDismiss} class="font-medium text-teal-500 hover:text-teal-400 hover:underline">don</a>.
                </li>
                <li>
                    üßë‚Äçüî¨ <strong class="font-medium text-teal-400">Comit√© Scientifique</strong> : Envie de participer ?
                    <a href="/comite" on:click={closeAndDismiss} class="font-medium text-teal-500 hover:text-teal-400 hover:underline">Rejoignez-nous</a> !
                </li>
			</ul>
			<p class="border-t border-gray-700 pt-3 text-sm text-gray-400">
				Votre soutien et votre expertise sont pr√©cieux !
			</p>
		</div>
	</div>
{/if}
--- End of File ---

--- File Path ---
frontend/src/lib/hooks/is-mobile.svelte.ts

import { MediaQuery } from "svelte/reactivity";

const MOBILE_BREAKPOINT = 768;

export class IsMobile extends MediaQuery {
	constructor() {
		super(`max-width: ${MOBILE_BREAKPOINT - 1}px`);
	}
}

--- End of File ---

--- File Path ---
frontend/src/lib/index.ts

// place files you want to import through the `$lib` alias in this folder.

--- End of File ---

--- File Path ---
frontend/src/lib/i18n.js

import i18nData from '../i18n.json';
import { readable } from 'svelte/store';
export const i18n = readable(i18nData.fr);
--- End of File ---

--- File Path ---
frontend/src/app.html

<!doctype html>
<html lang="en">
	<head>
		<meta charset="utf-8" />
		<link rel="icon" href="%sveltekit.assets%/favicon.png" />
		<meta name="viewport" content="width=device-width, initial-scale=1" />
		%sveltekit.head%
	</head>
	<body data-sveltekit-preload-data="hover">
		<div style="display: contents">%sveltekit.body%</div>
	</body>
</html>

--- End of File ---

--- File Path ---
frontend/src/hooks.server.ts

// hooks.server.ts
import { PUBLIC_SUPABASE_ANON_KEY, PUBLIC_SUPABASE_URL } from '$env/static/public';
import { createServerClient } from '@supabase/ssr';
import { redirect, type Handle } from '@sveltejs/kit';
import { sequence } from '@sveltejs/kit/hooks';

const supabase: Handle = async ({ event, resolve }) => {
  const isProduction = !event.url.hostname.includes('localhost');
  console.log('isProduction:', isProduction);

  event.locals.supabase = createServerClient(PUBLIC_SUPABASE_URL, PUBLIC_SUPABASE_ANON_KEY, {
    cookies: {
      getAll: () => {
        const cookies = event.cookies.getAll();
        // console.log('Cookies getAll:', cookies);
        return cookies;
      },
      setAll: (cookiesToSet) => {
        // console.log('Cookies to set:', cookiesToSet);
        cookiesToSet.forEach(({ name, value, options }) => {
          const cookieOptions = {
            ...options,
            path: '/',
            httpOnly: true,
            secure: isProduction, // D√©sactiv√© en local (pas de HTTPS)
            sameSite: isProduction ? 'lax' : 'lax', // 'none' n√©cessite HTTPS
            domain: isProduction ? '.veillemedicale.fr' : undefined, // Pas de domaine en local
          };
          console.log(`Setting cookie: ${name}=${value}, options:`, cookieOptions);
          event.cookies.set(name, value, cookieOptions);
        });
      },
    },
  });

  event.locals.safeGetSession = async () => {
    const {
      data: { session },
      error: sessionError,
    } = await event.locals.supabase.auth.getSession();
    if (sessionError) {
      console.error('Session error:', sessionError);
      return { session: null, user: null };
    }
    if (!session) {
      console.log('No session found');
      return { session: null, user: null };
    }

    const {
      data: { user },
      error: userError,
    } = await event.locals.supabase.auth.getUser();
    if (userError) {
      console.error('User error:', userError);
      return { session: null, user: null };
    }

    // console.log('Session:', session);
    // console.log('User:', user);
    return { session, user };
  };

  return resolve(event, {
    filterSerializedResponseHeaders(name) {
      return name === 'content-range' || name === 'x-supabase-api-version';
    },
  });
};

const authGuard: Handle = async ({ event, resolve }) => {
  const { session, user } = await event.locals.safeGetSession();
  event.locals.session = session;
  event.locals.user = user;

  if (event.url.pathname.startsWith('/ma-veille') && !session) {
    throw redirect(303, '/login');
  }

  return resolve(event);
};

export const handle: Handle = sequence(supabase, authGuard);
--- End of File ---

--- File Path ---
frontend/src/routes/+layout.ts

// +layout.ts
import { PUBLIC_SUPABASE_ANON_KEY, PUBLIC_SUPABASE_URL } from '$env/static/public';
import { createBrowserClient, createServerClient, isBrowser } from '@supabase/ssr';
import type { LayoutLoad } from './$types';

export const load: LayoutLoad = async ({ data, depends, fetch }) => {
  depends('supabase:auth');

  // Helper functions for cookie management in the browser
  const getAllCookies = () => {
    const cookies = document.cookie.split(';').map((cookie) => {
      const [name, value] = cookie.trim().split('=');
      return { name, value };
    });
    return cookies;
  };

  const setAllCookies = (cookiesToSet) => {
    cookiesToSet.forEach(({ name, value, options }) => {
      let cookieString = `${name}=${value}`;
      if (options) {
        if (options.path) cookieString += `;path=${options.path}`;
        if (options.expires) cookieString += `;expires=${options.expires.toUTCString()}`;
        if (options.sameSite) cookieString += `;SameSite=${options.sameSite}`;
        if (options.secure) cookieString += ';Secure';
      }
      document.cookie = cookieString;
    });
  };

  const supabase = isBrowser()
    ? createBrowserClient(PUBLIC_SUPABASE_URL, PUBLIC_SUPABASE_ANON_KEY, {
        global: {
          fetch,
        },
        cookies: {
          getAll: getAllCookies,
          setAll: setAllCookies,
        },
      })
    : createServerClient(PUBLIC_SUPABASE_URL, PUBLIC_SUPABASE_ANON_KEY, {
        global: {
          fetch,
        },
        cookies: {
          getAll() {
            return data.cookies;
          },
        },
      });

  // Use the session and user from the server-side data
  const session = data.session;
  const user = data.user;

  // console.log('Layout client session:', session);
  // console.log('Layout client user:', user);

  return { session, supabase, user };
};
--- End of File ---

--- File Path ---
frontend/src/routes/qui-sommes-nous/+page.svelte

<script lang="ts">
	import { i18n } from '$lib/i18n';

	interface Founder {
		name: string;
		photo: string;
		description: string;
		linkedin?: string;
	}

	const founders: Founder[] = [
		{
			name: $i18n.us.baptiste.name,
			photo: $i18n.us.baptiste.photo,
			description: $i18n.us.baptiste.description,
			linkedin: $i18n.us.baptiste.linkedin
		},
		{
			name: $i18n.us.jeanemmanuel.name,
			photo: $i18n.us.jeanemmanuel.photo,
			description: $i18n.us.jeanemmanuel.description,
			linkedin: $i18n.us.jeanemmanuel.linkedin
		},
		{
			name: $i18n.us.alexis.name,
			photo: $i18n.us.alexis.photo,
			description: $i18n.us.alexis.description,
			linkedin: $i18n.us.alexis.linkedin
		}
	];

	const suggestionHtml = $i18n.us.suggestion.replace(
		'<a href="mailto:contact@veillemedicale.fr">contact@veillemedicale.fr</a>',
		'<a href="mailto:contact@veillemedicale.fr" class="text-teal-400 font-semibold hover:underline hover:text-teal-300">contact@veillemedicale.fr</a>'
	);
</script>

<svelte:head>
	<title>{$i18n.us.title} - Veille M√©dicale</title>
	<meta
		name="description"
		content="D√©couvrez l'√©quipe derri√®re Veille M√©dicale, un outil con√ßu pour les m√©decins par Baptiste Mazas et Jean-Emmanuel Perramant."
	/>
	<link rel="preconnect" href="https://fonts.googleapis.com" />
	<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
	<link
		href="https://fonts.googleapis.com/css2?family=Montserrat:ital,wght@0,100..900;1,100..900&display=swap"
		rel="stylesheet"
	/>
</svelte:head>

<div class="min-h-screen bg-black px-4 py-12 text-white">
	<div class="mx-auto max-w-4xl">
		<!-- En-t√™te -->
		<header class="py-10 text-center">
			<h1 class="mb-4 text-4xl font-bold text-white sm:text-5xl">{$i18n.us.title}</h1>
		</header>

		<!-- Contenu principal -->
		<main class="space-y-12">
			{#each founders as founder (founder.name)}
				<section
					class="flex flex-col items-center rounded-lg bg-gray-800 p-6 shadow-md transition-all duration-300 hover:shadow-lg md:flex-row md:items-start"
				>
					<img
						src={founder.photo}
						alt="{founder.name} photo"
						class="mb-6 h-32 w-32 flex-shrink-0 rounded-lg border-2 border-teal-500 object-cover md:h-40 md:w-40 md:mr-6 md:mb-0"
						loading="lazy"
					/>
					<div class="flex-1 text-center md:text-left">
						<!-- Name and Inline LinkedIn Icon -->
						<h2 class="mb-3 text-xl font-semibold text-white sm:text-2xl lg:text-3xl">
							{founder.name}
							{#if founder.linkedin}
								<a
									href={founder.linkedin}
									target="_blank"
									rel="noopener noreferrer"
									aria-label="Profil LinkedIn de {founder.name}"
									title="Profil LinkedIn de {founder.name}"
									class="linkedin-badge ml-2 inline-block transform translate-y-[-2px] rounded bg-gray-700 p-[3px] align-middle transition-colors duration-200 hover:bg-gray-600 focus:outline-none focus:ring-2 focus:ring-teal-500 focus:ring-offset-2 focus:ring-offset-gray-800"
								>
									<svg
										xmlns="http://www.w3.org/2000/svg"
										class="h-5 w-5 text-gray-300"
										fill="currentColor"
										viewBox="0 0 24 24"
									>
										<path
											d="M19 0h-14c-2.761 0-5 2.239-5 5v14c0 2.761 2.239 5 5 5h14c2.762 0 5-2.239 5-5v-14c0-2.761-2.238-5-5-5zm-11 19h-3v-11h3v11zm-1.5-12.268c-.966 0-1.75-.79-1.75-1.764s.784-1.764 1.75-1.764 1.75.79 1.75 1.764-.783 1.764-1.75 1.764zm13.5 12.268h-3v-5.604c0-3.368-4-3.113-4 0v5.604h-3v-11h3v1.765c1.396-2.586 7-2.777 7 2.476v6.759z"
										/>
									</svg>
								</a>
							{/if}
						</h2>
						<!-- Description -->
						<p class="text-base font-normal leading-relaxed text-gray-300 sm:text-lg">
							{@html founder.description}
						</p>
					</div>
				</section>
			{/each}

			<section class="rounded-lg bg-gray-800 p-6 text-center shadow-md">
				<p class="text-lg font-medium text-gray-200 sm:text-xl">{@html suggestionHtml}</p>
			</section>
		</main>
	</div>
</div>

<style>
	/* Style g√©n√©ral */
	button:focus {
		outline: none;
	}
	.animate-bounce {
		animation: bounce 2s infinite;
	}

	@keyframes bounce {
		0%,
		20%,
		50%,
		80%,
		100% {
			transform: translateY(0);
		}
		40% {
			transform: translateY(-10px);
		}
		60% {
			transform: translateY(-5px);
		}
	}

	/* Animation d'entr√©e pour le modal (si n√©cessaire) */
	.modal-enter-active {
		animation: fadeIn 0.3s ease-out;
	}

	@keyframes fadeIn {
		0% {
			opacity: 0;
			transform: scale(0.95);
		}
		100% {
			opacity: 1;
			transform: scale(1);
		}
	}
</style>

--- End of File ---

--- File Path ---
frontend/src/routes/+page.server.ts

import { error } from '@sveltejs/kit';

/** @type {import('./$types').PageServerLoad} */
export async function load({ locals }) {
  try {
    const { data: disciplinesData, error: disciplinesError } = await locals.supabase
      .from('disciplines')
      .select('id, name');

    if (disciplinesError) {
      console.error('Erreur lors de la r√©cup√©ration des disciplines:', disciplinesError);
      throw error(500, 'Erreur serveur lors de la r√©cup√©ration des disciplines.');
    }

    if (!disciplinesData || disciplinesData.length === 0) {
      console.warn('Aucune discipline trouv√©e.');
      return { articles: [], specialties: [] };
    }

    const disciplines = disciplinesData;
    const specialties = disciplines.map((d) => d.name);

    const articlePromises = disciplines.map(discipline => {
      return locals.supabase
        .from('articles')
        .select(`
          id,
          title,
          content,
          created_at,
          published_at,
          link,
          grade,
          journal,
          article_disciplines!inner (
            discipline_id,
            disciplines (name)
          )
        `)
        .eq('article_disciplines.discipline_id', discipline.id)
        .order('created_at', { ascending: true })
        .limit(3)
        .then(({ data, error: articleError }) => {
           if (articleError) {
             console.error(`Erreur lors de la r√©cup√©ration des articles pour la discipline ${discipline.name} (ID: ${discipline.id}):`, articleError);
             return [];
           }
           const processedArticles = (data || []).map(article => ({
                ...article,
                disciplines: article.article_disciplines.map(ad => ad.disciplines.name)
           }));
           return processedArticles;
        });
    });
    const resultsPerDiscipline = await Promise.all(articlePromises);
    const combinedArticles = resultsPerDiscipline.flat();

    return {
      articles: combinedArticles,
      specialties: specialties
    };

  } catch (err) {
    // Handle potential errors from Promise.all or the initial disciplines fetch
    if (err.status && typeof err.status === 'number') {
        // It's likely a SvelteKit error object, re-throw it
        throw err;
    } else {
        // Otherwise, log and throw a generic 500 error
        console.error('Erreur inattendue dans la fonction load:', err);
        throw error(500, 'Erreur serveur inattendue.');
    }
  }
}
--- End of File ---

--- File Path ---
frontend/src/routes/donations/+page.svelte

<script lang="ts">
    import { env } from '$env/dynamic/public';
    import { i18n } from '$lib/i18n';
    import { loadStripe, type PaymentRequest, type Stripe, type StripeElements, type StripeIbanElement, type StripePaymentElement, type StripePaymentRequest } from '@stripe/stripe-js';
    import { AlertCircle, Check, Copy } from 'lucide-svelte';
    import { onMount, tick } from 'svelte';
    import FeedbackModal from '../../components/FeedbackModal.svelte';

    // --- Config ---
    const stripePublicKey = env.PUBLIC_STRIPE_KEY;
    const DEFAULT_DONATION_EUR = 10;
    const presetAmounts = [5, 10, 20, 50];

    // --- Stripe State ---
    let stripe: Stripe | null = null;
    let elements: StripeElements | null = null; // General elements instance
    let cardElement: StripePaymentElement | null = null; // Specifically for card
    let ibanElement: StripeIbanElement | null = null; // Specifically for SEPA
    let prButton: PaymentRequest | null = null; // For Apple/Google Pay
    let paymentRequest: StripePaymentRequest | null = null;

    // --- Payment Intent State ---
    // Store secrets separately based on the intent type requested
    let clientSecretCard: string | null = $state(null);
    let clientSecretSepa: string | null = $state(null);
    // Keep track of which secret is currently active for element mounting/confirmation
    let activeClientSecret: string | null = $state(null);
    let activePaymentMethodType: 'card' | 'sepa_debit' | 'wallet' | null = $state(null);

    // --- UI & Form State ---
    let isLoadingStripe = $state(true);
    let isProcessingPayment = $state(false); // For confirmations
    let isLoadingPI = $state(false); // For PI creation
    let errorMessage = $state('');
    let successMessage = $state(''); // Not used in this flow (redirects)
    let currentAmount = $state(DEFAULT_DONATION_EUR);
    let customAmountInput = $state('');
    let isCustomAmountConfirmed = $state(false);
    let showCardForm = $state(false);
    let showSepaForm = $state(false);
    let canMakePrPayment = $state(false); // Availability of Apple/Google Pay
    let sepaMandateAccepted = $state(false); // Checkbox for SEPA mandate
    let sepaAccountHolderName = $state(''); // SEPA Account Holder Name
    let isMobile = $state(false); // Track if device is mobile

     // --- Share Text State ---
    let copyStatus = $state<'idle' | 'copied' | 'error'>('idle');
    let copyTimeoutId: ReturnType<typeof setTimeout> | null = null;
    const shareText = `ü©∫ Tu connais Veille M√©dicale ?
C'est un nouvel outil de veille scientifique qui t'envoie tous les articles essentiels de ta sp√©cialit√©.
D√©j√† +1000 soignants inscrits.
Je recommande üëå
üëâ https://veillemedicale.fr`;

    let isFeedbackModalOpen = $state(false);

    // --- Wero State ---
    let showWeroQr = $state(false);
    let weroCopyStatus = $state<'idle' | 'copied' | 'error'>('idle');
    let weroCopyTimeoutId: ReturnType<typeof setTimeout> | null = null;
    const weroPhoneNumber = "+330615063420";
    const weroPaymentLink = "https://share.weropay.eu/p/1/c/bQMWb";

    // --- Lydia State ---
    let showLydia = $state(false);
    let showLydiaQr = $state(false);

    let isCardValid = false; // Track if the card details are valid

    async function handleCopyShareText() {
        if (copyStatus === 'copied') return; // Don't do anything if already copied recently

        try {
            await navigator.clipboard.writeText(shareText);
            copyStatus = 'copied';
            console.log('Share text copied to clipboard');

            // Reset status after a delay
            if (copyTimeoutId) clearTimeout(copyTimeoutId); // Clear previous timeout if any
            copyTimeoutId = setTimeout(() => {
                copyStatus = 'idle';
                copyTimeoutId = null;
            }, 2000); // Reset after 2 seconds

        } catch (err) {
            copyStatus = 'error';
            console.error('Failed to copy share text:', err);
            // Optionally show an error message to the user
             if (copyTimeoutId) clearTimeout(copyTimeoutId);
             copyTimeoutId = setTimeout(() => {
                copyStatus = 'idle';
                copyTimeoutId = null;
            }, 3000); // Show error longer
        }
    }

    // --- Helper Functions ---
    function getAmountInCents(): number {
        if (customAmountInput && isCustomAmountConfirmed) {
            const val = parseFloat(customAmountInput.replace(/,/g, '.'));
            return Math.round(val * 100);
        }
        return currentAmount * 100;
    }

    // --- Create/Update Payment Intent (Handles Different Types) ---
    async function createOrUpdatePI(type: 'card' | 'sepa_debit') {
        const amountCents = getAmountInCents();
        if (amountCents < 50) {
            errorMessage = $i18n.donations.errors.invalidAmount;
            return null; // Don't proceed if amount is invalid
        }

        isLoadingPI = true;
        errorMessage = ''; // Clear previous errors
        let newClientSecret: string | null = null;

        try {
            console.log(`Requesting PI for type: ${type}, amount: ${amountCents}`);
            const res = await fetch('/api/create-donation-intent', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ amount: amountCents, paymentMethodType: type })
            });
            if (!res.ok) {
                 const errorData = await res.json().catch(() => ({ message: `HTTP error ${res.status}` }));
                 throw new Error(errorData.message || `Failed to create PI (${res.status})`);
            }
            const data = await res.json();
            if (!data.clientSecret) throw new Error('Missing clientSecret from API');

            newClientSecret = data.clientSecret;
            // console.log(`Received clientSecret for ${type}:`, newClientSecret);

            // Store the secret based on type
            if (type === 'card') clientSecretCard = newClientSecret;
            if (type === 'sepa_debit') clientSecretSepa = newClientSecret;

            // Update Payment Request Button if it exists (always uses 'card' intent)
            if (type === 'card' && paymentRequest) {
                paymentRequest.update({ total: { label: 'Don Veille M√©dicale', amount: amountCents } });
                console.log("PR Button amount updated.");
            }
             return newClientSecret; // Return the new secret

        } catch (err: any) {
            console.error(`Error creating/updating PI for ${type}:`, err);
            errorMessage = err.message || "Erreur lors de l'initialisation du paiement.";
             // Reset relevant secret on error
             if (type === 'card') clientSecretCard = null;
             if (type === 'sepa_debit') clientSecretSepa = null;
             return null; // Indicate failure
        } finally {
            isLoadingPI = false;
        }
    }

     // --- Initialize Stripe and Check PR Button ---
    onMount(async () => {
         if (!stripePublicKey) { /* ... handle error ... */ return; }
         try {
             isLoadingStripe = true;
             stripe = await loadStripe(stripePublicKey);
             if (!stripe) throw new Error("Stripe failed to load");

             // Check if device is mobile
             isMobile = window.innerWidth < 768;
             
             // Add resize listener to update mobile state
             window.addEventListener('resize', () => {
                 isMobile = window.innerWidth < 768;
             });

             // Check PR Button availability (it will need a 'card' intent later if used)
             await initializePaymentRequestButton(getAmountInCents());

             isLoadingStripe = false;
         } catch (error) {
             console.error("Stripe onMount error:", error);
             errorMessage = "Erreur d'initialisation Stripe.";
             isLoadingStripe = false;
         }
	});

     // --- Initialize Payment Request Button Logic ---
    async function initializePaymentRequestButton(amountCents: number) {
        if (!stripe) {
            console.error("Cannot initialize PR button: Stripe not loaded");
            canMakePrPayment = false;
            return;
        }

        canMakePrPayment = false;
        if (prButton) {
            try {
                prButton.destroy();
            } catch (err) {
                console.warn("Error destroying previous PR button:", err);
            }
        }

        try {
            paymentRequest = stripe.paymentRequest({
                country: 'FR', 
                currency: 'eur',
                total: { label: 'Don Veille M√©dicale', amount: amountCents },
                requestPayerName: true, 
                requestPayerEmail: true, 
                requestShipping: false,
            });

            const result = await paymentRequest.canMakePayment();
            console.log("PR Button availability check result:", result);
            
            if (result) {
                console.log("PR Button available:", result);
                canMakePrPayment = true;
                
                // Handle paymentmethod event
                paymentRequest.on('paymentmethod', async (ev) => {
                    isProcessingPayment = true;
                    errorMessage = '';

                    try {
                        // Ensure we have a *card* client secret for the current amount
                        let secret = clientSecretCard;
                        if (!secret) {
                            console.log("PR Button clicked, fetching 'card' intent...");
                            secret = await createOrUpdatePI('card');
                        }

                        if (!secret || !stripe) {
                            console.error("Cannot confirm PR payment: Stripe or Client Secret missing.");
                            ev.complete('fail');
                            errorMessage = "Erreur lors de la confirmation.";
                            isProcessingPayment = false;
                            return;
                        }

                        // console.log("Confirming PR payment with secret:", secret);
                        const { paymentIntent, error: confirmError } = await stripe.confirmPayment({
                            clientSecret: secret,
                            confirmParams: { payment_method: ev.paymentMethod.id },
                            redirect: 'if_required'
                        });

                        if (confirmError) {
                            console.error("PR confirmation error:", confirmError);
                            errorMessage = confirmError.message || "Erreur de paiement.";
                            ev.complete('fail');
                        } else if (paymentIntent?.status === 'succeeded') {
                            ev.complete('success');
                            window.location.href = `/donation-status?payment_intent=${paymentIntent.id}&payment_intent_client_secret=${secret}&redirect_status=succeeded`;
                        } else if (paymentIntent?.status === 'processing') {
                            ev.complete('success');
                            window.location.href = `/donation-status?payment_intent=${paymentIntent.id}&payment_intent_client_secret=${secret}&redirect_status=processing`;
                        } else {
                            console.warn("PR Payment status unexpected:", paymentIntent?.status);
                            errorMessage = "Statut de paiement inattendu.";
                            ev.complete('fail');
                        }
                    } catch (err) {
                        console.error("Error in PR payment handler:", err);
                        errorMessage = "Une erreur est survenue lors du paiement.";
                        ev.complete('fail');
                    } finally {
                        isProcessingPayment = false;
                    }
                });
            } else {
                console.log("PR Button not available on this device/browser.");
                canMakePrPayment = false;
            }
        } catch (err) {
            console.error("Error initializing PR button:", err);
            canMakePrPayment = false;
        }
    }

    // --- Initialize and Mount Stripe Elements (Card or SEPA) ---
    async function initializeAndMountElement(type: 'card' | 'sepa_debit') {
        const secret = type === 'card' ? clientSecretCard : clientSecretSepa;
        const mountId = type === 'card' ? '#card-element' : '#iban-element';

        // Destroy existing element of the *same type* FIRST
        if (type === 'card' && cardElement) {
            console.log("Destroying previous card element.");
            try { cardElement.destroy(); } catch(e){ console.warn("Error destroying card element", e); }
            cardElement = null;
        }
        if (type === 'sepa_debit' && ibanElement) {
            console.log("Destroying previous iban element.");
            try { ibanElement.destroy(); } catch(e){ console.warn("Error destroying iban element", e); }
            ibanElement = null;
        }
        // Also reset the general elements instance as it's tied to a specific secret
        elements = null;

        // Check dependencies AFTER potential destruction
        if (!stripe || !secret) {
            console.log(`Cannot initialize ${type} element: Stripe or Client Secret missing.`);
            errorMessage = `Erreur: Impossible d'initialiser le formulaire ${type}.`;
            // Ensure form visibility is false if we can't init
            if (type === 'card') showCardForm = false;
            if (type === 'sepa_debit') showSepaForm = false;
            return;
        }

        errorMessage = ''; // Clear errors when attempting to show form
        console.log(`Initializing ${type} element with secret: ${secret.substring(0, 15)}...`); // Log prefix only

        try {
            const appearance = {
                theme: 'night' as const,
                labels: 'floating' as const,
                variables: {
                    colorPrimary: '#ea580c', // orange-600
                    colorBackground: '#1f2937', // gray-800
                    colorText: '#f3f4f6', // gray-100
                    colorDanger: '#ef4444', // red-500
                    fontFamily: 'system-ui, sans-serif',
                    spacingUnit: '4px',
                    borderRadius: '8px' // Corresponds to Tailwind's rounded-lg
                }
            };
            // Create a NEW elements instance with the specific secret for this type
            elements = stripe.elements({ clientSecret: secret, appearance, locale: 'fr' });

            if (type === 'card') {
                cardElement = elements.create('payment', { layout: "tabs" });
                await tick(); // Wait for Svelte DOM update
                cardElement.mount(mountId); // Mount to the specific div
                console.log(`Card element mounted to ${mountId}.`);

                cardElement.on('change', (event) => {
                    isCardValid = event.complete;
                    console.log('Card details are valid:', isCardValid);
                });

            } else { // sepa_debit
                ibanElement = elements.create('iban', {
                    supportedCountries: ['SEPA'],
                    // placeholderCountry: 'FR', // Optional: Sets placeholder format
                    style: { // Optional: Styling if needed beyond Appearance API
                         base: {
                             backgroundColor: '#374151', // gray-700
                             '::placeholder': {
                                 color: '#9ca3af', // gray-400
                             },
                         }
                    }
                });
                await tick(); // Wait for Svelte DOM update
                ibanElement.mount(mountId); // Mount to the specific div
                console.log(`IBAN element mounted to ${mountId}.`);
            }
             // Store the reference correctly
            // This was missing, causing the destroy logic to fail on subsequent clicks
            // No need to explicitly set here, cardElement/ibanElement are already assigned above

        } catch (mountError: any) {
            console.error(`Error creating/mounting ${type} element:`, mountError);
            errorMessage = `Erreur lors de l'affichage du formulaire ${type}. (${mountError.message || ''})`;
             // Ensure element refs are null on error
             if (type === 'card') cardElement = null;
             if (type === 'sepa_debit') ibanElement = null;
             // Hide the form if mounting fails
             if (type === 'card') showCardForm = false;
             if (type === 'sepa_debit') showSepaForm = false;
        }
    }

    // --- UI Actions ---
    async function selectCardPayment() {
        if (isProcessingPayment || isLoadingPI) return;
        showSepaForm = false; // Hide other form
        if (ibanElement) { // Cleanup SEPA if switching
            try { ibanElement.destroy(); } catch(e){ console.warn("Error destroying iban element", e); }
            ibanElement = null;
        }

        const secret = await createOrUpdatePI('card'); // Get/update 'card' intent
        if (secret) {
             activeClientSecret = secret;
             activePaymentMethodType = 'card';
             showCardForm = true; // Set visibility TRUE *before* mounting
             await tick(); // Allow Svelte to render the container div if it wasn't visible
             await initializeAndMountElement('card'); // Mount the card element
        } else {
            showCardForm = false; // Don't show if PI creation failed
        }
    }

    async function selectSepaPayment() {
        if (isProcessingPayment || isLoadingPI) return;
        showCardForm = false; // Hide other form
        if (cardElement) { // Cleanup card if switching
            try { cardElement.destroy(); } catch(e){ console.warn("Error destroying card element", e); }
            cardElement = null;
        }

        const secret = await createOrUpdatePI('sepa_debit'); // Get/update 'sepa' intent
        if (secret) {
            activeClientSecret = secret;
            activePaymentMethodType = 'sepa_debit';
            showSepaForm = true; // Set visibility TRUE *before* mounting
            await tick(); // Allow Svelte to render the container div if it wasn't visible
            await initializeAndMountElement('sepa_debit'); // Mount the IBAN element
        } else {
            showSepaForm = false; // Don't show if PI creation failed
        }
    }

     // --- Mount Payment Request Button when it's actually needed ---
     async function mountPrButton() {
         if (!stripe || !elements || !paymentRequest || !canMakePrPayment || prButton) {
            if (prButton) console.log("PR button already mounted");
            if (!stripe) console.log("Cannot mount PR button: Stripe not loaded");
            if (!elements) console.log("Cannot mount PR button: Elements not initialized");
            if (!paymentRequest) console.log("Cannot mount PR button: PaymentRequest not initialized");
            if (!canMakePrPayment) console.log("Cannot mount PR button: PR not available on this device");
            return;
         }

         try {
            // Ensure we have a card intent first
            let secret = clientSecretCard;
            if (!secret) {
                secret = await createOrUpdatePI('card');
            }
            if (!secret) {
                console.error("Cannot mount PR button without a card client secret.");
                return;
            }

            // console.log("Mounting PR button with secret:", secret);
            // Recreate elements instance if necessary
            if (!elements) {
                elements = stripe.elements({ clientSecret: secret });
            }

            prButton = elements.create('paymentRequestButton', {
                paymentRequest: paymentRequest,
                style: {
                    paymentRequestButton: { type: 'donate', theme: 'dark', height: '48px' },
                },
            });

            await tick();
            const prMountEl = document.getElementById('payment-request-button-mount-point');
            if (prMountEl) {
                prButton.mount(prMountEl);
                console.log("PR button mounted successfully");
            } else {
                console.warn("PR button mount point not found.");
            }
        } catch (err) {
            console.error("Error mounting PR button:", err);
        }
     }
     // Call mountPrButton when the PR button section should become active,
     // potentially after the initial `canMakePrPayment` check resolves true in onMount.
     $effect(() => {
        if(canMakePrPayment && !prButton) {
            mountPrButton();
        }
     })


    // --- Amount Selection/Confirmation (Simplified) ---
    function handleAmountChange() {
        // Reset secrets and hide forms when amount changes, forcing re-selection
        clientSecretCard = null;
        clientSecretSepa = null;
        activeClientSecret = null;
        activePaymentMethodType = null;
        showCardForm = false;
        showSepaForm = false;
        if (cardElement) { cardElement.destroy(); cardElement = null; }
        if (ibanElement) { ibanElement.destroy(); ibanElement = null; }
        if (prButton) { prButton.destroy(); prButton = null; } // Recreate PR button too
        elements = null; // Reset elements instance

        // Update PR button availability check with new amount
        initializePaymentRequestButton(getAmountInCents());

        console.log("Amount changed, secrets and forms reset.");
    }

    function selectAmount(amount: number) {
        if (isLoadingPI || isProcessingPayment) return;
        currentAmount = amount;
        customAmountInput = '';
        isCustomAmountConfirmed = false;
        handleAmountChange(); // Trigger reset and updates
    }

    function handleCustomAmountInput(ev: InputEvent) {
        const input = ev.target as HTMLInputElement;
        const value = input.value.replace(/[^0-9,.]/g, '');
        const parts = value.split(/[,.]/);
        
        if (parts.length > 2) {
            return;
        }
        
        if (parts.length === 2 && parts[1].length > 2) {
            return;
        }
        
        customAmountInput = value;
        isCustomAmountConfirmed = false;
    }

    function confirmCustomAmount() {
        if (isLoadingPI || isProcessingPayment) return;
        const value = customAmountInput.replace(/,/g, '.');
        const numericValue = parseFloat(value);
        if (!isNaN(numericValue) && numericValue >= 0.50) {
            currentAmount = numericValue; // Set the displayed amount
            isCustomAmountConfirmed = true;
            handleAmountChange(); // Trigger reset and updates
        } else {
             errorMessage = $i18n.donations.errors.invalidAmount;
             isCustomAmountConfirmed = false;
        }
    }


    // --- Payment Confirmation ---
    async function handleCardSubmit(event: Event) {
        event.preventDefault();
        if (!stripe || !cardElement || !clientSecretCard || isProcessingPayment || isLoadingPI) {
             errorMessage = "Le formulaire n'est pas pr√™t ou une op√©ration est en cours.";
             return;
        }
        isProcessingPayment = true;
        errorMessage = '';

        // console.log("Confirming Card/PaymentElement payment with secret:", clientSecretCard);
        
        // First submit the elements
        const { error: submitError } = await elements?.submit();
        if (submitError) {
            console.error("Elements submit error:", submitError);
            errorMessage = submitError.message || "Erreur lors de la soumission du formulaire.";
            isProcessingPayment = false;
            return;
        }

        // Then confirm the payment
        const { error } = await stripe.confirmPayment({
            elements, // Use the elements instance associated with cardElement
            clientSecret: clientSecretCard,
            confirmParams: {
                return_url: `${window.location.origin}/donation-status`,
            },
            // No redirect: 'if_required' needed here as confirmPayment handles it
        });

        if (error) {
            console.error("Card confirmation error:", error);
            errorMessage = error.message || "Erreur de paiement.";
            isProcessingPayment = false; // Re-enable form on client-side error
        }
        // If no error, Stripe handles the redirect based on payment status.
        // isProcessingPayment remains true to prevent further clicks.
    }

     async function handleSepaSubmit(event: Event) {
        event.preventDefault();
        if (!stripe || !ibanElement || !clientSecretSepa || !sepaMandateAccepted || !sepaAccountHolderName.trim() || isProcessingPayment || isLoadingPI) {
             if (!sepaMandateAccepted) errorMessage = "Veuillez accepter le mandat SEPA.";
             else if (!sepaAccountHolderName.trim()) errorMessage = "Veuillez entrer le nom du titulaire du compte.";
             else errorMessage = "Le formulaire n'est pas pr√™t ou une op√©ration est en cours.";
             return;
        }
        isProcessingPayment = true;
        errorMessage = '';

        // console.log("Confirming SEPA payment with secret:", clientSecretSepa);
        const { error } = await stripe.confirmSepaDebitPayment(clientSecretSepa, {
            payment_method: {
                sepa_debit: ibanElement,
                billing_details: {
                    name: sepaAccountHolderName.trim(),
                     // Email is strongly recommended for SEPA mandates
                     email: 'email@example.com', // <-- **IMPORTANT**: Get user's actual email
                },
            },
            // return_url is NOT used here directly, status polling or webhooks are needed for SEPA
        });

         if (error) {
            console.error("SEPA confirmation error:", error);
            errorMessage = error.message || "Erreur lors de la soumission du paiement SEPA.";
            isProcessingPayment = false;
        } else {
             // SEPA requires async confirmation. Redirect to a pending/success page immediately.
             // The actual success is confirmed later via webhooks or polling.
             console.log("SEPA payment submitted, confirmation pending.");
             // Redirect to a generic status page, DO NOT assume success yet.
             window.location.href = `/donation-status?payment_intent=${clientSecretSepa.split('_secret_')[0]}&payment_intent_client_secret=${clientSecretSepa}&redirect_status=processing`; // Use processing status
             // successMessage = "Paiement SEPA soumis. La confirmation peut prendre quelques jours.";
             // Keep isProcessingPayment true as we are redirecting
        }
    }

     // Cleanup effect
     $effect(() => {
        return () => {
            if (copyTimeoutId) {
                clearTimeout(copyTimeoutId);
            }
            // Remove resize listener on cleanup
            window.removeEventListener('resize', () => {
                isMobile = window.innerWidth < 768;
            });
        };
    });

    function mountStripeElements() {
        if (!stripe || !clientSecretCard || !clientSecretSepa) return;

        const elements = stripe.elements({
            appearance: {
                theme: 'night',
                variables: {
                    colorPrimary: '#ea580c',
                    colorBackground: '#1f2937',
                    colorText: '#f3f4f6',
                    colorDanger: '#ef4444',
                    fontFamily: 'system-ui, sans-serif',
                    spacingUnit: '4px',
                    borderRadius: '8px'
                }
            },
            clientSecret: clientSecretCard
        });

        if (elements) {
            cardElement = elements.create('payment', {
                layout: 'tabs',
                defaultValues: {
                    billingDetails: {
                        name: 'John Doe',
                        email: 'john@example.com',
                        phone: '+33 6 12 34 56 78',
                        address: {
                            line1: '123 Rue de la Paix',
                            city: 'Paris',
                            postal_code: '75001',
                            country: 'FR'
                        }
                    }
                }
            });
            cardElement.mount('#card-element');

            ibanElement = elements.create('iban', {
                supportedCountries: ['SEPA'],
                placeholderCountry: 'FR',
                style: {
                    base: {
                        fontSize: '16px',
                        color: '#f3f4f6',
                        '::placeholder': {
                            color: '#9ca3af'
                        }
                    }
                }
            });
            ibanElement.mount('#iban-element');
        }
    }

    function openFeedbackModal() {
        isFeedbackModalOpen = true;
    }

    // --- Function to copy Wero phone number ---
    async function handleCopyWeroNumber() {
        if (weroCopyStatus === 'copied') return;
        try {
            await navigator.clipboard.writeText(weroPhoneNumber);
            weroCopyStatus = 'copied';
            if (weroCopyTimeoutId) clearTimeout(weroCopyTimeoutId);
            weroCopyTimeoutId = setTimeout(() => { weroCopyStatus = 'idle'; weroCopyTimeoutId = null; }, 2000);
        } catch (err) {
            console.error('Failed to copy Wero number:', err);
            weroCopyStatus = 'error';
            if (weroCopyTimeoutId) clearTimeout(weroCopyTimeoutId);
            weroCopyTimeoutId = setTimeout(() => { weroCopyStatus = 'idle'; weroCopyTimeoutId = null; }, 3000);
        }
    }
</script>

<svelte:head>
    <title>Soutenez-nous - Veille M√©dicale</title>
    <meta name="description" content="Soutenez Veille M√©dicale par un don, en donnant votre avis ou en partageant l'outil." />
</svelte:head>

<main class="min-h-screen bg-black px-4 py-12 pt-20 text-white">
    <div class="mx-auto max-w-lg">
        <h1 class="mb-4 text-center text-4xl font-bold tracking-tight">üß° Contribuer √† Veille M√©dicale</h1>
        <p class="mb-10 text-center text-xl text-gray-300">Vous aimez notre travail ? Voici trois fa√ßons de nous aider √† aller plus loin.</p>

        <div class="mb-8 space-y-6 rounded-lg bg-gray-800 p-6 shadow-lg md:p-8">
            <!-- Donation Section -->
            <div>
                <h2 class="mb-4 text-lg font-medium">üíù Faire un don</h2>
                <p class="mb-4 text-sm text-gray-400">Votre soutien financier aide directement les d√©veloppeurs √† am√©liorer l'outil. 100% des dons sont revers√©s √† l'√©quipe technique.</p>
                <div class="grid grid-cols-2 gap-3 sm:grid-cols-4">
                    {#each presetAmounts as amount}
                        <button type="button" on:click={() => selectAmount(amount)}
                            class="rounded-md border-2 px-4 py-3 text-center font-medium transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-gray-800"
                            class:border-orange-500={currentAmount === amount && !customAmountInput}
                            class:bg-orange-600={currentAmount === amount && !customAmountInput}
                            class:text-white={currentAmount === amount && !customAmountInput}
                            class:border-gray-600={!(currentAmount === amount && !customAmountInput)}
                            class:hover:border-orange-400={currentAmount !== amount || !!customAmountInput}
                            class:hover:bg-gray-700={currentAmount !== amount || !!customAmountInput}
                            class:text-gray-300={!(currentAmount === amount && !customAmountInput)}
                            disabled={isProcessingPayment || isLoadingPI}>
                            {amount} ‚Ç¨
                        </button>
                    {/each}
                </div>
                <div class="mt-4 flex items-center gap-2">
                    <div class="relative flex-grow">
                        <span class="pointer-events-none absolute inset-y-0 left-0 flex items-center pl-3 text-gray-400">‚Ç¨</span>
                        <input type="text" id="custom-amount" inputmode="decimal"
                            placeholder="Autre montant" value={customAmountInput}
                            on:input={handleCustomAmountInput}
                            class="w-full rounded-md border-2 bg-gray-700 py-3 pl-8 pr-4 text-white placeholder-gray-400 transition-colors duration-200 focus:z-10 focus:border-orange-500 focus:ring-2 focus:ring-orange-500 focus:ring-offset-0"
                            class:border-orange-500={customAmountInput !== '' && isCustomAmountConfirmed}
                            class:border-gray-600={customAmountInput === '' || !isCustomAmountConfirmed}
                            class:border-yellow-500={customAmountInput !== '' && !isCustomAmountConfirmed}
                            disabled={isProcessingPayment || isLoadingPI} />
                    </div>
                    <button type="button" on:click={confirmCustomAmount}
                        class="shrink-0 rounded-md border-2 bg-gray-600 px-4 py-3 font-medium text-white transition-colors hover:bg-gray-500 focus:z-10 focus:outline-none focus:ring-2 focus:ring-orange-500 focus:ring-offset-0 disabled:cursor-not-allowed disabled:opacity-60"
                        class:border-orange-500={customAmountInput !== '' && isCustomAmountConfirmed}
                        class:border-gray-600={customAmountInput === ''}
                        class:border-yellow-500={customAmountInput !== '' && !isCustomAmountConfirmed}
                        disabled={isProcessingPayment || isLoadingPI || customAmountInput === '' || (customAmountInput !== '' && parseFloat(customAmountInput.replace(/,/g, '.')) < 0.50) || isCustomAmountConfirmed}
                        title="Valider ce montant">
                        OK
                    </button>
                </div>
                {#if errorMessage}
                    <p class="mt-2 text-sm text-red-400 flex items-center gap-1"><AlertCircle class="w-4 h-4"/> {errorMessage}</p>
                {/if}
            </div>

            <hr class="border-gray-700"/>

            <!-- Payment Method Section -->
            <div>
                <p class="mb-4 text-lg font-medium">‚úÖ Choisissez votre m√©thode de paiement</p>
                {#if isLoadingPI}
                    <div class="flex justify-center items-center gap-2 text-gray-400">
                        <svg class="h-5 w-5 animate-spin" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24"> <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle> <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path> </svg>
                        <span>Chargement...</span>
                    </div>
                {:else}
                    <div class="space-y-3">
                        {#if isMobile}
                            {#if canMakePrPayment}
                                <div id="payment-request-button-mount-point" class={!prButton ? 'h-[48px] bg-gray-700 animate-pulse rounded-lg' : ''}>
                                    <!-- PR Button will be mounted here by `mountPrButton` -->
                                </div>
                            {:else if !isLoadingStripe}
                                <div class="rounded-md border border-yellow-600 bg-yellow-900/30 p-3 text-sm text-yellow-300 flex gap-2 items-start" role="alert">
                                    <AlertCircle aria-hidden="true" class="h-4 w-4 flex-shrink-0 mt-0.5" />
                                    <div>
                                        <span class="font-medium">Paiement rapide indisponible</span><br>
                                        <span class="text-xs text-yellow-400/90">
                                            Google Pay / Apple Pay n'est pas activ√© ou n'est pas compatible avec ce navigateur/appareil.
                                            Raisons possibles : absence de carte enregistr√©e, navigation priv√©e, ou certaines extensions (ex: bloqueurs de publicit√©s).
                                            Vous pouvez essayer un autre navigateur ou v√©rifier vos param√®tres.
                                        </span>
                                    </div>
                                </div>
                            {/if}
                        {/if}

                        <!-- Card Payment Option -->
                        <button type="button" on:click={selectCardPayment}
                            class="w-full rounded-lg border-2 p-4 text-left transition-colors"
                            class:border-orange-500={showCardForm} class:bg-gray-600={showCardForm}
                            class:border-gray-600={!showCardForm} class:bg-gray-700={!showCardForm}
                            class:hover:border-orange-500={!showCardForm} class:hover:bg-gray-600={!showCardForm}
                            disabled={isProcessingPayment}>
                            <div class="flex items-center justify-between">
                                <div class="flex items-center gap-3">
                                    <span class="text-2xl">üí≥</span>
                                    <h3 class="font-semibold">Carte bancaire</h3>
                                </div>
                                <span class="text-gray-400">{showCardForm ? '‚ñ≤' : '‚ñº'}</span>
                            </div>
                        </button>

                        {#if showCardForm}
                            <form on:submit={handleCardSubmit} class="mt-4 space-y-4 rounded-lg border border-gray-700 p-4">
                                <div id="card-element">
                                    {#if !cardElement}<p class="text-sm text-gray-400">Chargement du formulaire de carte...</p>{/if}
                                </div>
                                <button type="submit"
                                    class="w-full rounded-lg bg-orange-600 px-6 py-3 text-lg font-semibold text-white shadow-md transition-all duration-300 hover:bg-orange-700 disabled:cursor-not-allowed disabled:bg-gray-600 disabled:opacity-70">
                                    {#if isProcessingPayment && activePaymentMethodType === 'card'}
                                        <span class="flex items-center justify-center">
                                            <svg class="mr-2 h-5 w-5 animate-spin" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24"> <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle> <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path> </svg>
                                            Traitement...
                                        </span>
                                    {:else}
                                        Payer {getAmountInCents() / 100} ‚Ç¨ par Carte
                                    {/if}
                                </button>
                            </form>
                        {/if}

                        <!-- SEPA Payment Option -->
                        <button type="button" on:click={selectSepaPayment}
                            class="w-full rounded-lg border-2 p-4 text-left transition-colors"
                            class:border-indigo-500={showSepaForm} class:bg-gray-600={showSepaForm}
                            class:border-gray-600={!showSepaForm} class:bg-gray-700={!showSepaForm}
                            class:hover:border-indigo-500={!showSepaForm} class:hover:bg-gray-600={!showSepaForm}
                            disabled={isProcessingPayment}>
                            <div class="flex items-center justify-between">
                                <div class="flex items-center gap-3">
                                    <span class="text-2xl">üè¶</span>
                                    <h3 class="font-semibold">Pr√©l√®vement SEPA (IBAN)</h3>
                                </div>
                                <span class="text-gray-400">{showSepaForm ? '‚ñ≤' : '‚ñº'}</span>
                            </div>
                        </button>

                        {#if showSepaForm}
                            <form on:submit={handleSepaSubmit} class="mt-4 space-y-4 rounded-lg border border-gray-700 p-4">
                                <div>
                                    <label for="sepa-name" class="block text-sm font-medium text-gray-300 mb-1">Nom du titulaire du compte</label>
                                    <input type="text" id="sepa-name" bind:value={sepaAccountHolderName} required
                                        class="w-full rounded-md border-2 bg-gray-700 py-3 px-4 text-white placeholder-gray-400 transition-colors duration-200 focus:z-10 focus:border-indigo-500 focus:ring-2 focus:ring-indigo-500 focus:ring-offset-0" />
                                </div>
                                <div>
                                    <label for="iban-element" class="block text-sm font-medium text-gray-300 mb-1">IBAN</label>
                                    <div class="relative w-full">
                                        <div class="w-full rounded-md border-2 border-gray-600 bg-[#374151] py-3 px-4 text-white transition-colors duration-200 focus-within:border-indigo-500 focus-within:ring-2 focus-within:ring-indigo-500 focus-within:ring-offset-0">
                                            <div id="iban-element" class="w-full">
                                                {#if !ibanElement}<p class="text-sm text-gray-400">Chargement du formulaire IBAN...</p>{/if}
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div class="flex items-start space-x-2">
                                    <input type="checkbox" id="sepa-mandate" bind:checked={sepaMandateAccepted} required
                                        class="h-4 w-4 rounded border-gray-600 bg-gray-700 text-indigo-600 focus:ring-indigo-500 mt-1"/>
                                    <label for="sepa-mandate" class="text-xs text-gray-400">
                                        En fournissant votre IBAN et en confirmant ce paiement, vous autorisez Veille M√©dicale et Stripe, notre prestataire de services de paiement, √† envoyer des instructions √† votre banque pour d√©biter votre compte conform√©ment √† ces instructions. Vous avez droit √† un remboursement de la part de votre banque selon les termes et conditions de votre convention avec votre banque. Une demande de remboursement doit √™tre pr√©sent√©e dans les 8 semaines suivant la date √† laquelle votre compte a √©t√© d√©bit√©. Vos droits sont expliqu√©s dans un relev√© que vous pouvez obtenir aupr√®s de votre banque.
                                    </label>
                                </div>
                                <button type="submit"
                                    class="w-full rounded-lg bg-indigo-600 px-6 py-3 text-lg font-semibold text-white shadow-md transition-all duration-300 hover:bg-indigo-700 disabled:cursor-not-allowed disabled:bg-gray-600 disabled:opacity-70">
                                    {#if isProcessingPayment && activePaymentMethodType === 'sepa_debit'}
                                        <span class="flex items-center justify-center">
                                            <svg class="mr-2 h-5 w-5 animate-spin" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24"> <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle> <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path> </svg>
                                            Soumission...
                                        </span>
                                    {:else}
                                        Payer {getAmountInCents() / 100} ‚Ç¨ par Pr√©l√®vement SEPA
                                    {/if}
                                </button>
                            </form>
                        {/if}

                        <!-- Wero Payment Option Button -->
                        <button type="button" on:click={() => showWeroQr = !showWeroQr}
                            class="w-full rounded-lg border-2 p-4 text-left transition-colors"
                            class:border-green-500={showWeroQr} class:bg-gray-600={showWeroQr}
                            class:border-gray-600={!showWeroQr} class:bg-gray-700={!showWeroQr}
                            class:hover:border-green-500={!showWeroQr} class:hover:bg-gray-600={!showWeroQr}
                            disabled={isProcessingPayment}>
                            <div class="flex items-center justify-between">
                                <div class="flex items-center gap-3">
                                    <img
                                        src="https://wero-wallet.eu/favicon.ico"
                                        alt="Wero"
                                        class="h-6 w-6"
                                    />
                                    <h3 class="font-semibold">Wero</h3>
                                </div>
                                <span class="text-gray-400">{showWeroQr ? '‚ñ≤' : '‚ñº'}</span>
                            </div>
                        </button>

                        <!-- Enhanced Wero Section (conditional display) -->
                        {#if showWeroQr}
                            <div class="mt-4 space-y-4 rounded-lg border border-gray-700 p-4 bg-gray-700/30">
                                <div class="flex flex-col items-center gap-4">
                                    <!-- QR Code -->
                                    <img src="/image.png" alt="Wero QR Code" class="w-48 h-48 object-contain rounded-md border border-gray-600" />

                                    <!-- Instructions -->
                                    <div class="text-center space-y-3">
                                        <p class="text-sm text-gray-200">
                                            <strong class="text-white block mb-1">Option 1: Scan QR Code</strong>
                                            Utilisez votre application <strong class="text-white">Wero</strong> ou votre <strong class="text-white">application bancaire compatible</strong> pour scanner le qrcode ci-dessus.
                                        </p>
                                        <div class="border-t border-gray-600 pt-3 mt-3">
                                            <p class="text-sm text-gray-400 mb-2">
                                                <strong class="text-white block mb-1">Option 2 (si le scan √©choue ou si demand√©):</strong>
                                                 Utilisez le num√©ro de t√©l√©phone suivant :
                                            </p>
                                            <!-- Phone number with copy button -->
                                            <div class="relative inline-flex items-center justify-center gap-2 bg-gray-900/50 p-2 rounded-md border border-gray-600 max-w-xs mx-auto">
                                                <span class="font-mono text-base text-teal-300 select-all" id="wero-number">{weroPhoneNumber}</span>
                                                <button
                                                    type="button"
                                                    title="Copier le num√©ro"
                                                    on:click={handleCopyWeroNumber}
                                                    class="p-1 rounded-md text-gray-400 hover:text-white hover:bg-gray-600 focus:outline-none focus:ring-2 focus:ring-teal-500 focus:ring-offset-1 focus:ring-offset-gray-800 disabled:opacity-50"
                                                    disabled={weroCopyStatus === 'copied'}
                                                >
                                                    {#if weroCopyStatus === 'copied'}
                                                        <Check class="h-4 w-4 text-green-400" />
                                                    {:else if weroCopyStatus === 'error'}
                                                        <Copy class="h-4 w-4 text-red-400" />
                                                    {:else}
                                                        <Copy class="h-4 w-4" />
                                                    {/if}
                                                </button>
                                                 {#if weroCopyStatus === 'copied'}
                                                    <span class="text-xs text-green-400 font-medium absolute -bottom-5 left-1/2 transform -translate-x-1/2 whitespace-nowrap bg-gray-900 px-1 rounded">Copi√©!</span>
                                                 {/if}
                                                 {#if weroCopyStatus === 'error'}
                                                    <span class="text-xs text-red-400 font-medium absolute -bottom-5 left-1/2 transform -translate-x-1/2 whitespace-nowrap bg-gray-900 px-1 rounded">Erreur</span>
                                                 {/if}
                                            </div>
                                        </div>
                                        <div class="border-t border-gray-600 pt-3 mt-3">
                                             <p class="text-sm text-gray-400">
                                                <strong class="text-white block mb-1">Puis ouvrez ce Lien Direct</strong>
                                                <a href={weroPaymentLink} target="_blank" rel="noopener noreferrer"
                                                    class="text-teal-400 hover:text-teal-300 underline inline-flex items-center gap-1">
                                                    Cliquez ici pour payer via Wero
                                                    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-3 h-3"><path stroke-linecap="round" stroke-linejoin="round" d="M13.5 6H5.25A2.25 2.25 0 0 0 3 8.25v10.5A2.25 2.25 0 0 0 5.25 21h10.5A2.25 2.25 0 0 0 18 18.75V10.5m-10.5 6L21 3m0 0h-5.25M21 3v5.25" /></svg>
                                                </a>
                                            </p>
                                         </div>
                                    </div>
                                </div>
                            </div>
                        {/if}

                        <!-- Lydia Payment Option -->
                        <button type="button" on:click={() => showLydiaQr = !showLydiaQr}
                            class="w-full rounded-lg border-2 p-4 text-left transition-colors"
                            class:border-indigo-500={showLydiaQr} class:bg-gray-600={showLydiaQr}
                            class:border-gray-600={!showLydiaQr} class:bg-gray-700={!showLydiaQr}
                            class:hover:border-indigo-500={!showLydiaQr} class:hover:bg-gray-600={!showLydiaQr}
                            disabled={isProcessingPayment}>
                            <div class="flex items-center justify-between">
                                <div class="flex items-center gap-3">
                                    <img 
                                        src="https://cdn.newfinancer.com/wp-content/uploads/2022/09/lydia-logo-150x150.png" 
                                        alt="Lydia" 
                                        class="h-6 w-6"
                                    />
                                    <h3 class="font-semibold">Lydia</h3>
                                </div>
                                <span class="text-gray-400">{showLydiaQr ? '‚ñ≤' : '‚ñº'}</span>
                            </div>
                        </button>

                        {#if showLydiaQr}
                            <div class="mt-4 space-y-4 rounded-lg border border-gray-700 p-4">
                                <div class="flex flex-col items-center">
                                    <img src="/qrCodeLydia.png" alt="Lydia QR Code" class="w-48 h-48 object-contain" />
                                    <p class="mt-4 text-sm text-gray-400 text-center">
                                        Scannez ce QR code avec l'application Lydia ou votre application bancaire pour effectuer votre don.
                                    </p>
                                    <a href="https://pots.lydia.me/collect/pots?id=54433-veillemedicale" target="_blank" rel="noopener noreferrer" 
                                        class="mt-2 text-sm text-green-400 hover:text-green-300 underline">
                                        Ou cliquez ici pour payer avec Lydia
                                    </a>
                                </div>
                            </div>
                        {/if}
                    </div>
                {/if}
            </div>
        </div>

        <!-- Other Ways to Contribute -->
        <div class="mt-8 space-y-6">
            <!-- Feedback Section -->
            <div class="rounded-lg bg-gray-800 p-6 shadow-lg md:p-8">
                <h2 class="mb-4 text-lg font-medium">üíå Faire un retour</h2>
                <p class="mb-4 text-sm text-gray-400">Votre avis compte ! Chaque retour est une source pr√©cieuse d'id√©es pour am√©liorer l'outil.</p>
                <button
                    on:click={openFeedbackModal}
                    class="inline-flex items-center gap-2 rounded-lg bg-blue-600 px-5 py-2.5 text-sm font-semibold text-white transition-colors duration-200 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 focus:ring-offset-gray-800"
                >
                    üíå Faire un retour
                </button>
            </div>

            <!-- Share Section -->
            <div class="rounded-lg bg-gray-800 p-6 shadow-lg md:p-8">
                <h2 class="mb-4 text-lg font-medium">üì£ Partager l'outil</h2>
                <p class="mb-3 text-sm text-gray-400">Aidez vos coll√®gues, internes, et amis soignants √† rester √† jour.</p>
                <p class="mb-2 text-sm font-semibold">üëâ Texte √† copier-coller :</p>
                <pre class="mb-3 whitespace-pre-wrap rounded-md bg-gray-700 p-3 font-mono text-xs text-gray-200">{shareText}</pre>
                <button
                    type="button"
                    class="inline-flex items-center gap-2 rounded-lg border border-teal-500 px-4 py-2 text-sm font-medium text-teal-400 transition-colors duration-150 hover:bg-teal-500/10 focus:outline-none focus:ring-2 focus:ring-teal-500 focus:ring-offset-2 focus:ring-offset-gray-800 disabled:opacity-50"
                    on:click={handleCopyShareText}
                    disabled={copyStatus === 'copied'}
                >
                    {#if copyStatus === 'copied'}
                        <Check class="h-4 w-4 text-green-500" />
                        Copi√© !
                    {:else if copyStatus === 'error'}
                        <Copy class="h-4 w-4 text-red-500" />
                        Erreur
                    {:else}
                        <Copy class="h-4 w-4" />
                        Copier le texte
                    {/if}
                </button>
            </div>
        </div>
    </div>

    <FeedbackModal bind:isOpen={isFeedbackModalOpen} on:close={() => isFeedbackModalOpen = false} />
</main>
--- End of File ---

--- File Path ---
frontend/src/routes/+page.svelte

<!--- File Path: frontend/src/routes/+page.svelte --->
<script lang="ts">
	// --- IMPORTS ---
	import { goto } from '$app/navigation';
	import ArticleImmersiveModal from '$lib/components/articles/ArticleImmersiveModal.svelte';
	import * as Select from '$lib/components/ui/select/index.js';
	import userProfileStore from '$lib/stores/user';
	import EmbaseSvg from '../lib/svg/EmbaseSvg.svelte';
// Import modal
	import type { Article } from '$lib/utils/articleUtils'; // Import Article type
	// Import Lucide icons for features & pipeline
	import { Brain, Clock, FileText, Link, Mail, Users, Zap } from 'lucide-svelte'; // Added Brain, Users, Mail for pipeline

	// --- PROPS & STATE ---
	const { data } = $props();

	let articles = $state(data.articles || []);
	let specialties = $state(data.specialties || []);
	let selectedSpecialty = $state(data.specialties?.[0] || '');
	let immersiveArticle = $state<Article | null>(null);
	let isPlaying = $state(false);

	// --- DERIVED & COMPUTED ---
	specialties = specialties.sort((a, b) => a.localeCompare(b, 'fr', { sensitivity: 'base' }));
	const triggerContent = $derived(
		specialties.find((s) => s === selectedSpecialty) ?? 'Choisissez une sp√©cialit√©'
	);

	// --- UTILITY FUNCTIONS (unchanged) ---
	function handleVeilleClick(event: MouseEvent) {
		event.preventDefault();
		if (!$userProfileStore) { goto('/signup'); } else { goto('/ma-veille'); }
	}
	function formatTitle(title: string | undefined): string {
		if (!title) return '';
		const words = title.toLowerCase().split(' ');
		if (words.length === 0) return '';
		words[0] = words[0].charAt(0).toUpperCase() + words[0].slice(1);
		return words.join(' ');
	}
	interface ContentSection { emoji: string; title: string; content: string[]; }
	function parseContent(content: string | undefined): ContentSection[] {
		if (!content || typeof content !== 'string') return [];
		const sections: ContentSection[] = [];
		let currentSection: ContentSection = { emoji: '', title: '', content: [] };
		const lines = content.split('\n');
		let inSection = false;
		for (const line of lines) {
			if (line.trim().startsWith('## üìù') || line.trim().startsWith('## üìå') || line.trim().startsWith('## üß™') || line.trim().startsWith('## üìä') || line.trim().startsWith('## ü©∫') || line.trim().startsWith('## üìñ')) {
				if (inSection && (currentSection.title || currentSection.content.length > 0)) { sections.push(currentSection); }
				inSection = true;
				const parts = line.trim().replace(/^##\s*/, '').split(' ');
				const emoji = parts[0] || 'üìù';
				const titleParts = parts.slice(1);
				currentSection = { emoji: emoji, title: titleParts.join(' ').trim(), content: [] };
			} else if (line.trim() && inSection) {
                if (line.trim() !== '---' && line.trim() !== '***' && line.trim() !== '___') { currentSection.content.push(line.trim()); }
			}
		}
		if (inSection && (currentSection.title || currentSection.content.length > 0)) { sections.push(currentSection); }
		return sections;
	}
	function extractTitleEmoji(content: string | undefined): string {
		if (!content || typeof content !== 'string') return 'üìù';
		const lines = content.split('\n');
		for (const line of lines) {
            if (line.trim().startsWith('# üìù') || line.trim().startsWith('# üìå') || line.trim().startsWith('# üß™') || line.trim().startsWith('# üìä') || line.trim().startsWith('# ü©∫') || line.trim().startsWith('# üìñ')) {
				const parts = line.trim().split(' ');
                if(parts.length > 1) { return parts[1] || 'üìù'; }
			}
		}
		return 'üìù';
	}
	function formatDate(publishedAt: string | undefined): string {
		if (!publishedAt) return 'Non sp√©cifi√©e';
		try {
			const date = new Date(publishedAt);
			if (isNaN(date.getTime())) { return 'Date invalide'; }
			return `${date.getDate().toString().padStart(2, '0')}/${(date.getMonth() + 1).toString().padStart(2, '0')}/${date.getFullYear()}`;
		} catch (e) { console.error('Error formatting date:', publishedAt, e); return 'Date invalide'; }
	}
	function openImmersive(article: Article) { immersiveArticle = article; document.body.classList.add('overflow-hidden'); }
	function closeImmersive() { immersiveArticle = null; document.body.classList.remove('overflow-hidden'); }
	function toggleAudio() {
		const audio = document.getElementById('myAudio') as HTMLAudioElement | null;
		if (!audio) return;
		if (isPlaying) { audio.pause(); } else { audio.play().catch(error => console.error("Audio playback error:", error)); }
		isPlaying = !isPlaying;
	}

	// --- EFFECTS (unchanged) ---
	$effect(() => {
		let filtered: Article[] = data.articles || [];
		// Keep filtering logic if needed for the bottom section
		if (selectedSpecialty) {
			filtered = filtered.filter((article) => article.disciplines?.includes(selectedSpecialty));
		}
		articles = filtered;
	});

</script>

<svelte:head>
	<title>Veille M√©dicale - Votre veille scientifique simplifi√©e</title>
	<meta name="description" content="Restez √† jour avec les derni√®res √©tudes de votre sp√©cialit√©. R√©sum√©s clairs, acc√®s direct aux articles. Con√ßu par et pour les professionnels de sant√©." />
    <link rel="preconnect" href="https://fonts.googleapis.com" />
	<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
	<link
		href="https://fonts.googleapis.com/css2?family=Montserrat:ital,wght@0,100..900;1,100..900&display=swap"
		rel="stylesheet"
	/>
</svelte:head>

<main class="relative flex min-h-screen flex-col bg-black text-white font-sans">

	<!-- ======================== -->
	<!--      NEW HERO SECTION    -->
	<!-- ======================== -->
	<section class="relative pt-28 pb-24 md:pt-28 md:pb-24 overflow-hidden bg-gradient-to-b from-gray-950 via-black to-black">
        <div class="absolute inset-0 bg-center [mask-image:linear-gradient(180deg,white,rgba(255,255,255,0))] opacity-5"></div>
        <div class="container relative z-10 mx-auto max-w-5xl px-4 text-center">

            <!-- Main Headline -->
            <h1 class="text-4xl font-extrabold tracking-tight text-white sm:text-5xl md:text-6xl lg:text-7xl">
                La <span class="text-teal-400">veille scientifique</span>, simplifi√©e.
            </h1>

            <!-- Core Problem -->
			<p class="mt-8 text-xl font-medium text-gray-400 sm:text-lg md:text-xl">
				Trop d‚Äô<span class="font-semibold text-white">√©tudes</span> ? Pas assez de <span class="font-semibold text-white">temps</span> ?
			</p>

			<!-- Sub-headline -->
			<p class="mt-6 max-w-xl mx-auto text-lg leading-8 text-gray-300 sm:text-xl md:text-2xl">
				Recevez les r√©sum√©s essentiels des derni√®res <span class="font-semibold text-teal-400"> √©tudes</span> et <span class="font-semibold text-teal-400">recommandations</span> de <span class="font-semibold text-teal-400">votre sp√©cialit√©</span>.
			</p>


             <!-- Audio Button -->
            <div class="mt-10 mb-12 flex justify-center">
                <audio id="myAudio" preload="auto">
                    <source src="/audio/welcome.m4a" type="audio/mp4" />
                    Votre navigateur ne supporte pas l'√©l√©ment audio.
                </audio>
                <button
                    on:click={toggleAudio}
                    class="play-button group relative flex items-center gap-2.5 rounded-full bg-gradient-to-r from-blue-600 to-teal-600 px-6 py-2.5 text-sm font-semibold text-white shadow-lg transition-all duration-300 hover:shadow-xl focus:outline-none focus:ring-2 focus:ring-teal-400 focus:ring-offset-2 focus:ring-offset-black"
                    aria-label={isPlaying ? 'Mettre en pause la pr√©sentation audio' : '√âcouter la pr√©sentation audio'}
                >
                    <span class="text-xl transition-transform duration-300 group-hover:scale-110">
                        {#if isPlaying}
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor"><path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zM7 8a1 1 0 012 0v4a1 1 0 11-2 0V8zm5-1a1 1 0 00-1 1v4a1 1 0 102 0V8a1 1 0 00-1-1z" clip-rule="evenodd" /></svg>
                        {:else}
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor"><path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM9.555 7.168A1 1 0 008 8v4a1 1 0 001.555.832l3-2a1 1 0 000-1.664l-3-2z" clip-rule="evenodd" /></svg>
                        {/if}
                    </span>
                    <span class="whitespace-nowrap">{isPlaying ? 'Lecture en cours...' : 'D√©couvrez Veille en 1 min'}</span>
                </button>
            </div>

            <!-- Main CTA Button -->
            <div class="mt-10">
                <a
                    href={$userProfileStore ? '/ma-veille' : '/signup'}
                    on:click={handleVeilleClick}
                    class="group inline-flex items-center justify-center gap-2 rounded-full bg-orange-600 px-8 py-3 text-base font-semibold text-white shadow-lg transition-all duration-300 hover:bg-orange-700 hover:shadow-xl focus:outline-none focus:ring-2 focus:ring-orange-500 focus:ring-offset-2 focus:ring-offset-black transform hover:scale-105"
                >
                    <span>{$userProfileStore ? 'Acc√©der √† Ma Veille' : 'S‚Äôinscrire Gratuitement'}</span>
                    <svg class="h-5 w-5 transition-transform duration-300 group-hover:translate-x-1" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 8l4 4m0 0l-4 4m4-4H3"></path></svg>
                </a>
            </div>

            <!-- Pipeline Visualization Removed from Hero -->

        </div>
	</section>

    <!-- Feature Highlights Section -->
    <section class="py-16 sm:py-20 bg-gray-900">
        <div class="mx-auto max-w-5xl px-4 sm:px-6 lg:px-8">
            <div class="grid grid-cols-1 gap-x-6 gap-y-10 sm:grid-cols-2 lg:grid-cols-4 lg:gap-x-8">
                <div class="flex flex-col items-center text-center group">
                    <div class="flex h-12 w-12 items-center justify-center rounded-lg bg-teal-500/10 border border-teal-500/30 mb-4 feature-icon">
                        <Zap class="h-6 w-6 text-teal-400" />
                    </div>
                    <h3 class="text-lg font-semibold text-white">Restez √† jour</h3>
                    <p class="mt-1 text-sm text-gray-400">Recevez l'essentiel sur votre mail.</p>
                </div>
                <div class="flex flex-col items-center text-center group">
                     <div class="flex h-12 w-12 items-center justify-center rounded-lg bg-teal-500/10 border border-teal-500/30 mb-4 feature-icon">
                        <Clock class="h-6 w-6 text-teal-400" />
                    </div>
                    <h3 class="text-lg font-semibold text-white">Gagnez du temps</h3>
                    <p class="mt-1 text-sm text-gray-400">Synth√®ses claires, lecture rapide.</p>
                </div>
                <div class="flex flex-col items-center text-center group">
                    <div class="flex h-12 w-12 items-center justify-center rounded-lg bg-teal-500/10 border border-teal-500/30 mb-4 feature-icon">
                        <FileText class="h-6 w-6 text-teal-400" />
                    </div>
                    <h3 class="text-lg font-semibold text-white">L'essentiel</h3>
                    <p class="mt-1 text-sm text-gray-400">Articles et recommandations.</p>
                </div>
                 <div class="flex flex-col items-center text-center group">
                    <div class="flex h-12 w-12 items-center justify-center rounded-lg bg-teal-500/10 border border-teal-500/30 mb-4 feature-icon">
                        <Link class="h-6 w-6 text-teal-400" />
                    </div>
                    <h3 class="text-lg font-semibold text-white">Acc√®s direct</h3>
                    <p class="mt-1 text-sm text-gray-400">Lien vers l'article original.</p>
                </div>
            </div>
        </div>
    </section>
	<!-- ======================== -->
	<!--   END NEW HERO SECTION   -->
	<!-- ======================== -->
	<div class="bg-gray-900 py-16 sm:py-20">
		<div class="mx-auto max-w-5xl px-4 sm:px-6 lg:px-8">
			<h2 class="text-center text-3xl font-bold tracking-tight text-white mb-12 sm:mb-16">Veille M√©dicale en chiffres</h2>
			<dl class="grid grid-cols-1 gap-y-10 gap-x-6 text-center sm:grid-cols-3 lg:gap-x-8">
				<div class="flex flex-col items-center">
					<dt class="text-base leading-7 text-gray-400">Sp√©cialit√©s couvertes</dt>
					<dd class="order-first text-4xl font-semibold tracking-tight text-teal-400 sm:text-5xl">+35</dd>
					<p class="mt-1 text-s text-gray-500">(et +300 sous-sp√©cialit√©s)</p> <!-- Changed text-s to text-xs -->
				</div>
				<div class="flex flex-col items-center">
					<dt class="text-base leading-7 text-gray-400">Professionnels inscrits</dt>
					<dd class="order-first text-4xl font-semibold tracking-tight text-teal-400 sm:text-5xl">+1000</dd>
				</div>
				<div class="flex flex-col items-center">
					<dt class="text-base leading-7 text-gray-400">Recherches hebdomadaires</dt>
					<dd class="order-first text-4xl font-semibold tracking-tight text-teal-400 sm:text-5xl">+60 000</dd>
				</div>
			</dl>
		</div>
	</div>

    <!-- ======================== -->
	<!--    NOTRE PROCESSUS       -->
	<!-- ======================== -->
	<section class="py-16 sm:py-20 bg-gray-900">
        <div class="mx-auto max-w-6xl px-4 sm:px-6 lg:px-8 text-center">
            <h2 class="text-3xl font-bold tracking-tight text-white mb-12 sm:mb-16">
                Processus en 4 √©tapes
            </h2>
            <div class="flex flex-col md:flex-row md:items-start md:justify-between gap-y-8 md:gap-x-4 lg:gap-x-6">
                <!-- Step 1 -->
                <div class="flex-1 flex flex-col items-center text-center">
                    <div class="flex h-12 w-12 items-center justify-center rounded-full bg-teal-500/10 border border-teal-500/30 mb-4 shrink-0">
                        <FileText class="h-6 w-6 text-teal-400" />
                    </div>
                    <h3 class="text-lg font-semibold text-white mb-1">1. S√©lection des Sources</h3>
                    <p class="text-sm text-gray-400">Notre algorithme s√©lectionne les meilleures √©tudes issues de PubMed et Cochrane.</p>
                </div>

                <!-- Arrow for mobile -->
                <div class="md:hidden flex justify-center items-center text-teal-400 my-2">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-8 w-8" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
                        <path stroke-linecap="round" stroke-linejoin="round" d="M16 17l-4 4m0 0l-4-4m4 4V3" />
                    </svg>
                </div>
                <!-- Arrow for desktop -->
                <div class="hidden md:flex justify-center items-center text-teal-400 shrink-0 pt-5">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-8 w-8 lg:h-10 lg:w-10" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
                        <path stroke-linecap="round" stroke-linejoin="round" d="M17 8l4 4m0 0l-4 4m4-4H3" />
                    </svg>
                </div>

                <!-- Step 2 -->
                <div class="flex-1 flex flex-col items-center text-center">
                    <div class="flex h-12 w-12 items-center justify-center rounded-full bg-teal-500/10 border border-teal-500/30 mb-4 shrink-0">
                        <Brain class="h-6 w-6 text-teal-400" />
                    </div>
                    <h3 class="text-lg font-semibold text-white mb-1">2. Analyse par IA</h3>
                    <p class="text-sm text-gray-400">Chaque article est synth√©tis√© puis class√© par sp√©cialit√© m√©dicale.</p>
                </div>

                <!-- Arrow for mobile -->
                <div class="md:hidden flex justify-center items-center text-teal-400 my-2">
                     <svg xmlns="http://www.w3.org/2000/svg" class="h-8 w-8" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
                        <path stroke-linecap="round" stroke-linejoin="round" d="M16 17l-4 4m0 0l-4-4m4 4V3" />
                    </svg>
                </div>
                <!-- Arrow for desktop -->
                <div class="hidden md:flex justify-center items-center text-teal-400 shrink-0 pt-5">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-8 w-8 lg:h-10 lg:w-10" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
                        <path stroke-linecap="round" stroke-linejoin="round" d="M17 8l4 4m0 0l-4 4m4-4H3" />
                    </svg>
                </div>

                <!-- Step 3 -->
                <div class="flex-1 flex flex-col items-center text-center">
                    <div class="flex h-12 w-12 items-center justify-center rounded-full bg-teal-500/10 border border-teal-500/30 mb-4 shrink-0">
                        <Users class="h-6 w-6 text-teal-400" />
                    </div>
                    <h3 class="text-lg font-semibold text-white mb-1">3. Validation M√©dicale</h3>
                    <p class="text-sm text-gray-400">Relecture par des experts, et proposition de nouvelles publications.</p>
                </div>

                <!-- Arrow for mobile -->
                <div class="md:hidden flex justify-center items-center text-teal-400 my-2">
                     <svg xmlns="http://www.w3.org/2000/svg" class="h-8 w-8" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
                        <path stroke-linecap="round" stroke-linejoin="round" d="M16 17l-4 4m0 0l-4-4m4 4V3" />
                    </svg>
                </div>
                <!-- Arrow for desktop -->
                <div class="hidden md:flex justify-center items-center text-teal-400 shrink-0 pt-5">
                     <svg xmlns="http://www.w3.org/2000/svg" class="h-8 w-8 lg:h-10 lg:w-10" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
                        <path stroke-linecap="round" stroke-linejoin="round" d="M17 8l4 4m0 0l-4 4m4-4H3" />
                    </svg>
                </div>

                <!-- Step 4 -->
                <div class="flex-1 flex flex-col items-center text-center">
                    <div class="flex h-12 w-12 items-center justify-center rounded-full bg-teal-500/10 border border-teal-500/30 mb-4 shrink-0">
                        <Mail class="h-6 w-6 text-teal-400" />
                    </div>
                    <h3 class="text-lg font-semibold text-white mb-1">4. Votre Veille Pr√™te</h3>
                    <p class="text-sm text-gray-400">Des synth√®ses claires et concises, directement dans votre bo√Æte mail.</p>
                </div>
            </div>
        </div>
    </section>

	<!-- ==================================================== -->
	<!-- Sp√©cialit√©s et Articles SECTION (Keep as is) -->
	<!-- ==================================================== -->
	<div class="relative flex flex-col gap-4 overflow-hidden px-4 py-12 sm:mx-[10vw] sm:px-0 md:py-16">
		<div class="w-full text-white">
			<div class="flex flex-col gap-6">
				<h2 class="text-3xl font-bold">D√©couvrez certains de nos articles</h2>
				<div class="relative w-full max-w-sm">
					<Select.Root type="single" name="selectedSpecialty" bind:value={selectedSpecialty}>
						<Select.Trigger class="w-full rounded-lg border border-gray-700 bg-gray-800 px-4 py-3 text-sm font-medium text-white shadow-md transition-all duration-300 hover:bg-gray-700 focus:border-teal-500 focus:ring-2 focus:ring-teal-500 focus:outline-none">
							{triggerContent}
						</Select.Trigger>
						<Select.Content class="scrollbar-thin scrollbar-thumb-teal-500 scrollbar-track-gray-800 z-10 max-h-60 overflow-y-auto rounded-lg border border-gray-700 bg-gray-900 shadow-lg">
							<Select.Group>
								<Select.GroupHeading class="px-4 py-2 font-semibold text-gray-400">Sp√©cialit√©s</Select.GroupHeading>
								{#each specialties as specialty (specialty)}
									<Select.Item value={specialty} label={specialty} class="cursor-pointer px-4 py-2 text-white transition-all duration-200 hover:bg-teal-600/80 data-[highlighted]:bg-teal-600/80 data-[highlighted]:text-white data-[state=checked]:font-medium" />
								{/each}
							</Select.Group>
						</Select.Content>
					</Select.Root>
				</div>
				{#if articles.length === 0}
					<p class="mt-4 text-gray-400 italic">Aucun article disponible pour {selectedSpecialty || 'toutes les sp√©cialit√©s'}.</p>
				{:else}
					<ul class="space-y-4">
						{#each articles.slice(0,3) as article (article.id)}
							<li role="button" tabindex="0" on:click={() => openImmersive(article)} on:keydown={(e) => e.key === 'Enter' && openImmersive(article)} class="relative cursor-pointer rounded-lg bg-gray-800 p-4 shadow-md transition-all duration-200 hover:bg-gray-700 hover:shadow-xl focus:outline-none focus:ring-2 focus:ring-teal-500 focus:ring-offset-2 focus:ring-offset-black">
								<h3 class="text-left text-lg font-bold text-white pr-5">
									<span class="mr-1.5">{extractTitleEmoji(article.content)}</span>
									{formatTitle(article.title)}
								</h3>
								{#if article.grade}
									<p class="mt-1 text-sm {article.grade == 'A' ? 'text-green-400' : article.grade == 'B' ? 'text-yellow-400' : article.grade == 'C' ? 'text-orange-400' : 'text-red-400'}">
                                        Grade de recommandation : <span class="font-medium">{article.grade}</span>
                                    </p>
								{/if}
								<div class="mt-2 flex items-center text-sm text-gray-400"><span class="mr-1">{article.journal || 'Journal inconnu'}</span></div>
								<p class="mt-1 text-xs text-gray-500">Publi√© le {formatDate(article.published_at)}</p>
							</li>
						{/each}
					</ul>
				{/if}
				{#if !$userProfileStore}
					<div class="mt-8 flex justify-center">
						<a href="/signup" class="flex flex-col items-center text-orange-500 transition-colors duration-200 hover:text-orange-400 focus:outline-none focus:ring-2 focus:ring-orange-500 focus:ring-offset-2 focus:ring-offset-black rounded-md p-1">
							<span class="text-lg font-semibold">Voir plus d'articles</span>
							<svg class="mt-2 h-6 w-6 animate-bounce" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 14l-7 7m0 0l-7-7m7 7V3" /></svg>
						</a>
					</div>
				{/if}
			</div>
		</div>
	</div>
	<!-- ==================================================== -->
	<!-- END Sp√©cialit√©s/Articles                         -->
	<!-- ==================================================== -->


	<!-- ==================================================== -->
	<!-- Partenaires SECTION (Keep as is)                  -->
	<!-- ==================================================== -->
	<div class="relative flex flex-col gap-6 overflow-hidden px-4 py-8 sm:mx-[10vw] sm:px-0 md:py-12">
		<h2 class="mb-4 text-left text-2xl font-bold text-white">Nos partenaires</h2>
		<div class="flex flex-wrap items-center justify-center gap-8 md:justify-start">
			<a href="https://pubmed.ncbi.nlm.nih.gov/" target="_blank" rel="noopener noreferrer" class="flex flex-col items-center gap-2 opacity-80 transition-opacity hover:opacity-100"><img src="https://cdn.ncbi.nlm.nih.gov/pubmed/277eb475-38df-4990-a0ee-0080b04e86fc/core/images/pubmed-logo-white.svg" alt="PubMed" class="h-10 w-auto" loading="lazy" /></a>
			<a href="https://www.embase.com" target="_blank" rel="noopener noreferrer" class="flex items-center gap-2 opacity-80 transition-opacity hover:opacity-100"><EmbaseSvg /></a>
			<a href="https://www.cochranelibrary.com" target="_blank" rel="noopener noreferrer" class="flex items-center gap-2 opacity-80 transition-opacity hover:opacity-100"><img src="https://www.cochrane.org/sites/default/files/public/cochrane-57-old.png" alt="Cochrane Library" class="h-10 w-auto" loading="lazy" /></a>
		</div>
	</div>
	<!-- ==================================================== -->
	<!-- END Partenaires                                   -->
	<!-- ==================================================== -->


	<!-- ==================================================== -->
	<!-- STATS SECTION (Commented out - Keep as is)          -->
	<!-- ==================================================== -->
	<!-- <div class="bg-gray-900 py-16 sm:py-20">
		... content ...
	</div> -->
	<!-- ==================================================== -->
	<!-- END STATS SECTION                                  -->
	<!-- ==================================================== -->

</main>

<!-- Modal Immersif (Keep outside main) -->
{#if immersiveArticle}
	<ArticleImmersiveModal article={immersiveArticle} on:close={closeImmersive} />
{/if}

<style>
	/* Reuse styles from previous version */
	button:focus-visible, a:focus-visible {
		outline: 2px solid #2dd4bf; /* Teal 400 */
        outline-offset: 2px;
        border-radius: 4px;
	}
	.animate-bounce { animation: bounce 2s infinite; }
	@keyframes bounce { 0%, 20%, 50%, 80%, 100% { transform: translateY(0); } 40% { transform: translateY(-10px); } 60% { transform: translateY(-5px); } }
	.modal-enter-active { animation: fadeIn 0.3s ease-out; }
	@keyframes fadeIn { 0% { opacity: 0; transform: scale(0.95); } 100% { opacity: 1; transform: scale(1); } }
	.scrollbar-thin { scrollbar-width: thin; scrollbar-color: #14b8a6 #1f2937; }
	.scrollbar-thin::-webkit-scrollbar { width: 8px; }
	.scrollbar-thin::-webkit-scrollbar-track { background: #1f2937; border-radius: 4px;}
	.scrollbar-thin::-webkit-scrollbar-thumb { background-color: #14b8a6; border-radius: 4px; border: 2px solid #1f2937;}
	.scrollbar-thin::-webkit-scrollbar-thumb:hover { background-color: #0f766e;}
    .play-button:hover span:first-child { transform: scale(1.15); }

    /* Add subtle hover effect to feature icons */
    .group:hover .feature-icon {
        transform: translateY(-2px);
        /* Optional: Add a subtle glow or scale */
        /* box-shadow: 0 0 15px rgba(45, 212, 191, 0.3); */
        /* transform: scale(1.05) translateY(-2px); */
    }
    .feature-icon {
        transition: transform 0.2s ease-in-out, box-shadow 0.2s ease-in-out;
    }
</style>
--- End of File ---

--- File Path ---
frontend/src/routes/comite/+page.svelte

<!-- frontend/src/routes/comite/+page.svelte -->
<script lang="ts">
	import { AlertTriangle, CheckCircle, Loader2 } from 'lucide-svelte';

	// Define the referent data directly in the script
	// Ensure the initial array is sorted by specialty, then maybe by name for consistency
	const referents = [
        {
            specialty: 'Chirurgie orthop√©dique',
            name: 'Dr F√©lix Barbier',
            title: 'Docteur Junior en chirurgie orthop√©dique',
            affiliation: 'AP-HP',
            focus: 'Sp√©cialiste en chirurgie de la main'
        },
		{
			specialty: 'Chirurgie p√©diatrique',
			name: 'Dr Camille Girardin',
			title: 'Docteur Junior en chirurgie p√©diatrique',
            affiliation: 'CHU de Lille',
			focus: 'Sp√©cialiste en chirurgie ortho-p√©diatrique'
		},
		{
			specialty: 'Endocrinologie ‚Äì Diab√©tologie ‚Äì Nutrition',
			name: 'Dr Baptiste Mazas',
			title: 'Interne en Endocrinologie-Diab√©tologie-Nutrition',
            affiliation: 'AP-HP',
			focus: 'Diab√©tologie, Nutrition, Pr√©vention Cardiovasculaire, M√©decine du Sport'
		},
        {
			specialty: 'Endocrinologie ‚Äì Diab√©tologie ‚Äì Nutrition',
			name: 'Dr Flora Lambert',
			title: 'Interne en Endocrinologie-Diab√©tologie-Nutrition',
            affiliation: 'AP-HP',
			focus: null // No specific focus listed
		},
        {
			specialty: 'H√©matologie',
			name: 'Dr Alexis Talbot',
			title: 'MCU-PH, service d\'Immuno-H√©matologie',
            affiliation: 'H√¥pital Saint-Louis (AP-HP)',
			focus: 'Sp√©cialiste en my√©lome multiple, immunoth√©rapie, CAR-T cells'
		},
		{
			specialty: 'Neurochirurgie',
			name: 'Dr Gonzague Defrance',
			title: 'Docteur Junior en neurochirurgie',
            affiliation: 'AP-HP',
			focus: 'Sp√©cialiste en chirurgie fonctionnelle'
		},
		{
			specialty: 'Rhumatologie',
			name: 'Dr Elisabetta Lanciano',
			title: 'Rhumatologie',
            affiliation: 'CH d\'Angoul√™me',
			focus: null // No specific focus listed
		},
		{
			specialty: 'Urgences',
			name: 'Dr Benjamin Chevallier',
			title: 'M√©decine d\'urgence',
            affiliation: 'SAMU de Paris ‚Äì SMUR Necker ‚Äì Urgences adultes Paris Saint-Joseph, AP-HP',
			focus: null // No specific focus listed
		},
        {
            specialty: 'Cardiologie',
            name: 'L√©o Azria',
            title: 'Interne de Cardiologie',
            affiliation: 'AP-HP',
            focus: null // No specific focus listed
        },
        {
            specialty: 'Urologie',
            name: 'Dr Maxime Pattou',
            title: 'Docteur Junior en urologie',
            affiliation: 'AP-HP',
            focus: 'Sp√©cialiste en uro-oncologie'
        },
        {
            specialty: 'Rhumatologie',
            name: 'F√©lix Laborie',
            title: 'Interne de Rhumatologie',
            affiliation: 'AP-HP',
            focus: null // No specific focus listed
        },
        {
            specialty: 'Chirurgie p√©diatrique',
            name: 'Maxence de Lanversin',
            title: 'Interne en chirurgie p√©diatrique',
            affiliation: 'CHU de Poitiers',
            focus: 'Chirurgie plastique p√©diatrique '
        },
        {
            specialty: 'Urologie',
            name: 'Dr Alexandra Clerget',
            title: 'Docteur en Urologie',
            affiliation: 'Hopital Paris Saint Joseph (ESPIC)',
            focus: 'Andrologie et m√©decine de la reproduction',
        },
        {
            specialty: 'Oncologie',
            name: 'Jean-Baptiste Demign√©',
            title: 'Interne en oncologie m√©dicale',
            affiliation: 'AP-HM Timone',
            focus: null,
        },
        {
            specialty: 'M√©decine interne',
            name: 'Dr Romain Bollart',
            title: 'Chef de clinique dans le service de m√©decine interne',
            affiliation: 'CHU de Lariboisi√®re, AP-HP',
            focus: null,
        },
        {
            specialty: 'M√©decine vasculaire',
            name: 'Dr Benjamin Pariente',
            title: 'Chef de clinique dans le service d‚ÄôExcellence en Hypertension Art√©rielle',
            affiliation: 'H√¥pital Europ√©en Georges-Pompidou, AP-HP',
            focus: 'Sp√©cialiste en Hypertension Art√©rielle',
        }
	].sort((a, b) => { // Ensure sorting is done definitively here
        const specialtyCompare = a.specialty.localeCompare(b.specialty, 'fr', { sensitivity: 'base' });
        if (specialtyCompare !== 0) {
            return specialtyCompare;
        }
        // Optional: Sort by name within the same specialty
        return a.name.localeCompare(b.name, 'fr', { sensitivity: 'base' });
    });

    // Define the missions
    const missions = [
        "√ätre r√©f√©rent(e) d\'une sp√©cialit√© ou sous-sp√©cialit√©",
        "Proposer des articles scientifiques pertinents √† relayer",
        "Apporter des corrections aux synth√®ses g√©n√©r√©es par notre IA",
        "Valoriser votre engagement acad√©mique (mention sur le site, etc.)",
        "Rejoindre un r√©seau interdisciplinaire et engag√©"
    ];

    let showForm = $state(false);
    let formData = $state({
        prenom: '', nom: '', statut: '', specialite: '', surSpecialite: '', centre: ''
    });
    let submissionStatus: 'idle' | 'loading' | 'success' | 'error' = $state('idle');
    let submissionMessage = $state('');

    function resetForm() {
        formData = {
            prenom: '', nom: '', statut: '', specialite: '', surSpecialite: '', centre: ''
        };
        submissionStatus = 'idle';
        submissionMessage = '';
    }

    function toggleForm() {
        showForm = !showForm;
        if (!showForm) resetForm();
    }

    async function handleSubmit() {
        submissionStatus = 'loading';
        submissionMessage = '';
        try {
            const response = await fetch('/api/committee-application', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(formData)
            });
            const result = await response.json().catch(() => ({}));
            if (!response.ok) throw new Error(result.message || `Erreur ${response.status}`);
            submissionStatus = 'success';
            submissionMessage = result.message || 'Candidature envoy√©e !';
        } catch (err: any) {
            console.error("Application submission error:", err);
            submissionStatus = 'error';
            submissionMessage = err.message || "Une erreur est survenue.";
        }
    }

    function getSpecialtyEmoji(specialty: string): string {
        const emojiMap: Record<string, string> = {
            'Chirurgie orthop√©dique': 'ü¶¥', 'Chirurgie p√©diatrique': 'üë∂', 'Cardiologie': '‚ù§Ô∏è',
            'Endocrinologie ‚Äì Diab√©tologie ‚Äì Nutrition': '‚öñÔ∏è', 'H√©matologie': 'ü©∏',
            'Neurochirurgie': 'üß†', 'Rhumatologie': 'ü¶¥', 'Urgences': 'üöë', 'Urologie': 'üíß', 'Oncologie': 'üéóÔ∏è'
        };
        return emojiMap[specialty] || '‚öïÔ∏è';
    }

    $effect(() => {
        if (!showForm && submissionStatus !== 'idle') resetForm();
    });

</script>

<svelte:head>
	<title>Comit√© Scientifique - Veille M√©dicale</title>
	<meta
		name="description"
		content="D√©couvrez les m√©decins r√©f√©rents par sp√©cialit√© du comit√© scientifique de Veille M√©dicale."
	/>
    <link rel="preconnect" href="https://fonts.googleapis.com" />
	<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
	<link
		href="https://fonts.googleapis.com/css2?family=Montserrat:ital,wght@0,100..900;1,100..900&display=swap"
		rel="stylesheet"
	/>
</svelte:head>

<div class="min-h-screen bg-black px-4 py-12 pt-20 text-white font-sans">
	<div class="mx-auto max-w-4xl">
		<!-- En-t√™te -->
		<header class="mb-12 text-center">
			<h1 class="mb-4 text-4xl font-bold text-white sm:text-5xl">
                üè• R√©f√©rents par sp√©cialit√©
            </h1>
		</header>

        <!-- Section Missions -->
        <section class="mb-16 rounded-lg bg-gray-800 p-6 shadow-lg">
            <h2 class="mb-6 text-center text-2xl font-semibold text-white sm:text-3xl">
                üìã Les missions des membres
            </h2>
            <ul class="list-disc space-y-3 pl-6 text-gray-300">
                {#each missions as mission}
                    <li>{mission}</li>
                {/each}
            </ul>
            <div class="mt-6 text-center">
                <button
                    on:click={toggleForm}
                    class="bg-teal-500 hover:bg-teal-600 text-white font-semibold py-2 px-4 rounded-lg transition-colors"
                >
                    {showForm ? 'Masquer le formulaire' : 'Rejoindre le comit√©'}
                </button>
            </div>
        </section>

        {#if showForm}
            <!-- Section Formulaire -->
            <section class="mb-16 rounded-lg bg-gray-800 p-6 shadow-lg transition-all duration-300 ease-in-out">
                <h2 class="mb-6 text-center text-2xl font-semibold text-white sm:text-3xl">
                    ‚úçÔ∏è Postuler au comit√© scientifique
                </h2>
                {#if submissionStatus === 'success'}
                    <div class="flex flex-col items-center justify-center text-center py-8 px-4 bg-gray-700 rounded-lg">
                        <CheckCircle class="h-12 w-12 text-green-400 mb-4" />
                        <h3 class="text-xl font-semibold mb-2 text-white">Candidature Envoy√©e !</h3>
                        <p class="text-gray-300 mb-6">{submissionMessage}</p>
                        <button on:click={toggleForm} class="bg-gray-600 hover:bg-gray-500 text-white font-semibold py-2 px-4 rounded-lg transition-colors text-sm">
                            Fermer
                        </button>
                    </div>
                {:else}
                    <form on:submit|preventDefault={handleSubmit} class="space-y-4">
                         <div>
                            <label for="prenom" class="block text-gray-300 mb-1 text-sm">Pr√©nom</label>
                            <input type="text" id="prenom" bind:value={formData.prenom} class="w-full bg-gray-700 text-white rounded-lg px-4 py-2 focus:outline-none focus:ring-2 focus:ring-teal-500 border border-gray-600 text-sm" required disabled={submissionStatus === 'loading'} />
                        </div>
                        <div>
                            <label for="nom" class="block text-gray-300 mb-1 text-sm">Nom</label>
                            <input type="text" id="nom" bind:value={formData.nom} class="w-full bg-gray-700 text-white rounded-lg px-4 py-2 focus:outline-none focus:ring-2 focus:ring-teal-500 border border-gray-600 text-sm" required disabled={submissionStatus === 'loading'} />
                        </div>
                        <div>
                            <label for="statut" class="block text-gray-300 mb-1 text-sm">Statut</label>
                            <input type="text" id="statut" bind:value={formData.statut} placeholder="Interne, Docteur, Professeur‚Ä¶" class="w-full bg-gray-700 text-white rounded-lg px-4 py-2 focus:outline-none focus:ring-2 focus:ring-teal-500 border border-gray-600 text-sm" required disabled={submissionStatus === 'loading'} />
                        </div>
                        <div>
                            <label for="specialite" class="block text-gray-300 mb-1 text-sm">Sp√©cialit√©</label>
                            <input type="text" id="specialite" bind:value={formData.specialite} class="w-full bg-gray-700 text-white rounded-lg px-4 py-2 focus:outline-none focus:ring-2 focus:ring-teal-500 border border-gray-600 text-sm" required disabled={submissionStatus === 'loading'} />
                        </div>
                        <div>
                            <label for="surSpecialite" class="block text-gray-300 mb-1 text-sm">Sur-sp√©cialit√© (optionnelle)</label>
                            <input type="text" id="surSpecialite" bind:value={formData.surSpecialite} class="w-full bg-gray-700 text-white rounded-lg px-4 py-2 focus:outline-none focus:ring-2 focus:ring-teal-500 border border-gray-600 text-sm" disabled={submissionStatus === 'loading'} />
                        </div>
                        <div>
                            <label for="centre" class="block text-gray-300 mb-1 text-sm">Centre d'exercice</label>
                            <input type="text" id="centre" bind:value={formData.centre} placeholder="CHU, h√¥pital, clinique, cabinet‚Ä¶" class="w-full bg-gray-700 text-white rounded-lg px-4 py-2 focus:outline-none focus:ring-2 focus:ring-teal-500 border border-gray-600 text-sm" required disabled={submissionStatus === 'loading'} />
                        </div>
                        <div class="bg-gray-700/50 p-3 rounded-lg border border-gray-600">
                            <p class="text-gray-400 text-xs mb-1">üìù Exemple :</p>
                            <p class="text-gray-400 text-xs italic">Dr Xavier Montjou, Chirurgie orthop√©dique, Sp√©cialiste en chirurgie de la main, AP-HP</p>
                        </div>
                        <div class="pt-2 space-y-3">
                            {#if submissionStatus === 'error'}
                                <p class="text-sm text-red-400 flex items-center gap-1.5 p-3 bg-red-900/30 border border-red-700 rounded-md" role="alert">
                                    <AlertTriangle class="h-4 w-4 flex-shrink-0"/> {submissionMessage}
                                </p>
                            {/if}
                            <button type="submit" class="w-full inline-flex items-center justify-center bg-teal-500 hover:bg-teal-600 text-white font-semibold py-2.5 px-4 rounded-lg transition-colors disabled:opacity-60 disabled:cursor-not-allowed" disabled={submissionStatus === 'loading'}>
                                {#if submissionStatus === 'loading'}
                                    <Loader2 class="mr-2 h-5 w-5 animate-spin" /> Envoi en cours...
                                {:else}
                                    Envoyer ma candidature
                                {/if}
                            </button>
                        </div>
                    </form>
                {/if}
            </section>
        {/if}

        <!-- Liste des R√©f√©rents - Robust Loop with Index Check -->
        <section>
            {#each referents as referent, index (referent.name)}
                <!-- Show heading if it's the first item OR if specialty differs from the previous item -->
                {#if index === 0 || referent.specialty !== referents[index - 1].specialty}
                    <h2 class="mt-10 mb-6 border-b border-gray-700 pb-2 text-2xl font-semibold text-teal-400 sm:text-3xl">
                        {getSpecialtyEmoji(referent.specialty)} {referent.specialty}
                    </h2>
                {/if}

                <!-- Referent Card -->
                <div class="mb-6 rounded-lg bg-gray-800 p-5 shadow-md transition-shadow hover:shadow-lg">
                    <h3 class="text-xl font-bold text-white">{referent.name}</h3>
                    <p class="text-md text-gray-300">{referent.title}</p>
                    {#if referent.affiliation}
                        <p class="text-sm text-gray-400">{referent.affiliation}</p>
                    {/if}
                    {#if referent.focus}
                        <p class="mt-1 text-sm text-gray-400 italic">{referent.focus}</p>
                    {/if}
                </div>
            {/each}
        </section>
	</div>
</div>

<style>
/* Styles remain the same */
</style>
--- End of File ---

--- File Path ---
frontend/src/routes/favoris/+page.server.ts

// src/routes/favoris/+page.server.ts
import { checkUserSubscription } from '$lib/utils/subscriptionUtils';
import { error, redirect } from '@sveltejs/kit';

export const load = async ({ locals: { supabase, safeGetSession } }) => {
    const { user } = await safeGetSession();

    if (!user) {
        throw redirect(303, '/login?redirect=/favoris');
    }

    let { isActive, error: subError } = await checkUserSubscription(supabase, user?.id);

    if (subError) {
        isActive = false;
    }

    // --- Fetch distinct disciplines for liked articles ---
    const { data: disciplineData, error: dbError } = await supabase
        .from('article_likes')
        .select(`
            articles!inner (
                article_disciplines!inner (
                    disciplines!inner ( id, name )
                )
            )
        `)
        .eq('user_id', user.id); // Filter by the current user

    if (dbError) {
        console.error("Error fetching liked disciplines:", dbError);
        throw error(500, "Could not load disciplines for liked articles.");
    }

    // --- Process data to get unique, sorted disciplines ---
    const likedDisciplinesMap = new Map<number, { value: string; label: string }>();
    if (disciplineData) {
        for (const like of disciplineData) {
            // Navigate through the nested structure
            const discipline = like.articles?.article_disciplines[0]?.disciplines;
            if (discipline && !likedDisciplinesMap.has(discipline.id)) {
                likedDisciplinesMap.set(discipline.id, { value: discipline.name, label: discipline.name });
            }
        }
    }

    const likedFilters = Array.from(likedDisciplinesMap.values())
                              .sort((a, b) => a.label.localeCompare(b.label, 'fr', { sensitivity: 'base' }));

    console.log("Liked Filters for User:", likedFilters);

    return {
        isSubscribed: true,
        likedFilters: likedFilters
    };
};
--- End of File ---

--- File Path ---
frontend/src/routes/favoris/+page.svelte

<!-- src/routes/favoris/+page.svelte -->
<script lang="ts">
    import ArticleListView from '$lib/components/articles/ArticleListView.svelte';
    import userProfileStore from '$lib/stores/user';

    // Get data from +page.server.ts
    const { data } = $props();

    const currentUserId = $derived($userProfileStore?.id ?? null);

    // Define the custom empty state message for this page
    const noLikedArticlesMessage = `Vous n'avez pas encore ajout√© d'articles √† vos favoris.<br>Cliquez sur ‚ù§Ô∏è sur un article pour le retrouver ici !`;

    // Use the filters loaded from the server
    const filtersForView = $derived(data.likedFilters || []);

    // Define the special value for clarity
    const ALL_CATEGORIES_VALUE = "__ALL__";
</script>

{#if currentUserId}
    <ArticleListView
        pageTitle="Mes articles favoris"
        filters={filtersForView}
        initialFilterValue={ALL_CATEGORIES_VALUE}
        filterSelectLabel="Filtrer par discipline"
        showAllCategoriesOption={true}
        apiEndpoint="/api/get-liked-articles"
        userId={currentUserId}
        subDisciplineFetchMode="public"
        enableSearch={true}
        searchPlaceholder="Rechercher dans mes favoris..."
        showAllSubDisciplinesOption={true}
        subDisciplineSelectLabel="Affiner par sous-sp√©cialit√©"
        allArticlesLoadedText="Tous vos articles favoris sont charg√©s"
        itemsPerPage={10}
        emptyStateMessage={noLikedArticlesMessage}
        isSubscribed={data.isSubscribed}
    />
{:else}
     <!-- Optional: Show message or loader while user store initializes -->
     <div class="flex justify-center items-center min-h-screen text-white">
         <p>Chargement des favoris...</p>
     </div>
{/if}

<style>
    /* Page-specific styles if needed */
</style>
--- End of File ---

--- File Path ---
frontend/src/routes/+page.ts

// since there's no dynamic data here, we can prerender
// it so that it gets served as a static asset in production
export const prerender = false;

--- End of File ---

--- File Path ---
frontend/src/routes/signup/+page.server.ts

// +page.server.ts (or your relevant server file name)
import { PUBLIC_SUPABASE_ANON_KEY } from '$env/static/public';
import { fail, redirect, type Actions } from '@sveltejs/kit';

export const actions: Actions = {
    default: async ({ request, locals: { supabase } }) => {
        const formData = await request.formData();

        // Get required fields from the simplified form
        const email = formData.get('email')?.toString();
        const password = formData.get('password')?.toString();

        // Get optional/derived fields (might be sent by form or derived here)
        const first_name = formData.get('first_name')?.toString() || email?.split('@')[0] || '';
        const last_name = formData.get('last_name')?.toString() || '';
        const date_of_birth = formData.get('date_of_birth')?.toString() || null;

        // --- Basic Validation ---
        if (!email || !password) {
            return fail(400, { error: 'Email et mot de passe sont requis.', email });
        }
        if (password.length < 6) {
             return fail(400, { error: 'Le mot de passe doit contenir au moins 6 caract√®res.', email });
        }

        // --- Supabase Auth ---
        const { data: signUpData, error: signUpError } = await supabase.auth.signUp({
            email,
            password,
            // Add options if needed, e.g., for email confirmation redirect
            // options: { emailRedirectTo: `${url.origin}/auth/callback` }
        });

        if (signUpError) {
             if (signUpError.message.includes('User already registered')) {
                 return fail(400, { error: 'Cet email est d√©j√† utilis√©.', email });
            }
            console.error('Supabase SignUp Error:', signUpError); // Log unexpected errors
            return fail(500, { error: "Erreur lors de l'inscription.", email });
        }

        // Handle cases where user object might be missing (should be rare if no error)
        // Or if email confirmation is required (session might be null initially)
        if (!signUpData.user) {
             console.error('SignUp successful but no user object returned.');
             // If email confirmation is enabled, maybe redirect to a "check email" page or return success message
             // For now, treat as an internal error if no user object AND no error was thrown
             return fail(500, { error: 'Erreur interne lors de la cr√©ation de l‚Äôutilisateur.', email });
        }

        // --- Create User Profile ---
        const newUserProfile = {
            id: signUpData.user.id,
            first_name,
            last_name,
            email,
            disciplines: [], // Default value
            notification_frequency: 'tous_les_jours', // Default value
            date_of_birth,
        };

        const { error: profileError } = await supabase
            .from('user_profiles')
            .insert(newUserProfile);
            // No .select().single() needed if we don't use profileData afterwards

        if (profileError) {
            console.error('Supabase Profile Insert Error:', profileError);
            // Consider potential cleanup (e.g., delete the auth user?) if profile fails
            return fail(500, { error: 'Erreur lors de la sauvegarde du profil utilisateur.', email });
        }

        // --- Trigger Welcome Email (Optional) ---
        try {
             const welcomeEdgeUrl =
                'https://etxelhjnqbrgwuitltyk.supabase.co/functions/v1/send-welcome-email';
             // Use await but don't block signup return if it fails, just log
             fetch(welcomeEdgeUrl, { // Fire and forget (mostly)
                method: 'POST',
                headers: {
                    // Ensure ANON_KEY has invoke permissions or use service_role key if needed
                    Authorization: `Bearer ${PUBLIC_SUPABASE_ANON_KEY}`,
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    user_id: signUpData.user.id,
                    email: email,
                    first_name: first_name
                }),
            }).then(async response => {
                if (!response.ok) {
                    const errorText = await response.text();
                    console.error('Error triggering send-welcome-email (async):', errorText);
                } else {
                    console.log('send-welcome-email triggered successfully (async)');
                }
            }).catch(e => {
                 console.error('Exception calling send-welcome-email (async):', e);
            });
        } catch (e) {
             console.error('Error setting up welcome email fetch:', e); // Should be rare
        }

        // --- Success ---
        // Redirect to the user's dashboard or account page
        // Use 303 See Other for POST -> GET redirect pattern
        throw redirect(303, '/ma-veille');
    },
};
--- End of File ---

--- File Path ---
frontend/src/routes/signup/+page.svelte

<!-- +page.svelte -->
<script>
    import MessageDisplay from '$lib/components/auth/MessageDisplay.svelte';
    import SignUpForm from '$lib/components/auth/SignUpForm.svelte';
    import { i18n } from '$lib/i18n';

    // Variables pour les √©tapes
    let email = '';
    let password = '';
    let disciplines = [];
    let notificationFreq = 'tous_les_jours';
    let errorMessage = '';
    let successMessage = '';
    let isLoading = false;
</script>

<main class="flex min-h-screen items-center justify-center bg-black px-4 py-12">
    <div
        class="hover:shadow-3xl flex w-full max-w-md shadow-2xl transition-all duration-300 sm:max-w-[60vw]"
    >
        <div class="w-full rounded-lg bg-white p-8">
            <h1 class="mb-6 text-left text-3xl font-bold tracking-tight capitalize">
                {$i18n.login.title}
            </h1>

            <MessageDisplay bind:errorMessage bind:successMessage />
            {#if isLoading}
                <div class="mb-4 flex items-center justify-center space-x-2 rounded-lg bg-blue-50 p-4">
                    <div class="h-5 w-5 animate-spin rounded-full border-4 border-t-blue-500"></div>
                    <p class="font-medium text-blue-600">Inscription en cours...</p>
                </div>
            {/if}
            <SignUpForm
                bind:email
                bind:password
                bind:disciplines
                bind:notificationFreq
                bind:errorMessage
                bind:successMessage
                bind:isLoading
            />
            <a href="/login">
                <p class="mt-4 text-center text-sm text-gray-500">
                    {$i18n.login.alreadyHaveAccount}
                </p>
            </a>
        </div>
    </div>
</main>
--- End of File ---

--- File Path ---
frontend/src/routes/payment-status/+page.svelte

<!-- src/routes/payment-status/+page.svelte -->
<script>
    import { page } from '$app/stores';
    import { onMount } from 'svelte';
// To access URL parameters
    import { env } from '$env/dynamic/public';
    import { loadStripe } from '@stripe/stripe-js';
    // Or import { PUBLIC_STRIPE_PUBLISHABLE_KEY } from '$env/static/public';

    const stripePublicKey = env.PUBLIC_STRIPE_KEY || process.env.PUBLIC_STRIPE_KEY;

    let status = 'loading'; // loading, succeeded, requires_payment_method, processing, failed
    let errorMessage = '';
    let stripe = null;

    onMount(async () => {
        if (!stripePublicKey) {
            errorMessage = 'Stripe publishable key is not set.';
            status = 'failed';
            return;
        }

        stripe = await loadStripe(stripePublicKey);

        // Retrieve the PaymentIntent client secret and status from URL parameters
        const clientSecret = $page.url.searchParams.get('payment_intent_client_secret');
        const redirectStatus = $page.url.searchParams.get('redirect_status'); // e.g., succeeded, processing, requires_payment_method

        if (!clientSecret) {
            errorMessage = 'Missing payment intent information.';
            status = 'failed';
            return;
        }

        try {
            // Retrieve the PaymentIntent using the client secret
            const { paymentIntent } = await stripe.retrievePaymentIntent(clientSecret);

            // Check the PaymentIntent status
            // See: https://stripe.com/docs/api/payment_intents/object#payment_intent_object-status
            switch (paymentIntent?.status) {
                case 'succeeded':
                    status = 'succeeded';
                    break;
                case 'processing':
                    status = 'processing';
                    errorMessage = 'Payment processing. We\'ll update you when payment is confirmed.';
                    break;
                case 'requires_payment_method':
                    status = 'requires_payment_method';
                    errorMessage = 'Payment failed. Please try another payment method.';
                    // You might want to redirect back to the checkout page here
                    break;
                default:
                    status = 'failed';
                    errorMessage = 'Something went wrong retrieving payment status.';
                    break;
            }
        } catch (error) {
             console.error("Error retrieving PaymentIntent:", error);
             status = 'failed';
             errorMessage = 'Error checking payment status.';
        }
    });

</script>

<h1>Payment Status</h1>

{#if status === 'loading'}
    <p>Checking payment status...</p>
{:else if status === 'succeeded'}
    <p style="color: green;">‚úÖ Payment Successful! Thank you for your purchase.</p>
    <!-- You could show order details here -->
{:else if status === 'processing'}
    <p style="color: orange;">‚è≥ Payment Processing. We'll notify you upon completion.</p>
    {#if errorMessage}<p>{errorMessage}</p>{/if}
{:else if status === 'requires_payment_method'}
    <p style="color: red;">‚ùå Payment Failed. {errorMessage}</p>
    <a href="/checkout">Try Again</a> <!-- Link back to checkout -->
{:else} <!-- failed or other unknown status -->
    <p style="color: red;">‚ùå Payment Failed. {errorMessage || 'An unknown error occurred.'}</p>
     <a href="/checkout">Try Again</a>
{/if}
--- End of File ---

--- File Path ---
frontend/src/routes/articles/+page.server.ts

// In your +page.server.ts
import { checkUserSubscription } from '$lib/utils/subscriptionUtils';

export async function load({ locals }) {
    const { session, user } = await locals.safeGetSession();

    const { isActive, error: subError } = await checkUserSubscription(locals.supabase, user?.id);

    if (subError) {
        console.error('Subscription check failed:', subError);
        return {
            isSubscribed: false,
            disciplines: [],
            error: subError
        };
    }

    if (false && !isActive) {
		// TODO: change when subscription is implemented
        console.log('User is not subscribed, preparing non-subscribed page data');
        return {
            isSubscribed: false,
            disciplines: [],
            error: 'Utilisateur non abonn√©.' // Message for the page
        };
    }
    
    if (!user || !session) {
        console.log('No user or session found, returning empty data');
        return {
            isSubscribed: false,
            disciplines: [],
            error: 'Utilisateur non connect√©.'
        };
    }

    const { data: disciplineData, error: disciplineError } = await locals.supabase
        .from('disciplines')
        .select('name');

    if (disciplineError) {
        console.error('Discipline fetch failed:', disciplineError.message);
        return {
            isSubscribed: true,
            disciplines: [],
            error: disciplineError.message || 'Erreur lors de la r√©cup√©ration des disciplines.'
        };
    }

    return {
        isSubscribed: true,
        disciplines: disciplineData || [],
        error: null
    };
}
--- End of File ---

--- File Path ---
frontend/src/routes/articles/+page.svelte

<!-- /src/routes/articles -->
<script lang="ts">
	import ArticleListView from '$lib/components/articles/ArticleListView.svelte';

	// Get data loaded by +page.server.ts (list of all disciplines)
	const { data } = $props();

	// Prepare filters from all available disciplines
    const allDisciplines = $derived(data.disciplines || []);
	const filterOptions = $derived(
		[...allDisciplines]
			.sort((a, b) => a.name.localeCompare(b.name, 'fr', { sensitivity: 'base' }))
			.map((discipline: { name: string }) => ({
				value: discipline.name,
				label: discipline.name
			}))
	);

	// Determine initial filter (first discipline in the sorted list)
	const initialFilter = $derived(filterOptions[0]?.value ?? null);

    // Define template strings with proper typing
    const articleOfTheDayTitleTemplate = 'üî• Article du jour pour {filter} :';
    const previousArticlesTitleTemplate = 'üìñ Articles pour {filter} :';
</script>

<!-- Use the shared component, passing specific props for 'Tous les articles' -->
<ArticleListView
	pageTitle="Tous les articles"
	filters={filterOptions}
	initialFilterValue={initialFilter}
	filterSelectLabel="Sp√©cialit√©s"
	subDisciplineFetchMode="public"
	showSignupPromptProp={false}
	enableSearch={true}
	isSubscribed={data.isSubscribed}
/>
--- End of File ---

--- File Path ---
frontend/src/routes/articles/[id]/+page.svelte

<!-- article/[id]/+page.svelte -->
<script lang="ts">
	import { i18n } from '$lib/i18n';
	import { goto } from '$app/navigation';
	import userProfileStore from '$lib/stores/user';
	import { onMount } from 'svelte';
	import { supabase } from '$lib/supabase';

	export let data;

	// D√©finir les variables d'√©tat
	let newComment = '';
	let comments = data.comments || [];
	let likesCount = data.likesCount || 0;
	let dislikesCount = data.dislikesCount || 0;
	let userHasLiked = data.userHasLiked || false;
	let userHasDisliked = data.userHasDisliked || false;
	let isSaved = data.isSaved || false;
	let isLoadingLike = false;
	let isLoadingDislike = false;
	let isLoadingSave = false;
	let isLoadingComment = false;
	// Utiliser un objet pour g√©rer l'√©tat de chargement de suppression par commentaire
	let isLoadingDelete = {};

	// Liste des disciplines (doit correspondre √† celles utilis√©es dans la DB)
	const disciplineOptions = [
		'M√©decine G√©n√©rale',
		'Urgences',
		'M√©decine du Travail',
		'Sant√© Publique',
		'M√©decine Interne',
		'Endocrinologie-Diab√©tologie-Nutrition',
		'Cardiologie',
		'Dermatologie',
		'H√©pato-Gastroent√©rologie',
		'G√©n√©tique',
		'G√©riatrie',
		'H√©matologie',
		'Maladies infectieuses',
		'N√©phrologie',
		'Neurologie',
		'Oncologie',
		'M√©decine physique et r√©adaptation',
		'Pneumologie',
		'Gyn√©cologie-obst√©trique',
		'P√©diatrie',
		'Psychiatrie',
		'Anesth√©sie - R√©animation',
		'Rhumatologie',
		'Chirurgie cardiaque',
		'Chirurgie digestive',
		'Chirurgie ORL',
		'Neurochirurgie',
		'Ophtalmologie',
		'Chirurgie orthop√©dique',
		'Chirurgie thoracique',
		'Urologie',
		'Chirurgie vasculaire',
		'M√©decine de la douleur'
	];

	// Fonction pour formater les titres : premi√®re lettre en majuscule, le reste en minuscule
	function formatTitle(title: string) {
		if (!title) return '';
		const words = title.toLowerCase().split(' ');
		if (words.length === 0) return '';
		words[0] = words[0].charAt(0).toUpperCase() + words[0].slice(1);
		return words.join(' ');
	}

	// Fonction pour parser le contenu Markdown ou structur√©
	function parseContent(content) {
		if (!content) return [];

		const sections = [];
		let currentSection = { title: '', content: [] };
		const lines = content.split('\n');

		for (const line of lines) {
			if (line.startsWith('##')) {
				if (currentSection.title || currentSection.content.length > 0) {
					sections.push(currentSection);
				}
				currentSection = { title: line.replace(/^##\s+/, '').trim(), content: [] };
			} else if (line.trim()) {
				currentSection.content.push(line.trim());
			}
		}

		if (currentSection.title || currentSection.content.length > 0) {
			sections.push(currentSection);
		}

		return sections;
	}

	$: parsedContent = parseContent(data.article?.content);

	function goBack() {
		goto('/ma-veille');
	}

	async function handleToggleLike() {
		if (!$userProfileStore) {
			alert('Veuillez vous connecter pour liker cet article.');
			return;
		}

		if (isLoadingLike) return;
		isLoadingLike = true;

		try {
			if (userHasDisliked) {
				const { error: deleteError } = await supabase
					.from('article_dislikes')
					.delete()
					.eq('article_id', data.article.id)
					.eq('user_id', $userProfileStore.id);

				if (deleteError) throw deleteError;

				dislikesCount -= 1;
				userHasDisliked = false;
			}

			if (userHasLiked) {
				const { error: deleteError } = await supabase
					.from('article_likes')
					.delete()
					.eq('article_id', data.article.id)
					.eq('user_id', $userProfileStore.id);

				if (deleteError) throw deleteError;

				likesCount -= 1;
				userHasLiked = false;
			} else {
				const { error: insertError } = await supabase.from('article_likes').insert({
					article_id: data.article.id,
					user_id: $userProfileStore.id
				});

				if (insertError) throw insertError;

				likesCount += 1;
				userHasLiked = true;
			}
		} catch (error) {
			console.error('Error toggling like:', error);
			alert('Erreur lors de la mise √† jour du like.');
		} finally {
			isLoadingLike = false;
		}
	}

	async function handleToggleDislike() {
		if (!$userProfileStore) {
			alert('Veuillez vous connecter pour disliker cet article.');
			return;
		}

		if (isLoadingDislike) return;
		isLoadingDislike = true;

		try {
			if (userHasLiked) {
				const { error: deleteError } = await supabase
					.from('article_likes')
					.delete()
					.eq('article_id', data.article.id)
					.eq('user_id', $userProfileStore.id);

				if (deleteError) throw deleteError;

				likesCount -= 1;
				userHasLiked = false;
			}

			if (userHasDisliked) {
				const { error: deleteError } = await supabase
					.from('article_dislikes')
					.delete()
					.eq('article_id', data.article.id)
					.eq('user_id', $userProfileStore.id);

				if (deleteError) throw deleteError;

				dislikesCount -= 1;
				userHasDisliked = false;
			} else {
				const { error: insertError } = await supabase.from('article_dislikes').insert({
					article_id: data.article.id,
					user_id: $userProfileStore.id
				});

				if (insertError) throw insertError;

				dislikesCount += 1;
				userHasDisliked = true;
			}
		} catch (error) {
			console.error('Error toggling dislike:', error);
			alert('Erreur lors de la mise √† jour du dislike.');
		} finally {
			isLoadingDislike = false;
		}
	}

	async function handleToggleSave() {
		if (!$userProfileStore) {
			alert('Veuillez vous connecter pour enregistrer cet article.');
			return;
		}

		if (isLoadingSave) return;
		isLoadingSave = true;

		try {
			if (isSaved) {
				const { error } = await supabase
					.from('saved_articles')
					.delete()
					.eq('article_id', data.article.id)
					.eq('user_id', $userProfileStore.id);

				if (error) throw error;

				isSaved = false;
			} else {
				const { error } = await supabase.from('saved_articles').insert({
					article_id: data.article.id,
					user_id: $userProfileStore.id
				});

				if (error) throw error;

				isSaved = true;
			}
		} catch (error) {
			console.error('Error toggling save:', error);
			alert('Erreur lors de la mise √† jour de l‚Äôenregistrement.');
		} finally {
			isLoadingSave = false;
		}
	}

	// Fonction corrig√©e pour ajouter un commentaire
	async function handleCommentSubmit() {
		if (!$userProfileStore) {
			alert('Veuillez vous connecter pour laisser un commentaire.');
			return;
		}

		if (newComment.trim() === '') {
			alert('Veuillez entrer un commentaire.');
			return;
		}

		if (isLoadingComment) return;
		isLoadingComment = true;

		try {
			const { data: commentData, error } = await supabase
				.from('comments')
				.insert({
					article_id: data.article.id,
					user_id: $userProfileStore.id,
					content: newComment
				})
				.select('id, user_id')
				.single();

			if (error) throw error;

			// Ajouter le commentaire √† la liste avec user_id
			comments = [
				{
					id: commentData.id,
					content: newComment,
					created_at: new Date().toISOString(),
					user_id: $userProfileStore.id, // Ajouter user_id ici
					user: {
						first_name: $userProfileStore.first_name || 'Utilisateur',
						last_name: $userProfileStore.last_name || 'Inconnu',
						status: $userProfileStore.status,
						specialty: $userProfileStore.specialty
					}
				},
				...comments
			];
			newComment = '';
		} catch (error) {
			console.error('Error adding comment:', error);
			alert('Erreur lors de l‚Äôajout du commentaire.');
		} finally {
			isLoadingComment = false;
		}
	}

	// Fonction pour supprimer un commentaire
	async function handleDeleteComment(commentId) {
		if (!$userProfileStore) {
			alert('Veuillez vous connecter pour supprimer un commentaire.');
			return;
		}

		if (!confirm('√ätes-vous s√ªr de vouloir supprimer ce commentaire ?')) {
			return;
		}

		// V√©rifier si une suppression est d√©j√† en cours pour ce commentaire
		if (isLoadingDelete[commentId]) return;

		// Mettre √† jour l'√©tat de chargement pour ce commentaire
		isLoadingDelete = { ...isLoadingDelete, [commentId]: true };

		try {
			const { error } = await supabase
				.from('comments')
				.delete()
				.eq('id', commentId)
				.eq('user_id', $userProfileStore.id);

			if (error) throw error;

			// Supprimer le commentaire de la liste localement
			comments = comments.filter((comment) => comment.id !== commentId);
		} catch (error) {
			console.error('Error deleting comment:', error);
			alert('Erreur lors de la suppression du commentaire.');
		} finally {
			// R√©initialiser l'√©tat de chargement pour ce commentaire
			isLoadingDelete = { ...isLoadingDelete, [commentId]: false };
		}
	}
</script>

<div class="min-h-screen bg-white px-4 py-12">
	<div class="mx-auto max-w-4xl">
		<!-- Bouton de retour -->
		<button on:click={goBack} class="mb-6 flex items-center text-black hover:text-gray-800">
			<svg
				class="mr-2 h-6 w-6"
				fill="none"
				stroke="currentColor"
				viewBox="0 0 24 24"
				xmlns="http://www.w3.org/2000/svg"
			>
				<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7" />
			</svg>
			Retour
		</button>

		{#if data.error}
			<p class="text-black">Erreur : {data.error}</p>
		{:else if !data.article}
			<p class="text-black">Article non trouv√©.</p>
		{:else}
			<!-- Titre, m√©tadonn√©es et likes/dislikes de l‚Äôarticle -->
			<div class="mb-10 flex flex-col">
				<h1 class="mb-4 text-3xl font-bold text-black">{formatTitle(data.article.title)}</h1>
				<p class="mb-6 text-black">
					Publi√© le {new Date(data.article.published_at).toLocaleDateString()} par
					{data.article.journal}
					‚Ä¢ Grade de recommandation
					<span class="inline-block py-1 text-black">{data.article.grade}</span>
					‚Ä¢ {data.article.disciplines.join(' ‚Ä¢ ')}
				</p>
				<!-- Contenu de l‚Äôarticle -->
				<div class="prose mb-16 max-w-none">
					{#each parsedContent as section}
						{#if section.title}
							<h2 class="mt-6 mb-2 text-xl font-semibold text-black">{section.title}</h2>
						{/if}
						{#each section.content as paragraph}
							<p class="mb-4 text-black">{paragraph}</p>
						{/each}
					{/each}
				</div>

				<!-- R√©f√©rence avec lien PubMed -->
				<div>
					{#if data.article.link}
						<div class="flex items-center text-sm text-gray-600">
							<svg
								class="mr-1 h-4 w-4"
								fill="none"
								stroke="currentColor"
								viewBox="0 0 24 24"
								xmlns="http://www.w3.org/2000/svg"
							>
								<path
									stroke-linecap="round"
									stroke-linejoin="round"
									stroke-width="2"
									d="M13.828 10.172a4 4 0 00-5.656 0l-4 4a4 4 0 105.656 5.656l1.102-1.101m-.758-4.899a4 4 0 005.656 0l4-4a4 4 0 00-5.656-5.656l-1.1 1.1"
								/>
							</svg>
							<span class="mr-1">Lien :</span>
							<a
								href={data.article.link}
								target="_blank"
								rel="noopener noreferrer"
								class="max-w-xs truncate text-blue-600 hover:underline"
							>
								{data.article.link}
							</a>
						</div>
					{/if}
				</div>
			</div>

			<!-- S√©paration claire -->
			<hr class="border-t border-gray-400" />

			<!-- Section des interactions sociales -->
			<div class="mt-20 mb-16">
				<!-- Boutons Like, Dislike, et Enregistrer -->
				<h2 class="mb-4 text-xl font-semibold text-black">{$i18n.articles.feedbackPrompt}</h2>
				<div class="mb-10 flex items-center space-x-4">
					<!-- Bouton pouce vers le haut (Like) -->
					<button
						on:click={handleToggleLike}
						class="relative flex items-center text-black hover:text-gray-800"
					>
						{#if isLoadingLike}
							<svg class="absolute mr-2 h-5 w-5 animate-spin text-black" viewBox="0 0 24 24">
								<circle
									class="opacity-25"
									cx="12"
									cy="12"
									r="10"
									stroke="currentColor"
									stroke-width="4"
								/>
								<path
									class="opacity-75"
									fill="currentColor"
									d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
								/>
							</svg>
						{/if}
						<span class="mr-2 text-2xl {isLoadingLike ? 'opacity-0' : ''}">üëç</span>
						<span class={isLoadingLike ? 'opacity-0' : ''}>{likesCount}</span>
					</button>

					<!-- Bouton pouce vers le bas (Dislike) -->
					<button
						on:click={handleToggleDislike}
						class="relative flex items-center text-black hover:text-gray-800"
					>
						{#if isLoadingDislike}
							<svg class="absolute mr-2 h-5 w-5 animate-spin text-black" viewBox="0 0 24 24">
								<circle
									class="opacity-25"
									cx="12"
									cy="12"
									r="10"
									stroke="currentColor"
									stroke-width="4"
								/>
								<path
									class="opacity-75"
									fill="currentColor"
									d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
								/>
							</svg>
						{/if}
						<span class="mr-2 text-2xl {isLoadingDislike ? 'opacity-0' : ''}">üëé</span>
						<span class={isLoadingDislike ? 'opacity-0' : ''}>{dislikesCount}</span>
					</button>

					<!-- Bouton c≈ìur (Enregistrer) -->
					<button
						on:click={handleToggleSave}
						class="relative flex items-center text-black hover:text-gray-800"
					>
						{#if isLoadingSave}
							<svg class="absolute mr-2 h-5 w-5 animate-spin text-black" viewBox="0 0 24 24">
								<circle
									class="opacity-25"
									cx="12"
									cy="12"
									r="10"
									stroke="currentColor"
									stroke-width="4"
								/>
								<path
									class="opacity-75"
									fill="currentColor"
									d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
								/>
							</svg>
						{/if}
						<span class="mr-2 text-2xl {isLoadingSave ? 'opacity-0' : ''}"
							>{isSaved ? '‚ù§Ô∏è' : 'ü§ç'}</span
						>
						<span class={isLoadingSave ? 'opacity-0' : ''}
							>{isSaved ? 'Enregistr√©' : 'Enregistrer'}</span
						>
					</button>
				</div>

				<!-- Section des commentaires -->
				<div class="mt-12">
					{#if !$userProfileStore}
						<p class="mb-8 text-black">
							Veuillez <a href="/signup" class="text-black hover:underline">vous connecter</a> pour laisser
							un commentaire.
						</p>
					{:else}
						<!-- Formulaire pour ajouter un commentaire -->
						<div class="mb-10">
							<textarea
								name="content"
								bind:value={newComment}
								rows="4"
								class="mb-4 w-full rounded border border-gray-400 bg-white p-3 text-black transition-all duration-200 focus:border-black focus:ring focus:ring-gray-300"
								placeholder="√âcrire un commentaire..."
							></textarea>
							<button
								on:click={handleCommentSubmit}
								disabled={isLoadingComment}
								class="relative rounded bg-black px-6 py-2 text-white transition-colors duration-200 hover:bg-gray-800 hover:text-white disabled:cursor-not-allowed disabled:bg-gray-600"
							>
								{#if isLoadingComment}
									<svg
										class="absolute top-1/2 left-4 mr-2 h-5 w-5 -translate-y-1/2 transform animate-spin text-white"
										viewBox="0 0 24 24"
									>
										<circle
											class="opacity-25"
											cx="12"
											cy="12"
											r="10"
											stroke="currentColor"
											stroke-width="4"
										/>
										<path
											class="opacity-75"
											fill="currentColor"
											d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
										/>
									</svg>
									<span class="opacity-0">Publier</span>
								{/if}
								<span class={isLoadingComment ? 'opacity-0' : ''}>Publier</span>
							</button>
						</div>
					{/if}

					<!-- Liste des commentaires -->
					{#if comments.length === 0}
						<p class="text-black">Aucun commentaire pour le moment.</p>
					{:else}
						<ul class="mt-10 space-y-8">
							{#each comments as comment (comment.id)}
								<li
									class="relative overflow-hidden rounded-lg border border-gray-400 bg-white p-6 shadow-sm"
								>
									<p class="mb-3">{comment.content}</p>
									<p class="text-sm text-black">
										Par {comment.user.status ? `${comment.user.status} ` : ''}{comment.user
											.first_name}
										{comment.user.last_name}{comment.user.specialty
											? `, ${comment.user.specialty}`
											: ''} ‚Ä¢
										{new Date(comment.created_at).toLocaleDateString()}
									</p>
									{#if $userProfileStore && $userProfileStore.id === comment.user_id}
										<button
											on:click={() => handleDeleteComment(comment.id)}
											class="absolute top-4 right-4 text-black hover:text-gray-800"
											disabled={isLoadingDelete[comment.id]}
										>
											{#if isLoadingDelete[comment.id]}
												<svg class="h-5 w-5 animate-spin text-black" viewBox="0 0 24 24">
													<circle
														class="opacity-25"
														cx="12"
														cy="12"
														r="10"
														stroke="currentColor"
														stroke-width="4"
													/>
													<path
														class="opacity-75"
														fill="currentColor"
														d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
													/>
												</svg>
											{:else}
												<svg
													class="h-5 w-5"
													fill="none"
													stroke="currentColor"
													viewBox="0 0 24 24"
													xmlns="http://www.w3.org/2000/svg"
												>
													<path
														stroke-linecap="round"
														stroke-linejoin="round"
														stroke-width="2"
														d="M6 18L18 6M6 6l12 12"
													/>
												</svg>
											{/if}
										</button>
									{/if}
								</li>
							{/each}
						</ul>
					{/if}
				</div>
			</div>
		{/if}
	</div>
</div>

<style>
	.prose :where(h2):not(:where([class~='not-prose'], [class~='not-prose'] *)) {
		font-size: 1.25rem;
		font-weight: 600;
		margin-top: 1.5rem;
		margin-bottom: 0.5rem;
		color: black;
	}
	.prose :where(p):not(:where([class~='not-prose'], [class~='not-prose'] *)) {
		margin-bottom: 1rem;
		color: black;
	}
</style>

--- End of File ---

--- File Path ---
frontend/src/routes/articles/[id]/+page.server.js

export async function load({ params, locals }) {
	const { id } = params;
	const { session, user } = await locals.safeGetSession();
  
	const { data: articleData, error: articleError } = await locals.supabase
	  .from('articles')
	  .select(
		`
		  id,
		  title,
		  content,
		  published_at,
		  link,
		  grade,
		  journal,
		  article_disciplines (
			discipline_id,
			disciplines (name)
		  )
		`
	  )
	  .eq('id', id)
	  .single();
  
	if (articleError || !articleData) {
	  console.error('Error fetching article:', articleError);
	  return {
		article: null,
		comments: [],
		likesCount: 0,
		dislikesCount: 0,
		userHasLiked: false,
		userHasDisliked: false,
		isSaved: false,
		error: articleError?.message || 'Article non trouv√©'
	  };
	}
  
	// R√©cup√©rer les commentaires associ√©s √† l'article avec les d√©tails de l'utilisateur
	const { data: commentsData, error: commentsError } = await locals.supabase
	  .from('comments')
	  .select(
		`
		  id,
		  content,
		  created_at,
		  user_id,
		  user_profiles (id, first_name, last_name, status, specialty)
		`
	  )
	  .eq('article_id', id)
	  .order('created_at', { ascending: false });
  
	if (commentsError) {
	  console.error('Error fetching comments:', commentsError);
	  return {
		article: null,
		comments: [],
		likesCount: 0,
		dislikesCount: 0,
		userHasLiked: false,
		userHasDisliked: false,
		isSaved: false,
		error: commentsError.message
	  };
	}
  
	// Compter le nombre de likes pour l'article
	const { count: likesCount, error: likesCountError } = await locals.supabase
	  .from('article_likes')
	  .select('id', { count: 'exact' })
	  .eq('article_id', id);
  
	if (likesCountError) {
	  console.error('Error counting likes:', likesCountError);
	  return {
		article: null,
		comments: [],
		likesCount: 0,
		dislikesCount: 0,
		userHasLiked: false,
		userHasDisliked: false,
		isSaved: false,
		error: likesCountError.message
	  };
	}
  
	// Compter le nombre de dislikes pour l'article
	const { count: dislikesCount, error: dislikesCountError } = await locals.supabase
	  .from('article_dislikes')
	  .select('id', { count: 'exact' })
	  .eq('article_id', id);
  
	if (dislikesCountError) {
	  console.error('Error counting dislikes:', dislikesCountError);
	  return {
		article: null,
		comments: [],
		likesCount: 0,
		dislikesCount: 0,
		userHasLiked: false,
		userHasDisliked: false,
		isSaved: false,
		error: dislikesCountError.message
	  };
	}
  
	// V√©rifier si l'utilisateur actuel a lik√© l'article
	let userHasLiked = false;
	if (user) {
	  const { data: likeData, error: likeError } = await locals.supabase
		.from('article_likes')
		.select('id')
		.eq('article_id', id)
		.eq('user_id', user.id)
		.single();
  
	  if (likeError && likeError.code !== 'PGRST116') {
		console.error('Error checking like:', likeError);
		return {
		  article: null,
		  comments: [],
		  likesCount: 0,
		  dislikesCount: 0,
		  userHasLiked: false,
		  userHasDisliked: false,
		  isSaved: false,
		  error: likeError.message
		};
	  }
	  userHasLiked = !!likeData;
	}
  
	// V√©rifier si l'utilisateur actuel a dislik√© l'article
	let userHasDisliked = false;
	if (user) {
	  const { data: dislikeData, error: dislikeError } = await locals.supabase
		.from('article_dislikes')
		.select('id')
		.eq('article_id', id)
		.eq('user_id', user.id)
		.single();
  
	  if (dislikeError && dislikeError.code !== 'PGRST116') {
		console.error('Error checking dislike:', dislikeError);
		return {
		  article: null,
		  comments: [],
		  likesCount: 0,
		  dislikesCount: 0,
		  userHasLiked: false,
		  userHasDisliked: false,
		  isSaved: false,
		  error: dislikeError.message
		};
	  }
	  userHasDisliked = !!dislikeData;
	}
  
	// V√©rifier si l'article est enregistr√© par l'utilisateur via saved_articles
	let isSaved = false;
	if (user) {
	  const { data: savedData, error: savedError } = await locals.supabase
		.from('saved_articles')
		.select('id')
		.eq('article_id', id)
		.eq('user_id', user.id)
		.single();
  
	  if (savedError && savedError.code !== 'PGRST116') {
		console.error('Error checking saved article:', savedError);
		return {
		  article: null,
		  comments: [],
		  likesCount: 0,
		  dislikesCount: 0,
		  userHasLiked: false,
		  userHasDisliked: false,
		  isSaved: false,
		  error: savedError.message
		};
	  }
	  isSaved = !!savedData;
	}
  
	// Formater les donn√©es pour inclure les disciplines et les commentaires
	const formattedArticle = {
	  ...articleData,
	  disciplines: articleData.article_disciplines.map((ad) => ad.disciplines.name),
	  journal: articleData.journal
	};
  
	const formattedComments = commentsData.map((comment) => ({
	  id: comment.id,
	  content: comment.content,
	  created_at: comment.created_at,
	  user_id: comment.user_id,
	  user: {
		id: comment.user_profiles.id,
		first_name: comment.user_profiles.first_name || 'Utilisateur',
		last_name: comment.user_profiles.last_name || 'Inconnu',
		status: comment.user_profiles.status,
		specialty: comment.user_profiles.specialty
	  }
	}));
  
	return {
	  article: formattedArticle,
	  comments: formattedComments,
	  likesCount,
	  dislikesCount,
	  userHasLiked,
	  userHasDisliked,
	  isSaved
	};
  }
--- End of File ---

--- File Path ---
frontend/src/routes/donation-status/+page.svelte

--- File Path ---
frontend/src/routes/donation-status/+page.svelte

<script lang="ts">
    import { page } from '$app/stores';
    import { onMount } from 'svelte';
    import { CheckCircle, XCircle, Loader } from 'lucide-svelte'; // Using lucide icons
    import { i18n } from '$lib/i18n';

    let status: 'loading' | 'success' | 'error' | 'processing' = $state('loading');
    let errorMessage = $state('');
    let paymentIntentId = $state<string | null>(null);
    let donationAmount = $state<number | null>(null);

    onMount(async () => {
        const clientSecret = $page.url.searchParams.get('payment_intent_client_secret');
        paymentIntentId = $page.url.searchParams.get('payment_intent');
        const redirectStatus = $page.url.searchParams.get('redirect_status');

        if (!clientSecret || !paymentIntentId) {
            errorMessage = $i18n.donations.status.errorMissingParams;
            status = 'error';
            return;
        }

        // No need to fetch Stripe client-side here if just checking status
        // Can add if needed for more details later

        if (redirectStatus === 'succeeded') {
            status = 'success';
            // Optionally fetch amount from backend if needed, but for now just show success
            // Try to get amount from local storage or pass via state if possible
        } else if (redirectStatus === 'processing') {
            status = 'processing';
        } else {
            status = 'error';
            // Try to get a more specific error message if provided by Stripe
            errorMessage = $page.url.searchParams.get('error_message') || $i18n.donations.status.errorGeneric;
        }
    });
</script>

<svelte:head>
    <title>{$i18n.donations.status.title} - Veille M√©dicale</title>
</svelte:head>

<main class="flex min-h-screen flex-col items-center justify-center bg-black px-4 py-12 text-white">
    <div class="w-full max-w-md rounded-lg bg-gray-800 p-8 text-center shadow-lg">
        {#if status === 'loading'}
            <Loader class="mx-auto mb-4 h-16 w-16 animate-spin text-orange-500" />
            <h1 class="mb-2 text-2xl font-semibold">{$i18n.donations.status.loadingTitle}</h1>
            <p class="text-gray-400">{$i18n.donations.status.loadingText}</p>
        {:else if status === 'success'}
            <CheckCircle class="mx-auto mb-4 h-16 w-16 text-green-500" />
            <h1 class="mb-2 text-2xl font-semibold">{$i18n.donations.status.successTitle}</h1>
            <p class="text-gray-300">
                {$i18n.donations.status.successText}
                {#if paymentIntentId}
                    <span class="mt-2 block text-xs text-gray-500">ID: {paymentIntentId}</span>
                {/if}
            </p>
            <a href="/" class="mt-6 inline-block rounded-lg bg-orange-600 px-6 py-2 font-medium text-white transition hover:bg-orange-700">
                {$i18n.donations.status.backHomeButton}
            </a>
        {:else if status === 'processing'}
             <Loader class="mx-auto mb-4 h-16 w-16 animate-spin text-orange-500" />
             <h1 class="mb-2 text-2xl font-semibold">{$i18n.donations.status.processingTitle}</h1>
             <p class="text-gray-300">{$i18n.donations.status.processingText}</p>
             {#if paymentIntentId}
                <span class="mt-2 block text-xs text-gray-500">ID: {paymentIntentId}</span>
             {/if}
             <a href="/" class="mt-6 inline-block rounded-lg bg-gray-600 px-6 py-2 font-medium text-white transition hover:bg-gray-700">
                {$i18n.donations.status.backHomeButton}
            </a>
        {:else if status === 'error'}
            <XCircle class="mx-auto mb-4 h-16 w-16 text-red-500" />
            <h1 class="mb-2 text-2xl font-semibold">{$i18n.donations.status.errorTitle}</h1>
            <p class="text-gray-300">
                {errorMessage || $i18n.donations.status.errorGeneric}
            </p>
             {#if paymentIntentId}
                <span class="mt-2 block text-xs text-gray-500">ID: {paymentIntentId}</span>
             {/if}
            <a href="/donations" class="mt-6 inline-block rounded-lg bg-orange-600 px-6 py-2 font-medium text-white transition hover:bg-orange-700">
                {$i18n.donations.status.retryButton}
            </a>
        {/if}
    </div>
</main>
--- End of File ---

--- File Path ---
frontend/src/routes/logout/+server.ts

import { json, redirect } from '@sveltejs/kit';

export const POST = async ({ locals, cookies, url }) => {
  console.log('Starting logout process...');

  // V√©rifier si locals.supabase est d√©fini
  if (!locals.supabase) {
    console.error('Supabase client not initialized in locals');
    return json({ error: 'Supabase client not initialized' }, { status: 500 });
  }

  // D√©connexion via Supabase
  console.log('Calling supabase.auth.signOut()...');
  const { error } = await locals.supabase.auth.signOut();
  if (error) {
    console.error('Server-side logout error:', error);
    return json({ error: error.message }, { status: 500 });
  }

  // V√©rifier l'URL pour les options de cookie
  console.log('Request URL:', url);
  const isLocalhost = url.hostname.includes('localhost');
  console.log('Is localhost:', isLocalhost);

  // Supprimer manuellement le cookie d'authentification
  const cookieName = 'sb-etxelhjnqbrgwuitltyk-auth-token';
  console.log('Cookies before deletion:', cookies.getAll());
  cookies.delete(cookieName, {
    path: '/',
    httpOnly: true,
    secure: !isLocalhost,
    sameSite: isLocalhost ? 'lax' : 'none',
    domain: isLocalhost ? 'localhost' : '.veillemedicale.fr',
  });
  console.log('Cookies after deletion:', cookies.getAll());

  console.log('Cookie deleted successfully, redirecting...');
  throw redirect(303, '/'); // La redirection doit √™tre en dehors du try-catch
};
--- End of File ---

--- File Path ---
frontend/src/routes/checkout/+page.server.ts

import { checkUserSubscription } from '$lib/utils/subscriptionUtils';
import { redirect } from '@sveltejs/kit';

export async function load({ locals }) {
	const { session, user } = await locals.safeGetSession();

	if (!user || !session) {
		throw redirect(303, '/login?redirect=/ma-veille');
	}
    const { isActive, error: subError } = await checkUserSubscription(locals.supabase, user?.id);

    if (subError) {
        console.error('Subscription check failed:', subError);
        return {
            isSubscribed: false,
            error: subError
        };
    }

    if (isActive) { throw redirect(303, '/ma-veille'); }
}
--- End of File ---

--- File Path ---
frontend/src/routes/checkout/+page.svelte

<!-- src/routes/checkout/+page.svelte -->
<script lang="ts">
    import CheckoutForm from '$lib/components/CheckoutForm.svelte';
</script>

<div class="flex w-full justify-center py-8 md:py-12">
    <CheckoutForm />
</div>
--- End of File ---

--- File Path ---
frontend/src/routes/+layout.server.ts

// +layout.server.ts
import type { LayoutServerLoad } from './$types';

export const load: LayoutServerLoad = async ({ locals: { safeGetSession }, cookies }) => {
  const { session, user } = await safeGetSession();
  // console.log('Layout server session:', session);
  // console.log('Layout server user:', user);

  return {
    session,
    user,
    cookies: cookies.getAll(),
  };
};
--- End of File ---

--- File Path ---
frontend/src/routes/7zKw193hzWSMiAnhUnYbcNWS706lqGvZ/+page.svelte

<!--- File Path: frontend/src/routes/internal-stats-area/+page.svelte --->
<script lang="ts">
	import { AlertTriangle, Eye, EyeOff, Loader2 } from 'lucide-svelte';
	import { onMount } from 'svelte';
// Import Select components
	import { supabase } from '$lib/supabase'; // Import your configured Supabase client

	// --- Interfaces for fetched data ---
	interface Discipline {
		id: number;
		name: string;
	}
	interface SubDiscipline {
		id: number;
		name: string;
		discipline_id: number;
	}

	// --- Configuration (Password - Keep as is) ---
	const STORED_HASH = '93113621a41a0799762af6f34736347ede2a275cc35e70d6917fd5e38fd4e812';
	const SALT = 'pggts1DHI343haAXSNqR0mRnIiQ7Wm3e';

	// --- Authentication State (Keep as is) ---
	let isAuthenticated = $state(false);
	let passwordInput = $state('');
	let authErrorMessage = $state(''); // Renamed for clarity
	let showPassword = $state(false);
	let cryptoAvailable = $state(true);

	// --- Dashboard State ---
	let allDisciplines = $state<Discipline[]>([]);
	let selectedDisciplineId = $state<number | null>(null);
	let availableSubDisciplines = $state<SubDiscipline[]>([]);
	// Use a special string value for the "all subs" option, or null
	const ALL_SUBS_VALUE = '__ALL_SUBS__';
	let selectedSubDisciplineIdentifier = $state<number | string | null>(ALL_SUBS_VALUE); // Can be ID (number) or ALL_SUBS_VALUE (string)
	let subscriberCount = $state<number | null>(null);
	let isLoadingDisciplines = $state(false);
	let isLoadingSubDisciplines = $state(false);
	let isLoadingCount = $state(false);
	let fetchError = $state(''); // For data fetching errors

	// --- NEW: Daily Stats State ---
	const today = new Date().toISOString().split('T')[0]; // Get YYYY-MM-DD for today
	let selectedStatDate = $state<string>(today); // Default to today
	let dailyStats = $state<DailyStats | null>(null);
	let isLoadingStats = $state(false);
	let statsFetchError = $state('');

	// --- Crypto Check (Keep as is) ---
	onMount(() => {
		if (!window.crypto || !window.crypto.subtle) {
			console.error('SubtleCrypto API not available!');
			authErrorMessage = "Erreur: L'API de cryptographie n'est pas disponible.";
			cryptoAvailable = false;
		}
	});

	// --- Hashing Function (Keep as is) ---
	async function hashPasswordWithSalt(password: string, salt: string): Promise<string | null> {
		if (!cryptoAvailable) return null;
		try {
			const encoder = new TextEncoder();
			const data = encoder.encode(password + salt);
			const hashBuffer = await crypto.subtle.digest('SHA-256', data);
			const hashArray = Array.from(new Uint8Array(hashBuffer));
			const hashHex = hashArray.map((b) => b.toString(16).padStart(2, '0')).join('');
			return hashHex;
		} catch (error) {
			console.error('Hashing error:', error);
			authErrorMessage = 'Erreur lors du hachage du mot de passe.';
			return null;
		}
	}

	// --- Auth Submit Function (Keep as is) ---
	async function handlePasswordSubmit() {
		if (!cryptoAvailable) return;
		authErrorMessage = '';
		const inputHash = await hashPasswordWithSalt(passwordInput, SALT);
		if (inputHash === null) return;
		let difference = 0;
		const len = Math.max(inputHash.length, STORED_HASH.length);
		for (let i = 0; i < len; i++) {
			difference |= (inputHash.charCodeAt(i) || 0) ^ (STORED_HASH.charCodeAt(i) || 0);
		}
		if (difference === 0 && inputHash.length === STORED_HASH.length) {
			isAuthenticated = true;
		} else {
			authErrorMessage = 'Mot de passe incorrect.';
			passwordInput = '';
		}
	}

	// --- Toggle Password Visibility (Keep as is) ---
	function togglePasswordVisibility() {
		showPassword = !showPassword;
	}

	// --- Fetch All Disciplines once authenticated ---
	async function fetchDisciplines() {
		if (!isAuthenticated || allDisciplines.length > 0) return; // Fetch only once needed
		console.log('Fetching all disciplines...');
		isLoadingDisciplines = true;
		fetchError = '';
		try {
			const { data, error } = await supabase
				.from('disciplines')
				.select('id, name')
				.order('name', { ascending: true });
			if (error) throw error;
			allDisciplines = data || [];
			console.log('Disciplines fetched:', allDisciplines.length);
		} catch (err: any) {
			console.error('Error fetching disciplines:', err);
			fetchError = `Erreur chargement disciplines: ${err.message}`;
			allDisciplines = [];
		} finally {
			isLoadingDisciplines = false;
		}
	}
	$effect(() => {
		if (isAuthenticated) {
			fetchDisciplines();
		}
	});

	// --- Fetch Sub-Disciplines when Main Discipline changes ---
	async function fetchSubDisciplines(disciplineId: number | null) {
		availableSubDisciplines = []; // Reset
		selectedSubDisciplineIdentifier = null; // Reset to 'All'
		subscriberCount = null; // Reset count
		fetchError = '';
		if (!disciplineId) return; // Don't fetch if no main discipline selected

		console.log('Fetching sub-disciplines for ID:', disciplineId);
		isLoadingSubDisciplines = true;
		try {
			const { data, error } = await supabase
				.from('sub_disciplines')
				.select('id, name, discipline_id')
				.eq('discipline_id', disciplineId)
				.order('name', { ascending: true });
			if (error) throw error;
			availableSubDisciplines = data || [];
			console.log('Sub-disciplines fetched:', availableSubDisciplines.length);
		} catch (err: any) {
			console.error('Error fetching sub-disciplines:', err);
			fetchError = `Erreur chargement sous-disciplines: ${err.message}`;
		} finally {
			isLoadingSubDisciplines = false;
		}
	}
	$effect(() => {
		// Trigger fetch when selectedDisciplineId changes
		fetchSubDisciplines(selectedDisciplineId);
	});

	// --- Fetch Subscriber Count when selection changes ---
	async function fetchSubscriberCount() {
		// Reset count and error initially
		subscriberCount = null;
		fetchError = '';

		if (selectedDisciplineId === null) {
			console.log('Count Fetch: No main discipline selected.');
			isLoadingCount = false;
			return;
		}

		isLoadingCount = true;
		console.log(
			`Fetching count for Discipline ID: ${selectedDisciplineId}, Sub ID: ${selectedSubDisciplineIdentifier}`
		);

		try {
			// Case 1: Specific Sub-Discipline selected
			if (selectedSubDisciplineIdentifier !== null) {
				console.log(`Querying count for Specific Sub-Discipline ID: ${selectedSubDisciplineIdentifier}`);
				const { count, error } = await supabase
					.from('user_subscriptions')
					.select('id', { count: 'exact', head: true })
					.eq('sub_discipline_id', selectedSubDisciplineIdentifier);
				if (error) throw error;
				console.log('Count query result:', count);
				subscriberCount = count ?? 0;
				console.log('Subscriber count result:', subscriberCount);
			}
			// Case 2: "All" Sub-Disciplines selected (selectedSubDisciplineIdentifier is null)
			else {
				console.log(`Querying count for ALL users in Main Discipline ID: ${selectedDisciplineId}`);
				const { data, count, error } = await supabase
					.from('user_subscriptions')
					.select('*', { count: 'exact', head: true })
					.eq('discipline_id', selectedDisciplineId)
					.is('sub_discipline_id', null);
				if (error) throw error;
				console.log("DATA", data, "ERROR", error);
				console.log('Count query result:', count);
				subscriberCount = count ?? 0;
				console.log('Subscriber count result:', subscriberCount);
			}
		} catch (err: any) {
			console.error('Error fetching subscriber count:', err);
			fetchError = `Erreur chargement du nombre d'utilisateur: ${err.message}`;
			subscriberCount = null;
		} finally {
			isLoadingCount = false;
		}}
	$effect(() => {
		fetchSubscriberCount();
	});
	// --- Derived value for display ---
	const selectedDisciplineName = $derived(
		allDisciplines.find((d) => d.id === selectedDisciplineId)?.name ?? 'N/A'
	);
	const selectedSubDisciplineName = $derived(
		selectedSubDisciplineIdentifier === ALL_SUBS_VALUE
			? 'Toutes les sous-sp√©cialit√©s'
			: availableSubDisciplines.find((s) => s.id === selectedSubDisciplineIdentifier)?.name ??
				'N/A'
	);

	// --- NEW: Fetch Daily Stats ---
	async function fetchDailyStats() {
		if (!isAuthenticated || !selectedStatDate) {
			dailyStats = null;
			return;
		}

		console.log(`Fetching stats for date: ${selectedStatDate}`);
		isLoadingStats = true;
		statsFetchError = '';
		dailyStats = null;

		try {
			const { data, error } = await supabase.rpc('get_daily_read_stats', {
				 query_date: selectedStatDate
			});

			if (error) throw error;

			// RPC returns an array, potentially empty if no reads on that day
			if (data && data.length > 0) {
				dailyStats = data[0]; // Get the first (and only expected) row
				console.log('Daily stats received:', dailyStats);
			} else {
				// Set stats to zero if no data found for the date
				dailyStats = {
					read_day: selectedStatDate,
					total_reads_per_day: 0,
					unique_users_per_day: 0
				};
				console.log('No reads found for date, setting stats to zero.');
			}

		} catch (err: any) {
			console.error('Error fetching daily stats:', err);
			statsFetchError = `Erreur chargement des stats: ${err.message}`;
			dailyStats = null;
		} finally {
			isLoadingStats = false;
		}
	}
	// Trigger stats fetch when date changes or on auth
	$effect(() => {
		if (isAuthenticated && selectedStatDate) {
			 fetchDailyStats();
		}
	});
</script>

<svelte:head>
	<title>Dashboard Interne</title>
	<meta name="robots" content="noindex, nofollow" />
</svelte:head>

<div class="flex min-h-screen items-center justify-center bg-black px-4 py-12 text-white">
	{#if !isAuthenticated}
		<!-- Password Entry Form (Keep as is) -->
		<div class="w-full max-w-md rounded-xl bg-gray-800 p-8 shadow-xl">
			<h1 class="mb-6 text-center text-2xl font-bold text-white">Acc√®s Dashboard</h1>
			{#if !cryptoAvailable}
				<div
					role="alert"
					class="mb-6 flex items-center gap-2 rounded-md border border-red-700 bg-red-900/40 p-3 text-sm text-red-300"
				>
					<AlertTriangle class="h-4 w-4 flex-shrink-0" />
					{authErrorMessage || 'API Crypto non disponible.'}
				</div>
			{:else}
				<p class="mb-6 text-center text-sm text-gray-400">
					Veuillez entrer le mot de passe pour acc√©der aux statistiques.
				</p>
				<form on:submit|preventDefault={handlePasswordSubmit} class="space-y-6">
					<div>
						<label for="password" class="block text-sm font-medium text-gray-300">Mot de passe</label
						>
						<div class="relative mt-1">
							<input
								id="password"
								name="password"
								type={showPassword ? 'text' : 'password'}
								bind:value={passwordInput}
								required
								class="block w-full rounded-lg border border-gray-600 bg-gray-700 px-4 py-3 text-white placeholder-gray-400 shadow-sm transition-colors duration-200 focus:border-teal-500 focus:outline-none focus:ring-2 focus:ring-teal-500 focus:ring-offset-2 focus:ring-offset-gray-800"
								placeholder="‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢"
								disabled={!cryptoAvailable}
							/>
							<button
								type="button"
								on:click={togglePasswordVisibility}
								class="absolute inset-y-0 right-0 flex items-center px-3 text-gray-400 hover:text-gray-200 focus:outline-none focus:ring-1 focus:ring-teal-500 rounded-r-lg"
								aria-label={showPassword ? 'Cacher le mot de passe' : 'Montrer le mot de passe'}
								disabled={!cryptoAvailable}
							>
								{#if showPassword} <EyeOff class="h-5 w-5" /> {:else} <Eye class="h-5 w-5" /> {/if}
							</button>
						</div>
					</div>

					{#if authErrorMessage && cryptoAvailable}
						<div
							role="alert"
							class="flex items-center gap-2 rounded-md border border-red-700 bg-red-900/40 p-3 text-sm text-red-300"
						>
							<AlertTriangle class="h-4 w-4 flex-shrink-0" />
							{authErrorMessage}
						</div>
					{/if}

					<button
						type="submit"
						class="w-full rounded-lg bg-teal-600 px-5 py-3 text-base font-semibold text-white shadow-md transition-colors duration-300 hover:bg-teal-700 focus:outline-none focus:ring-2 focus:ring-teal-500 focus:ring-offset-2 focus:ring-offset-gray-800 disabled:opacity-50 disabled:cursor-not-allowed"
						disabled={!cryptoAvailable}
					>
						Acc√©der
					</button>
				</form>
			{/if}
		</div>
	{:else}
		<!-- Actual Dashboard Content -->
		<div class="w-full max-w-4xl rounded-xl bg-gray-800 p-8 shadow-xl">
			<h1 class="mb-8 border-b border-gray-700 pb-4 text-3xl font-bold text-white">
				Dashboard Statistique
			</h1>

			<!-- Subscription Count Section -->
			<section class="mb-10 rounded-lg bg-gray-700 p-6">
				<h2 class="mb-5 text-xl font-semibold text-white">Nombre d'utilisateur par Sp√©cialit√©</h2>

				{#if fetchError}
					<div
						role="alert"
						class="mb-4 flex items-center gap-2 rounded-md border border-red-700 bg-red-900/40 p-3 text-sm text-red-300"
					>
						<AlertTriangle class="h-4 w-4 flex-shrink-0" />
						{fetchError}
					</div>
				{/if}

				<div class="grid grid-cols-1 gap-4 sm:grid-cols-2">
					<!-- Discipline Dropdown (Native HTML Select) -->
					<div>
						<label for="discipline-select" class="mb-1 block text-sm font-medium text-gray-300">Sp√©cialit√© Principale</label>
						{#if isLoadingDisciplines}
							<div class="h-10 animate-pulse rounded-lg bg-gray-600"></div>
						{:else}
							<div class="relative">
								<select
									id="discipline-select"
									class="block w-full appearance-none rounded-lg border border-gray-600 bg-gray-800 px-3 py-2 pr-8 text-sm text-white focus:border-teal-500 focus:outline-none focus:ring-2 focus:ring-teal-500"
									bind:value={selectedDisciplineId}
									aria-label="S√©lectionner une sp√©cialit√© principale"
									disabled={isLoadingDisciplines}
								>
									<option value={null} selected={selectedDisciplineId === null}>-- Choisir une sp√©cialit√© --</option>
									{#each allDisciplines as discipline (discipline.id)}
										<option value={discipline.id}>{discipline.name}</option>
									{/each}
								</select>
								<div class="pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 text-gray-400">
									<svg class="h-4 w-4 fill-current" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20"><path d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z"/></svg>
								</div>
							</div>
						{/if}
					</div>

					<!-- Sub-Discipline Dropdown (Native HTML Select) -->
					<div>
						<label for="subdiscipline-select" class="mb-1 block text-sm font-medium text-gray-300">Sous-sp√©cialit√© (Optionnel)</label>
						{#if isLoadingSubDisciplines && selectedDisciplineId}
							<div class="h-10 animate-pulse rounded-lg bg-gray-600"></div>
						{:else}
							<div class="relative">
								<select
									id="subdiscipline-select"
									class="block w-full appearance-none rounded-lg border border-gray-600 bg-gray-800 px-3 py-2 pr-8 text-sm text-white focus:border-teal-500 focus:outline-none focus:ring-2 focus:ring-teal-500 disabled:opacity-50 disabled:cursor-not-allowed"
									bind:value={selectedSubDisciplineIdentifier}
									aria-label="S√©lectionner une sous-sp√©cialit√©"
									disabled={isLoadingSubDisciplines || !selectedDisciplineId}
								>
									<option value={null} selected={selectedSubDisciplineIdentifier === null}>-- Toutes les sous-sp√©cialit√©s --</option>
									{#if availableSubDisciplines.length === 0 && selectedDisciplineId && !isLoadingSubDisciplines}
										 <option value={null} disabled>Aucune sous-sp√©cialit√©</option>
									{:else}
										{#each availableSubDisciplines as sub (sub.id)}
											<option value={sub.id}>{sub.name}</option>
										{/each}
									{/if}
								</select>
								<div class="pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 text-gray-400">
									<svg class="h-4 w-4 fill-current" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20"><path d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z"/></svg>
								</div>
							</div>
						{/if}
					</div>
				</div>

				<!-- Display Count Result -->
				<div class="mt-6 rounded-lg bg-gray-800 p-4 text-center">
					{#if isLoadingCount}
						<div class="flex items-center justify-center gap-2 text-gray-400">
							<Loader2 class="h-5 w-5 animate-spin" />
							Chargement du nombre...
						</div>
					{:else if subscriberCount !== null}
						<p class="text-sm text-gray-300">Nombre d'abonn√©s pour la s√©lection :</p>
						<p class="mt-1 text-4xl font-bold text-teal-400">
							{subscriberCount.toLocaleString('fr-FR')}
						</p>
					{:else if selectedDisciplineId}
						<p class="text-sm text-gray-500 italic">Veuillez patienter ou s√©lectionner une sous-sp√©cialit√©.</p>
					{:else}
						<p class="text-sm text-gray-500 italic">S√©lectionnez une sp√©cialit√© principale.</p>
					{/if}
				</div>
			</section>

			<!-- NEW: Daily Stats Section -->
			<section class="rounded-lg bg-gray-700 p-6">
				<h2 class="mb-5 text-xl font-semibold text-white">Statistiques de Lecture Journali√®res</h2>

				{#if statsFetchError}
					<div role="alert" class="mb-4 flex items-center gap-2 rounded-md border border-red-700 bg-red-900/40 p-3 text-sm text-red-300">
						<AlertTriangle class="h-4 w-4 flex-shrink-0" />
						{statsFetchError}
					</div>
				{/if}

				<!-- Date Picker -->
				<div class="mb-6 max-w-xs">
					<label for="stats-date" class="mb-1 block text-sm font-medium text-gray-300">Choisir une date</label>
					<input
						type="date"
						id="stats-date"
						bind:value={selectedStatDate}
						max={today}
						class="block w-full rounded-lg border border-gray-600 bg-gray-800 px-3 py-2 text-sm text-white focus:border-teal-500 focus:outline-none focus:ring-2 focus:ring-teal-500"
						aria-label="S√©lectionner une date pour les statistiques"
						disabled={isLoadingStats}
					/>
				</div>

				<!-- Display Stats Result -->
				<div class="rounded-lg bg-gray-800 p-4">
					{#if isLoadingStats}
						<div class="flex items-center justify-center gap-2 text-gray-400">
							<Loader2 class="h-5 w-5 animate-spin" />
							Chargement des statistiques...
						</div>
					{:else if dailyStats}
						<div class="grid grid-cols-1 sm:grid-cols-2 gap-4 text-center">
							<div>
								<p class="text-sm text-gray-300">Articles lus le {new Date(dailyStats.read_day + 'T00:00:00Z').toLocaleDateString('fr-FR', { timeZone: 'UTC' })} :</p>
						        <p class="mt-1 text-3xl font-bold text-teal-400"> {dailyStats.total_reads_per_day.toLocaleString('fr-FR')} </p>
							</div>
							<div>
								<p class="text-sm text-gray-300">Utilisateurs uniques :</p>
						        <p class="mt-1 text-3xl font-bold text-teal-400"> {dailyStats.unique_users_per_day.toLocaleString('fr-FR')} </p>
							</div>
						</div>
					{:else if !statsFetchError}
						<p class="text-center text-sm text-gray-500 italic">Aucune donn√©e pour la date s√©lectionn√©e.</p>
					{/if}
				</div>
			</section>

			<!-- Placeholder for other stats (Keep as is) -->
			<!-- <div class="grid grid-cols-1 md:grid-cols-2 gap-6"> ... -->
		</div>
	{/if}
</div>

<style>
	/* Basic appearance none for select */
	select {
		-webkit-appearance: none;
		-moz-appearance: none;
		appearance: none;
		background-image: none; /* Override default if necessary */
	}
	/* Add scrollbar styling if Select component doesn't handle it */
	.scrollbar-thin {
		scrollbar-width: thin;
		scrollbar-color: #14b8a6 #374151; /* thumb track */
	}
	.scrollbar-thin::-webkit-scrollbar {
		width: 6px;
		height: 6px;
	}
	.scrollbar-thin::-webkit-scrollbar-track {
		background: #374151; /* gray-700 */
		border-radius: 3px;
	}
	.scrollbar-thin::-webkit-scrollbar-thumb {
		background-color: #14b8a6; /* teal-500 */
		border-radius: 3px;
	}
	.scrollbar-thin::-webkit-scrollbar-thumb:hover {
		background-color: #0f766e; /* teal-600 */
	}
</style>
--- End of File ---

--- File Path ---
frontend/src/routes/ma-veille/+page.server.ts

import { checkUserSubscription } from '$lib/utils/subscriptionUtils';
import { error, redirect } from '@sveltejs/kit';

interface SubDisciplineInfo { id: number; name: string; }
interface DisciplineStructure {
    id: number;
    name: string;
    subscribed_sub_disciplines: SubDisciplineInfo[];
}

export async function load({ locals, url }) {
	const { session, user } = await locals.safeGetSession();

	if (!user || !session) {
		throw redirect(303, '/login?redirect=/ma-veille');
	}
    const { isActive, error: subError } = await checkUserSubscription(locals.supabase, user?.id);

    if (subError) {
        console.error('Subscription check failed:', subError);
        return {
            isSubscribed: false,
            initialMainFilterValue: null,
            initialSubFilterValue: null,
            userSubscriptionStructure: [],
            savedArticleIds: [],
            articleData: null,
            error: subError
        };
    }

    if (false && !isActive) {
        // TODO: change when subscription is implemented
        console.log('User is not subscribed, preparing non-subscribed page data');
        return {
            isSubscribed: false,
            initialMainFilterValue: null,
            initialSubFilterValue: null,
            userSubscriptionStructure: [],
            savedArticleIds: [],
            articleData: null,
            error: 'Utilisateur non abonn√©.'
        };
    }

	// --- Get URL Parameters ---
	let urlSubDisciplineName = url.searchParams.get('discipline');
	const urlId = urlSubDisciplineName?.includes('?id=') ? urlSubDisciplineName?.split('?id=')[1] || null : 0;
    urlSubDisciplineName = urlSubDisciplineName?.includes('?') ? urlSubDisciplineName?.split('?')[0] || null : urlSubDisciplineName;
    console.log(`URL parameters - discipline: ${urlSubDisciplineName}, id: ${urlId}`);

    let initialMainFilterValue: string | null = null;
    let initialSubFilterValue: string | null = null;

	try {
        // --- Fetch User Subscription Structure (Needed for dropdown options AND default values) ---
        const { data: userSubscriptionStructure, error: structureError } = await locals.supabase.rpc(
            'get_user_subscription_structure_with_subs',
            { p_user_id: user.id }
        );
        if (structureError) throw error(500, `DB Error fetching structure: ${structureError.message}`);
        const structuredData: DisciplineStructure[] = (userSubscriptionStructure || []);
         // Sort main disciplines alphabetically
        structuredData.sort((a, b) => a.name.localeCompare(b.name, 'fr', { sensitivity: 'base' }));
        // Sort sub-disciplines within each main discipline
        structuredData.forEach(d => d.subscribed_sub_disciplines?.sort((a, b) => a.name.localeCompare(b.name, 'fr', { sensitivity: 'base' })));

        // --- Determine Initial Dropdown States ---
        if (urlSubDisciplineName) {
            // --- A specific name (potentially sub) was provided in the URL ---
            console.log(`Attempting to find parent for sub-discipline: ${urlSubDisciplineName}`);
            // Query to find the sub-discipline and its parent
            const { data: parentInfo, error: parentError } = await locals.supabase
                .from('sub_disciplines')
                .select(`
                    name,
                    disciplines ( id, name )
                `)
                .eq('name', urlSubDisciplineName)
                .maybeSingle(); // Use maybeSingle as it might not exist

            if (parentError) {
                console.error(`DB Error finding parent for ${urlSubDisciplineName}:`, parentError);
                // Fallback to default if lookup fails
            } else if (parentInfo && parentInfo.disciplines) {
                 // Check if the user is actually subscribed to this found parent/sub combination
                 const parentId = parentInfo.disciplines.id;
                 const subName = parentInfo.name;
                 const isSubscribed = structuredData.some(main =>
                    main.id === parentId && main.subscribed_sub_disciplines?.some(sub => sub.name === subName)
                 );

                 if (isSubscribed) {
                    initialMainFilterValue = parentInfo.disciplines.name;
                    initialSubFilterValue = parentInfo.name; // The name from the URL param is the sub-filter
                    console.log(`Found parent "${initialMainFilterValue}" for sub "${initialSubFilterValue}". User is subscribed.`);
                 } else {
                    console.warn(`User is not subscribed to the discipline/sub-discipline found for URL param: ${urlSubDisciplineName}`);
                    // Fallback to default
                 }
            } else {
                 console.warn(`Sub-discipline "${urlSubDisciplineName}" not found in database.`);
                 // Fallback to default
            }
        }

        let articleData = null; // Initialize articleData to null
        if (urlId != 0) {
            const { data, error: articleError } = await locals.supabase
                .from('articles')
                .select(`title, id`)
                .eq('id', urlId)
                .single();
            if (articleError) {
                console.error(`DB Error fetching article: ${articleError.message}`);
            } else {
                articleData = data;
            }
        }

        // --- Set Default if Initial Values are Still Null ---
        if (initialMainFilterValue === null && structuredData.length > 0) {
             initialMainFilterValue = structuredData[0].name; // Default to first subscribed main discipline
             initialSubFilterValue = null; // Default sub to null (meaning "All")
             console.log(`Setting default initial filters: Main="${initialMainFilterValue}", Sub=NULL`);
        } else if (structuredData.length === 0) {
             console.log("User has no subscriptions, initial filters remain null.");
             // The page component should handle the empty state
        }

        // --- Fetch saved articles (remains the same) ---
        const { data: savedArticlesData, error: savedArticlesError } = await locals.supabase
            .from('saved_articles').select('article_id').eq('user_id', user.id);
        if (savedArticlesError) throw error(500, `DB Error fetching saved: ${savedArticlesError.message}`);
        const savedArticleIds = savedArticlesData?.map((saved) => saved.article_id) || [];

        return {
            isSubscribed: true,
            initialMainFilterValue,
            initialSubFilterValue,
            userSubscriptionStructure: structuredData,
            savedArticleIds,
            articleData,
            error: null
        };

    } catch (err) {
         console.error('Error in /ma-veille load function:', err);
         if (err && typeof err === 'object' && 'status' in err) throw err;
         throw error(500, 'Une erreur interne est survenue.');
    }
}
--- End of File ---

--- File Path ---
frontend/src/routes/ma-veille/+page.svelte

<!-- /src/routes/ma-veille -->
<script lang="ts">
	// Correctly import 'page', not '$page'
	import ArticleListView from '$lib/components/articles/ArticleListView.svelte';
	import { i18n } from '$lib/i18n';
	import userProfileStore from '$lib/stores/user';

	// --- Type for the structure from server ---
	interface SubDisciplineInfo { id: number; name: string; }
	interface DisciplineStructure {
		id: number;
		name: string;
		subscribed_sub_disciplines: SubDisciplineInfo[];
	}

	// Get data loaded by +page.server.ts
	const { data } = $props<{
		data: {
			isSubscribed: boolean;
			initialMainFilterValue: string | null; // Provided by server
			initialSubFilterValue: string | null;  // Provided by server
			userSubscriptionStructure: DisciplineStructure[];
			savedArticleIds: (string | number)[];
			articleData: any;
			error: string | null;
		}
	}>();
	console.log("data", data);
	console.log("data.isSubscribed", data.isSubscribed);

	const userStructure = data.userSubscriptionStructure || [];
	const hasSubscriptions = userStructure.length > 0;

	// Prepare filters for the *first* dropdown using the structure
	const filterOptions = $derived(
		userStructure.map((discipline: DisciplineStructure) => ({
			value: discipline.name,
			label: discipline.name
		}))
	);

	const savedIdsSet = $derived(new Set<string | number>(data.savedArticleIds || []));
	const currentUserId = $derived($userProfileStore?.id ?? null);
	const articleOfTheDayTitleTemplate = 'üî• Article du jour pour {filter} :';
	const previousArticlesTitleTemplate = 'üìñ Articles pr√©c√©dents pour {filter} :';

	// Pass the server-determined initial values directly
	const initialMainFilterFromData = data.initialMainFilterValue;
	const initialSubFilterFromData = data.initialSubFilterValue;
</script>

<!-- {#if !data.isSubscribed} -->
	<!-- <SubscriptionRequired /> -->
{#if !hasSubscriptions && !data.error}
	<!-- Empty State (No Subscriptions) -->
	<div class="flex min-h-[60vh] items-center justify-center text-center text-white p-6">
		<div class="empty-state">
			<p>Vous n'avez pas encore configur√© les disciplines que vous souhaitez suivre.</p>
			<p>Veuillez <a href="/account">configurer vos disciplines</a> pour commencer √† recevoir des articles pertinents.</p>
		</div>
	</div>
{:else if data.error}
	<!-- Error State -->
	<div class="flex min-h-[60vh] items-center justify-center text-center text-red-300 p-6">
		<p>Une erreur est survenue lors du chargement de vos donn√©es. Veuillez r√©essayer plus tard.</p>
	</div>
{:else}
	<!-- Pass the CORRECT initial values from server data to ArticleListView -->
	<ArticleListView
		articleId={data?.articleData?.id || 0}
		articleTitle={data?.articleData?.title || ""}
		pageTitle={$i18n.header.myVeille || 'Ma Veille'}
		filters={filterOptions}
		initialFilterValue={initialMainFilterFromData}
		initialSubFilterValue={initialSubFilterFromData}
		filterSelectLabel="Mes sp√©cialit√©s"
		showSignupPromptProp={true}
		enableSearch={true}
		subDisciplineFetchMode="user"
		userId={currentUserId}
		showAllCategoriesOption={false}
		showAllSubDisciplinesOption={true}
		allSubDisciplinesLabel="Toutes mes sous-sp√©cialit√©s"
		filterByUserSubs={true}
		isSubscribed={data.isSubscribed}
	/>
{/if}

<style>
	/* Page-specific styles */
	.empty-state {
		text-align: center;
		padding: 2rem;
		margin: 2rem auto;
		max-width: 600px;
		background-color: #374151; /* gray-700 to match other components */
		border-radius: 8px;
		color: #f3f4f6; /* gray-100 for text */
		box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
	}

	.empty-state p {
		margin: 1rem 0;
		font-size: 1.1rem;
		color: inherit;
	}

	.empty-state a {
		color: var(--color-primary, #0d9488); /* teal-600 */
		text-decoration: underline;
	}
</style>
--- End of File ---

--- File Path ---
frontend/src/routes/api/get_sub_disciplines/+server.js

// src/routes/api/get_sub_disciplines/+server.js
import { error, json } from '@sveltejs/kit';

export const GET = async ({ url, locals: { supabase, safeGetSession } }) => {

    // 1. Get Query Parameters
    const disciplineName = url.searchParams.get('disciplineName');
    const mode = url.searchParams.get('mode') || 'user'; // Default to 'user' mode

    if (!disciplineName) {
		console.error('API Error: Missing disciplineName query parameter');
		throw error(400, 'Missing required query parameter: disciplineName');
	}

    // 2. Authentication (Required ONLY for 'user' mode)
    const { user } = await safeGetSession();
    const userId = user?.id;

    if (mode === 'user' && !userId) {
         console.error('API Error: Unauthorized access to get_sub_disciplines in user mode');
         // If user mode is explicitly requested but user isn't logged in, return error or empty?
         // Returning empty might be safer for the component.
         return json([]);
         // throw error(401, 'Authentication required for user-specific sub-disciplines.');
    }


	try {
        // 3. Find the ID of the requested Discipline
        const { data: disciplineData, error: disciplineError } = await supabase
            .from('disciplines')
            .select('id')
            .eq('name', disciplineName)
            .maybeSingle();

        if (disciplineError) throw error(500, `Database error: ${disciplineError.message}`);
        if (!disciplineData) {
             console.warn(`API Warn: Discipline not found: ${disciplineName}`);
             return json([]); // Return empty if the discipline name doesn't exist
        }
        const disciplineId = disciplineData.id;

        // 4. Fetch sub-disciplines based on mode
        let subDisciplinesToReturn = [];

        if (mode === 'public' || !userId) {
            // --- Public Mode OR User Not Logged In: Return ALL sub-disciplines ---
            const { data: allSubsData, error: allSubsError } = await supabase
                .from('sub_disciplines')
                .select('id, name')
                .eq('discipline_id', disciplineId)
                .order('name', { ascending: true });

            if (allSubsError) throw error(500, `DB error fetching all subs: ${allSubsError.message}`);
            subDisciplinesToReturn = allSubsData || [];

        } else {
            // --- User Mode AND User Logged In: Apply subscription logic ---
            const { data: userSubs, error: subsError } = await supabase
                .from('user_subscriptions')
                .select('sub_discipline_id')
                .eq('user_id', userId)
                .eq('discipline_id', disciplineId);

            if (subsError) throw error(500, `Database error: ${subsError.message}`);

            if (!userSubs || userSubs.length === 0) {
                console.warn(`API Warn: User ${userId} requested subs for discipline ${disciplineId} but has no subscriptions for it.`);
                return json([]); // Return empty as they are not subscribed
            }

            const hasSpecificSubs = userSubs.some(sub => sub.sub_discipline_id !== null);
            const subscribedToMain = userSubs.some(sub => sub.sub_discipline_id === null);

            if (hasSpecificSubs) {
                // Return ONLY specifically subscribed subs
                const specificSubIds = userSubs.map(sub => sub.sub_discipline_id).filter(id => id !== null);
                if (specificSubIds.length > 0) {
                    const { data: specificSubsData, error: specificSubsError } = await supabase
                        .from('sub_disciplines').select('id, name').in('id', specificSubIds).order('name');
                    if (specificSubsError) throw error(500, `DB error fetching specific subs: ${specificSubsError.message}`);
                    subDisciplinesToReturn = specificSubsData || [];
                }
            } else if (subscribedToMain) {
                // Return ALL subs for the main discipline
                 const { data: allSubsData, error: allSubsError } = await supabase
                    .from('sub_disciplines').select('id, name').eq('discipline_id', disciplineId).order('name');
                 if (allSubsError) throw error(500, `DB error fetching all subs: ${allSubsError.message}`);
                 subDisciplinesToReturn = allSubsData || [];
            }
            // If neither condition met (shouldn't happen if userSubs has data), returns empty.
        }

        return json(subDisciplinesToReturn);

	} catch (err) {
         console.error('API Error in /api/get_sub_disciplines:', err);
         if (err && typeof err === 'object' && 'status' in err) throw err;
         throw error(500, 'An internal server error occurred.');
	}
};
--- End of File ---

--- File Path ---
frontend/src/routes/api/mark-article-read/+server.ts

// src/routes/api/mark-article-read/+server.ts
import { error, json } from '@sveltejs/kit';

export const POST = async ({ request, locals: { supabase, safeGetSession } }) => {
	// 1. Check Authentication
	const { user } = await safeGetSession();
	if (!user) {
		throw error(401, 'Unauthorized'); // User must be logged in
	}

	// 2. Get Article ID from request body
	let articleId: number;
	try {
		const body = await request.json();
		if (!body || typeof body.articleId !== 'number') {
			throw new Error('Missing or invalid articleId in request body');
		}
		articleId = body.articleId;
	} catch (e: any) {
		console.error('Error parsing request body:', e);
		throw error(400, `Bad Request: ${e.message || 'Invalid JSON'}`);
	}

	// 3. Perform Upsert operation
	console.log(`User ${user.id} marking article ${articleId} as read.`);

	const { error: dbError } = await supabase
        .from('article_read')
        .upsert(
            {
                user_id: user.id,
                article_id: articleId,
            },
            {
                ignoreDuplicates: true,
            }
        );

	// 4. Handle Database Errors
	if (dbError) {
		console.error(`Database error marking article read for user ${user.id}, article ${articleId}:`, dbError);
		// Check for specific errors if needed (e.g., foreign key violation if articleId is invalid)
		if (dbError.code === '23503') { // Foreign key violation
             throw error(404, 'Article not found');
        }
		throw error(500, `Database error: ${dbError.message}`);
	}

	// 5. Return Success Response
	return json({ success: true, message: 'Article marked as read' }, { status: 200 }); // 200 OK for upsert success
    // Use 201 Created if you only INSERTED and want to signify resource creation
};
--- End of File ---

--- File Path ---
frontend/src/routes/api/submit-feedback/+server.ts

import { error, json } from '@sveltejs/kit';
import type { RequestEvent } from './$types';

export async function POST({ request, locals: { supabase, safeGetSession } }: RequestEvent) {
	const { user } = await safeGetSession();
	if (!user) {
		throw error(401, 'Authentication required to submit feedback.');
	}

	let feedbackData;
	try {
		feedbackData = await request.json();
		if (typeof feedbackData !== 'object' || feedbackData === null) {
			throw new Error('Invalid data format');
		}
	} catch (e) {
		console.error("Error parsing feedback JSON:", e);
		throw error(400, 'Bad request: Could not parse feedback data.');
	}

	// Prepare data for insertion (matching table columns)
	const dataToInsert = {
		user_id: user.id,
		content_useful: feedbackData.contentUseful || null,
		format_suitable: feedbackData.formatSuitable || null,
		desired_features: feedbackData.desiredFeatures || null,
		willing_to_pay: feedbackData.willingToPay || null, // Will contain "Oui" or "Non"
		price_suggestion: feedbackData.willingToPay === 'Oui' ? (feedbackData.priceSuggestion || null) : null,
		reason_not_to_pay: feedbackData.willingToPay === 'Non' ? (feedbackData.reasonNotToPay || null) : null,
		improvements: feedbackData.improvements || null,
	};

	try {
		const { error: insertError } = await supabase
			.from('feedback')
			.insert(dataToInsert);

		if (insertError) {
			console.error('Supabase insert error:', insertError);
			throw error(500, `Database error: ${insertError.message}`);
		}

		console.log(`Feedback submitted successfully by user ${user.id}`);
		return json({ message: 'Merci, votre retour a bien √©t√© envoy√© !' }, { status: 201 });

	} catch (err: any) {
		console.error('Error submitting feedback:', err);
		if (err.status) {
			throw err;
		}
		throw error(500, err.message || 'An unexpected error occurred while saving feedback.');
	}
}
--- End of File ---

--- File Path ---
frontend/src/routes/api/create-customer-portal-session/+server.ts

// /routes/api/create-customer-portal-session/+server.ts
import { STRIPE_SECRET_KEY, SUPABASE_SERVICE_ROLE_KEY } from '$env/static/private';
import { PUBLIC_SUPABASE_URL as SUPABASE_URL } from '$env/static/public';
import { createClient, type SupabaseClient } from '@supabase/supabase-js';
import { error as svelteKitError, json } from '@sveltejs/kit';
import Stripe from 'stripe';
import type { RequestHandler } from './$types';

let stripe: Stripe;
if (STRIPE_SECRET_KEY) {
	stripe = new Stripe(STRIPE_SECRET_KEY, {
		apiVersion: '2025-03-31.basil',
		typescript: true,
	});
}

let supabaseAdmin: SupabaseClient;
if (SUPABASE_URL && SUPABASE_SERVICE_ROLE_KEY) {
	supabaseAdmin = createClient(SUPABASE_URL, SUPABASE_SERVICE_ROLE_KEY, {
		auth: {
			persistSession: false,
			autoRefreshToken: false,
		}
	});
}

export const POST: RequestHandler = async ({ request, locals, url }) => {
	if (!stripe || !supabaseAdmin) {
		console.error('Stripe Customer Portal Error: Stripe or Supabase client not initialized.');
		throw svelteKitError(500, 'Server configuration error.');
	}

	const { session, user } = await locals.safeGetSession();
	if (!session || !user) {
		throw svelteKitError(401, 'User not authenticated.');
	}

	try {
		// Fetch the user's Stripe Customer ID from your database
		const { data: userProfile, error: profileError } = await supabaseAdmin
			.from('user_profiles') // Assuming your table is named 'user_profiles'
			.select('stripe_customer_id')
			.eq('id', user.id)
			.single();

		if (profileError) {
			console.error(`Stripe Customer Portal Error: DB error fetching profile for user ${user.id}:`, profileError);
			throw svelteKitError(500, 'Could not retrieve user payment profile.');
		}

		if (!userProfile?.stripe_customer_id) {
			console.error(`Stripe Customer Portal Error: User ${user.id} does not have a Stripe Customer ID.`);
			throw svelteKitError(404, 'Stripe customer ID not found for this user.');
		}

		const stripeCustomerId = userProfile.stripe_customer_id;

		// Define the return URL for when the user finishes in the portal
		// This should be a page on your site, perhaps the account page itself.
		const returnUrl = `${url.origin}/account`; // Or any other page

		const portalSession = await stripe.billingPortal.sessions.create({
			customer: stripeCustomerId,
			return_url: returnUrl,
		});

		return json({ url: portalSession.url });

	} catch (err: any) {
		console.error(`Stripe Customer Portal Error for user ${user.id}:`, err);
		if (err.status && typeof err.status === 'number' && err.body && typeof err.body.message === 'string') {
			throw err; // Re-throw SvelteKit errors
		}
		if (err.type && err.type.startsWith('Stripe')) {
			throw svelteKitError(err.statusCode || 500, `Stripe Error: ${err.message}`);
		}
		throw svelteKitError(500, `An unexpected error occurred: ${err.message}`);
	}
};
--- End of File ---

--- File Path ---
frontend/src/routes/api/toggle-article-like/+server.ts

// src/routes/api/toggle-article-like/+server.ts
import { error, json } from '@sveltejs/kit';

export const POST = async ({ request, locals: { supabase, safeGetSession } }) => {
	// 1. Check Authentication
	const { user } = await safeGetSession();
	if (!user) {
		throw error(401, 'Unauthorized');
	}

	// 2. Get Article ID from request body
	let articleId: number;
	try {
		const body = await request.json();
		if (!body || typeof body.articleId !== 'number') {
			throw new Error('Missing or invalid articleId');
		}
		articleId = body.articleId;
	} catch (e: any) {
		throw error(400, `Bad Request: ${e.message || 'Invalid JSON'}`);
	}

	// 3. Attempt to DELETE the like first
	console.log(`User ${user.id} toggling like for article ${articleId}. Attempting delete...`);
	const { count: deleteCount, error: deleteError } = await supabase
		.from('article_likes')
		.delete({ count: 'exact' }) // Request the count of deleted rows
		.eq('user_id', user.id)
		.eq('article_id', articleId);

	if (deleteError) {
		console.error(`Database error deleting like for user ${user.id}, article ${articleId}:`, deleteError);
		throw error(500, `Database error: ${deleteError.message}`);
	}

	// 4. If DELETE affected 0 rows, it means it wasn't liked -> INSERT
	if (deleteCount === 0) {
		console.log(`Article ${articleId} was not liked. Attempting insert...`);
		const { error: insertError } = await supabase
            .from('article_likes')
            .insert({
                user_id: user.id,
                article_id: articleId,
                // created_at defaults to now()
            });

		if (insertError) {
			console.error(`Database error inserting like for user ${user.id}, article ${articleId}:`, insertError);
            // Handle potential race conditions or other errors (e.g., FK violation)
            if (insertError.code === '23503') { throw error(404, 'Article not found'); }
            if (insertError.code === '23505') { /* Unique violation - likely race condition, treat as success? */ console.warn("Race condition likely on like insert"); }
            else { throw error(500, `Database error: ${insertError.message}`); }
		} else {
            // Successfully inserted (liked)
            return json({ success: true, liked: true, message: 'Article liked' }, { status: 201 }); // 201 Created
        }
	}

	// 5. If DELETE affected > 0 rows, it means it was unliked
    if (deleteCount && deleteCount > 0) {
        console.log(`Article ${articleId} successfully unliked.`);
	    return json({ success: true, liked: false, message: 'Article unliked' }, { status: 200 }); // 200 OK
    }

    // Fallback/safety net - should ideally not be reached if deleteCount is exact
    return json({ success: true, message: 'Like status toggled (check state)' }, { status: 200 });
};
--- End of File ---

--- File Path ---
frontend/src/routes/api/update-profile-and-subscriptions/+server.ts

// src/routes/api/update-profile-and-subscriptions/+server.ts
import { error, json } from '@sveltejs/kit';
import type { RequestEvent } from './$types';

// Interface for the expected subscription payload (remains the same)
interface SubscriptionPayload {
	discipline_id: number;
	sub_discipline_id: number | null;
}

// Interface for the expected overall request body
interface UpdateRequestBody {
	profile: {
		first_name?: string;
		last_name?: string;
		status?: string | null;
		specialty?: string | null;
		notification_frequency?: string;
		date_of_birth?: string | null;
        // Note: minimum_grade_notification is NO LONGER expected here
	};
	subscriptions: SubscriptionPayload[];
	gradePreferences: string[]; // <-- NEW: Expecting an array of grades like ['A', 'B', 'C']
}

export async function POST({ request, locals }: RequestEvent) {
	const { session, supabase } = locals; // Destructure supabase here
	const user = session?.user; // Get user directly from session

	if (!user) {
		console.error("[API UpdateProfile] Error: No user session found.");
		return json({ error: 'Unauthorized' }, { status: 401 });
	}
    const userId = user.id; // Get user ID for clarity

	try {
		const { profile, subscriptions, gradePreferences }: UpdateRequestBody = await request.json();
		console.log(`[API UpdateProfile] User ${userId}: Received update request`, {
			profile: profile ? Object.keys(profile) : 'null',
			subscriptionsCount: subscriptions?.length ?? 'null',
            gradePreferencesCount: gradePreferences?.length ?? 'null',
            grades: gradePreferences // Log the actual grades received
		});

		// --- 1. Validate Input Data ---
		if (!profile || !subscriptions || !Array.isArray(gradePreferences)) {
			console.error(`[API UpdateProfile] User ${userId}: Missing required data. Profile: ${!!profile}, Subs: ${!!subscriptions}, Grades: ${Array.isArray(gradePreferences)}`);
			return json({ error: 'Missing required data' }, { status: 400 });
		}
        // Optional: Validate grades are only A, B, C
        const validGrades = ['A', 'B', 'C'];
        if (gradePreferences.some(g => !validGrades.includes(g))) {
             console.error(`[API UpdateProfile] User ${userId}: Invalid grade found in preferences:`, gradePreferences);
             return json({ error: 'Invalid grade preference provided.' }, { status: 400 });
        }


		// --- 2. Update User Profile ---
        // Explicitly DO NOT include minimum_grade_notification if it's accidentally sent
        const { minimum_grade_notification, ...profileDataToUpdate } = profile;
        if (Object.keys(profileDataToUpdate).length > 0) {
            console.log(`[API UpdateProfile] User ${userId}: Updating user_profiles table...`, profileDataToUpdate);
            const { error: profileError } = await supabase
                .from('user_profiles')
                .update(profileDataToUpdate)
                .eq('id', userId);

            if (profileError) {
                console.error(`[API UpdateProfile] User ${userId}: Profile update error:`, profileError);
                throw profileError; // Let the main catch block handle it
            }
            console.log(`[API UpdateProfile] User ${userId}: Profile update successful.`);
        } else {
             console.log(`[API UpdateProfile] User ${userId}: No profile fields to update.`);
        }


		// --- 3. Update Grade Preferences ---
        console.log(`[API UpdateProfile] User ${userId}: Deleting existing grade preferences...`);
        const { error: deleteGradesError } = await supabase
            .from('user_grade_preferences')
            .delete()
            .eq('user_id', userId);

        if (deleteGradesError) {
            console.error(`[API UpdateProfile] User ${userId}: Delete grade preferences error:`, deleteGradesError);
            throw deleteGradesError;
        }
         console.log(`[API UpdateProfile] User ${userId}: Existing grade preferences deleted.`);

        if (gradePreferences.length > 0) {
            const gradesToInsert = gradePreferences.map(grade => ({
                user_id: userId,
                grade: grade // Ensure grade is uppercase if needed, but DB check handles 'A','B','C'
            }));
            console.log(`[API UpdateProfile] User ${userId}: Inserting ${gradesToInsert.length} new grade preferences:`, gradesToInsert);
            const { error: insertGradesError } = await supabase
                .from('user_grade_preferences')
                .insert(gradesToInsert);

            if (insertGradesError) {
                console.error(`[API UpdateProfile] User ${userId}: Insert grade preferences error:`, insertGradesError);
                // Check for specific errors like check constraint violation if needed
                throw insertGradesError;
            }
             console.log(`[API UpdateProfile] User ${userId}: New grade preferences inserted successfully.`);
        } else {
             console.log(`[API UpdateProfile] User ${userId}: No new grade preferences to insert (all unchecked).`);
        }


		// --- 4. Update Discipline/Sub-Discipline Subscriptions (Logic remains the same) ---
		console.log(`[API UpdateProfile] User ${userId}: Deleting existing discipline subscriptions...`);
		const { error: deleteSubsError } = await supabase
			.from('user_subscriptions')
			.delete()
			.eq('user_id', userId);

		if (deleteSubsError) {
			console.error(`[API UpdateProfile] User ${userId}: Delete subscriptions error:`, deleteSubsError);
			throw deleteSubsError;
		}
        console.log(`[API UpdateProfile] User ${userId}: Existing discipline subscriptions deleted.`);

        if (subscriptions.length > 0) {
            // Prepare subscription records including main disciplines only if no subs are selected for them
            const subscriptionRecords: { user_id: string; discipline_id: number; sub_discipline_id: number | null }[] = [];
            const mainDisciplinesWithSubs = new Set<number>();
            const allMainDisciplineIds = new Set<number>();

            // First pass: collect main disciplines that have selected subs and all selected main discipline IDs
            subscriptions.forEach(sub => {
                allMainDisciplineIds.add(sub.discipline_id);
                if (sub.sub_discipline_id !== null) {
                    mainDisciplinesWithSubs.add(sub.discipline_id);
                    subscriptionRecords.push({
                        user_id: userId,
                        discipline_id: sub.discipline_id,
                        sub_discipline_id: sub.sub_discipline_id
                    });
                }
            });

            // Second pass: add main discipline records ONLY if they don't have any selected subs
            allMainDisciplineIds.forEach(discId => {
                if (!mainDisciplinesWithSubs.has(discId)) {
                    subscriptionRecords.push({
                        user_id: userId,
                        discipline_id: discId,
                        sub_discipline_id: null
                    });
                }
            });


            console.log(`[API UpdateProfile] User ${userId}: Inserting ${subscriptionRecords.length} new discipline subscriptions:`, subscriptionRecords);
            const { error: insertSubsError } = await supabase
                .from('user_subscriptions')
                .insert(subscriptionRecords);

            if (insertSubsError) {
                console.error(`[API UpdateProfile] User ${userId}: Insert subscriptions error:`, insertSubsError);
                throw insertSubsError;
            }
             console.log(`[API UpdateProfile] User ${userId}: New discipline subscriptions inserted successfully.`);
        } else {
            console.log(`[API UpdateProfile] User ${userId}: No new discipline subscriptions to insert.`);
        }

		console.log(`[API UpdateProfile] User ${userId}: Update successful.`);
		return json({ success: true, message: "Profil et pr√©f√©rences mis √† jour avec succ√®s." });

	} catch (err: any) { // Catch any thrown errors
		console.error(`[API UpdateProfile] User ${userId}: Overall update error:`, err);
        const message = err.message || 'Failed to update profile and preferences';
        const status = err.status || (err.code ? 400 : 500); // Use status if available, map code to 400, else 500
		return json({ error: message }, { status });
	}
}
--- End of File ---

--- File Path ---
frontend/src/routes/api/create-subscription/+server.ts

// frontend/src/routes/api/create-subscription/+server.ts
import { env } from '$env/dynamic/private';
import { error, json, type RequestHandler } from '@sveltejs/kit';
import Stripe from 'stripe';

const stripeSecretKey = env.STRIPE_SECRET_KEY;
const monthlyPriceIdFromEnv = env.STRIPE_MONTHLY_PRICE_ID;
const yearlyPriceIdFromEnv = env.STRIPE_YEARLY_PRICE_ID;

if (!stripeSecretKey || !monthlyPriceIdFromEnv || !yearlyPriceIdFromEnv) {
	console.error(
		'CRITICAL SERVER ERROR: Stripe environment variables (secret key or price IDs) are not set.'
	);
}

const stripe = new Stripe(stripeSecretKey!, {
	apiVersion: '2023-10-16'
});

export const POST: RequestHandler = async ({ request, locals }) => {
	if (!stripeSecretKey || !monthlyPriceIdFromEnv || !yearlyPriceIdFromEnv) {
		console.error('API Call Error: Stripe server configuration is incomplete.');
		throw error(500, 'Server configuration error for payments.');
	}

	const { user, session } = await locals.safeGetSession();

	if (!session || !user || !user.email) {
		console.warn('API Call Error: User not authenticated or email missing.');
		throw error(401, 'Authentication required and user email must be available.');
	}

	let planIdentifier: 'monthly' | 'yearly';
	try {
		const body = await request.json();
		planIdentifier = body.planIdentifier;
		if (planIdentifier !== 'monthly' && planIdentifier !== 'yearly') {
			throw new Error('Invalid plan identifier.');
		}
	} catch (e) {
		console.error('API Call Error: Invalid request body or planIdentifier.', e);
		throw error(400, 'Invalid request data. Please provide a "planIdentifier" as "monthly" or "yearly".');
	}

	const priceId = planIdentifier === 'monthly' ? monthlyPriceIdFromEnv : yearlyPriceIdFromEnv;

	try {
		let stripeCustomerId: string | null = null;

		// Attempt to fetch the user's profile, including stripe_customer_id
		const { data: userProfile, error: profileFetchError } = await locals.supabase
			.from('user_profiles')
			.select('stripe_customer_id, first_name, last_name') // Ensure these columns exist
			.eq('id', user.id)
			.single(); // Use .single() as there should be one profile per user

		// Handle profile fetch errors more gracefully
		if (profileFetchError && profileFetchError.code !== 'PGRST116') { // PGRST116 means "0 rows" which is okay if profile not fully created yet
			console.error(`API DB Error: Could not fetch user profile for user ${user.id}. Error:`, profileFetchError);
			throw error(500, `Database error fetching user profile: ${profileFetchError.message}`);
		}
		
		if (userProfile?.stripe_customer_id) {
			stripeCustomerId = userProfile.stripe_customer_id;
			console.log(`API Info: Found existing Stripe Customer ID: ${stripeCustomerId} for user ${user.id}`);
		} else {
			console.log(`API Info: No Stripe Customer ID found for user ${user.id}. Creating new Stripe customer.`);
			const customerCreateParams: Stripe.CustomerCreateParams = {
				email: user.email,
				// Use names from profile if available, otherwise default to email for name
				name: `${userProfile?.first_name || ''} ${userProfile?.last_name || ''}`.trim() || user.email,
				metadata: {
					supabase_user_id: user.id // Link Stripe customer to your Supabase user ID
				}
			};
			const customer = await stripe.customers.create(customerCreateParams);
			stripeCustomerId = customer.id;
			console.log(`API Info: Created new Stripe Customer ID: ${stripeCustomerId} for user ${user.id}`);

			// Now, update the user_profiles table with the new stripe_customer_id
			// This assumes the user_profiles record was either already there or we are okay with it failing if not.
			// For a robust signup, profile creation should be guaranteed before this point.
			const { error: profileUpdateError } = await locals.supabase
				.from('user_profiles')
				.update({ stripe_customer_id: stripeCustomerId })
				.eq('id', user.id);

			if (profileUpdateError) {
				console.error(`API DB Error: Could not update user profile for user ${user.id} with Stripe Customer ID ${stripeCustomerId}. Error:`, profileUpdateError);
				// This is a critical error if the profile exists but couldn't be updated.
                // If the profile didn't exist, it's also an issue with your user creation flow.
				throw error(500, `Failed to save Stripe customer reference: ${profileUpdateError.message}`);
			}
            console.log(`API Info: Successfully updated profile for user ${user.id} with Stripe Customer ID.`);
		}

		if (!stripeCustomerId) {
			console.error(`API Logic Error: Stripe Customer ID is unexpectedly null for user ${user.id} after get/create attempt.`);
			throw error(500, 'Failed to obtain a Stripe Customer ID for the user.');
		}

		// Create the Stripe Subscription
		console.log(`API Info: Creating Stripe subscription for customer ${stripeCustomerId} with price ${priceId}`);
		const subscription = await stripe.subscriptions.create({
			customer: stripeCustomerId,
			items: [{ price: priceId }],
			payment_behavior: 'default_incomplete',
			payment_settings: {
				save_default_payment_method: 'on_subscription'
			},
			expand: ['latest_invoice.payment_intent'],
			metadata: {
				supabase_user_id: user.id,
				plan_identifier: planIdentifier // Storing the plan type can be useful
			}
		});

		if (
			!subscription.latest_invoice ||
			typeof subscription.latest_invoice === 'string' || // Type guard for expanded object
			!subscription.latest_invoice.payment_intent ||
			typeof subscription.latest_invoice.payment_intent === 'string' || // Type guard
			!subscription.latest_invoice.payment_intent.client_secret
		) {
			console.error('API Stripe Error: Could not retrieve client_secret from created subscription. Subscription object:', JSON.stringify(subscription, null, 2));
			throw error(500, 'Failed to get payment details from the Stripe subscription. The subscription might have been created without a pending payment.');
		}
		
		const clientSecret = subscription.latest_invoice.payment_intent.client_secret;
		const createdSubscriptionId = subscription.id;

		console.log(`API Success: Subscription ${createdSubscriptionId} created for user ${user.id}. Client Secret ready.`);
		return json({
			subscriptionId: createdSubscriptionId,
			clientSecret: clientSecret
		});

	} catch (e: any) {
		console.error(`API Stripe/DB Call Error for user ${user.id}:`, e);
		if (e instanceof Stripe.errors.StripeError) {
			throw error(e.statusCode || 500, `Stripe Error: ${e.message}`);
		}
		if (e.status && typeof e.status === 'number') {
			throw e;
		}
		throw error(500, `Server error processing subscription: ${e.message || 'An unknown error occurred'}`);
	}
};
--- End of File ---

--- File Path ---
frontend/src/routes/api/update-feedback-modal/+server.ts

// src/routes/api/update-feedback-modal/+server.ts
import { error, json } from '@sveltejs/kit';
import type { RequestEvent } from './$types';

export async function POST({ locals: { supabase, safeGetSession } }: RequestEvent) {
	console.log("API: /api/update-feedback-modal called"); // Log start

	const { user } = await safeGetSession();
	if (!user) {
		console.error("API Error: Unauthorized attempt to update feedback timestamp.");
		throw error(401, 'Unauthorized');
	}
	const userId = user.id;
	console.log(`API: User ID: ${userId}`);

	try {
		// 1. Get the current feedback_modal timestamp for the user
		console.log(`API: Fetching current profile for user ${userId}...`);
		const { data: profileData, error: profileError } = await supabase
			.from('user_profiles')
			.select('feedback_modal')
			.eq('id', userId)
			.maybeSingle(); // Use maybeSingle as profile might not exist (though unlikely for logged-in user)

		if (profileError) {
			console.error(`API DB Error (Fetch Profile):`, profileError);
			throw error(500, `Database error fetching profile: ${profileError.message}`);
		}

		const currentTimestamp = profileData?.feedback_modal;
		console.log(`API: Current feedback_modal timestamp: ${currentTimestamp}`);

		// 2. Determine the new timestamp value
		let newTimestampValue;
		if (currentTimestamp === null || currentTimestamp === undefined) {
			// If NULL (first time showing), set it to 23 days ago
			// Supabase RPC or direct SQL string can be used. Direct string is simpler here.
            // Calculate the date 23 days ago in JS and format as ISO string
            const date23DaysAgo = new Date();
            date23DaysAgo.setDate(date23DaysAgo.getDate() - 23);
            newTimestampValue = date23DaysAgo.toISOString();
			console.log(`API: Timestamp was NULL. Setting new timestamp to 23 days ago: ${newTimestampValue}`);
		} else {
			// If not NULL, update it to the current time
			newTimestampValue = new Date().toISOString();
			console.log(`API: Timestamp exists. Setting new timestamp to now: ${newTimestampValue}`);
		}

		// 3. Update the user_profiles table
		console.log(`API: Updating feedback_modal for user ${userId} to ${newTimestampValue}`);
		const { error: updateError } = await supabase
			.from('user_profiles')
			.update({ feedback_modal: newTimestampValue })
			.eq('id', userId);

		if (updateError) {
			console.error(`API DB Error (Update Timestamp):`, updateError);
			throw error(500, `Database error updating timestamp: ${updateError.message}`);
		}

		console.log(`API: Timestamp update successful for user ${userId}.`);
		return json({ success: true, message: 'Timestamp updated' }, { status: 200 });

	} catch (err: any) {
		console.error("API Exception:", err);
		if (err.status) {
			throw err; // Re-throw SvelteKit errors
		}
		throw error(500, err.message || 'Failed to update feedback modal timestamp');
	}
}
--- End of File ---

--- File Path ---
frontend/src/routes/api/create-payment-intent/+server.js

// src/routes/api/create-payment-intent/+server.js
// OR RENAME TO: src/routes/api/create-subscription/+server.js (and update fetch path in frontend)

import { env } from '$env/dynamic/private';
import { error, json } from '@sveltejs/kit';
import Stripe from 'stripe';

// --- IMPORTANT: Use your SECRET key here ---
const stripeSecretKey = env.STRIPE_SECRET_KEY || process.env.STRIPE_SECRET_KEY; // Fallback for different env setups
const monthlyPriceId = env.STRIPE_MONTHLY_PRICE_ID || process.env.STRIPE_MONTHLY_PRICE_ID;
const yearlyPriceId = env.STRIPE_YEARLY_PRICE_ID || process.env.STRIPE_YEARLY_PRICE_ID;

if (!stripeSecretKey || !monthlyPriceId || !yearlyPriceId) {
    console.error("Stripe configuration error: Missing secret key or price IDs in environment variables.");
    // Avoid throwing here during module load, handle in POST
}

const stripe = new Stripe(stripeSecretKey, {
    apiVersion: '2023-10-16', // Use a specific API version
});

export async function POST({ request }) {
    // --- Check for missing config on request ---
    if (!stripeSecretKey || !monthlyPriceId || !yearlyPriceId) {
        console.error("Stripe configuration missing on request.");
        throw error(500, "Server configuration error: Stripe details not set.");
    }

    try {
        const { plan } = await request.json(); // Read the plan identifier ('monthly' or 'yearly')

        let priceId;
        if (plan === 'monthly') {
            priceId = monthlyPriceId;
        } else if (plan === 'yearly') {
            priceId = yearlyPriceId;
        } else {
            throw error(400, 'Invalid plan selected.'); // Bad request
        }

        // --- 1. Create a Stripe Customer ---
        // In a real app, you'd check if a customer exists for logged-in user
        // You might pass user email/ID from a session/JWT here
        const customer = await stripe.customers.create({
            // email: userEmail, // Example: associate with user email
            // name: userName, // Example
            description: `Customer for ${plan} plan`, // Optional
        });

        // --- 2. Create the Subscription ---
        const subscription = await stripe.subscriptions.create({
            customer: customer.id,
            items: [{ price: priceId }],
            payment_behavior: 'default_incomplete', // Important: Wait for payment method via Elements
            payment_settings: { save_default_payment_method: 'on_subscription' }, // Save PM for future renewals
            expand: ['latest_invoice.payment_intent'], // Expand to get the PI for the first payment
            // Add trial period if needed:
            // trial_period_days: 14,
        });

        // --- 3. Extract Client Secret ---
        // The client secret is needed for the *first* payment confirmation
        const clientSecret = subscription.latest_invoice.payment_intent.client_secret;

        if (!clientSecret) {
             throw new Error('Could not retrieve client secret from subscription.');
        }

        return json({
            clientSecret: clientSecret,
            subscriptionId: subscription.id // Optionally return subscription ID if needed on client
        });

    } catch (err) {
        console.error("Stripe API Error:", err);
        // Distinguish Stripe errors from other errors
        if (err instanceof Stripe.errors.StripeError) {
             throw error(err.statusCode || 500, `Stripe Error: ${err.message}`);
        } else if (err.status === 400) { // Handle specific thrown errors like 'Invalid plan'
             throw error(400, err.body.message || 'Bad Request');
        } else {
             throw error(500, `Error creating subscription: ${err.message || 'Unknown server error'}`);
        }
    }
}
--- End of File ---

--- File Path ---
frontend/src/routes/api/get_articles_my_veille/+server.js

// src/routes/api/get_articles_my_veille/+server.ts
import { error, json } from "@sveltejs/kit";

export const GET = async ({ url, locals: { supabase, safeGetSession } }) => {
    // --- Read parameters ---
    const specialty = url.searchParams.get('specialty'); // Might be empty or "__ALL__" if sent from frontend
    const subDiscipline = url.searchParams.get('subDiscipline');
    const offset = parseInt(url.searchParams.get('offset') || '0');
    const search = url.searchParams.get('search');
    const filterByUserSubs = url.searchParams.get('filterByUserSubs') === 'true';
    const { user } = await safeGetSession();
    const userId = user?.id ?? null;

    // Treat empty specialty as NULL for the RPC call
    const disciplineNameToRPC = (!specialty || specialty === '__ALL__') ? null : specialty; // <<< Handle "All"

    // Sub-discipline only makes sense if a main discipline is selected
    const subDisciplineToRPC = disciplineNameToRPC ? (subDiscipline || null) : null; // <<< Nullify sub if discipline is null

    const { data: articlesData, error: rpcError } = await supabase.rpc(
        'get_all_articles_sub_disciplines',
        {
            p_discipline_name: disciplineNameToRPC, // Pass null if "All"
            p_sub_discipline_name: subDisciplineToRPC,
            p_offset: offset,
            p_search_term: search || null,
            p_user_id: userId,
            p_filter_by_user_subs: filterByUserSubs
        }
    );

    if (rpcError) {
        console.error('Error calling RPC get_all_articles_sub_disciplines:', rpcError);
        throw error(500, `Database RPC error: ${rpcError.message}`);
    }

    return json({ data: articlesData || [], error: null });
}
--- End of File ---

--- File Path ---
frontend/src/routes/api/toggle-article-read/+server.ts

// src/routes/api/toggle-article-read/+server.ts
import { error, json } from '@sveltejs/kit';

export const POST = async ({ request, locals: { supabase, safeGetSession } }) => {
	console.log('--- API /api/toggle-article-read START ---'); // Log start

	// 1. Check Authentication
	const { user } = await safeGetSession();
	if (!user) {
        console.error('API Error: User not authenticated');
		throw error(401, 'Unauthorized');
	}
    console.log(`API: Authenticated user ID: ${user.id}`);

	// 2. Get Article ID from request body
	let articleId: number;
	try {
		const body = await request.json();
        console.log('API: Received request body:', body); // Log received body
		if (!body || typeof body.articleId !== 'number' || isNaN(body.articleId)) { // Add NaN check
			throw new Error('Missing or invalid articleId');
		}
		articleId = body.articleId;
        console.log(`API: Parsed articleId: ${articleId}`);
	} catch (e: any) {
        console.error('API Error: Failed to parse request body:', e);
		throw error(400, `Bad Request: ${e.message || 'Invalid JSON'}`);
	}

	// 3. Check current read status
	console.log(`API: Checking read status for user ${user.id}, article ${articleId}...`);
	const { data: existingRead, error: checkError } = await supabase
		.from('article_read')
		.select('user_id', { count: 'exact' }) // Get count to be sure
		.eq('user_id', user.id)
		.eq('article_id', articleId);
		// Removed maybeSingle, checking count is safer

	if (checkError) {
		console.error(`API DB Error (Check Read Status):`, checkError);
		throw error(500, `Database error: ${checkError.message}`);
	}

    const isCurrentlyRead = existingRead && existingRead.length > 0; // Check if array has items
    console.log(`API: Article ${articleId} is currently read: ${isCurrentlyRead}`);

	// 4. Perform INSERT or DELETE based on current status
	if (isCurrentlyRead) {
		// --- Article is currently READ, so MARK AS UNREAD (DELETE) ---
		console.log(`API: Deleting read record for article ${articleId}...`);
		const { error: deleteError } = await supabase
			.from('article_read')
			.delete()
			.eq('user_id', user.id)
			.eq('article_id', articleId);

		if (deleteError) {
			console.error(`API DB Error (Delete Read Status):`, deleteError);
			throw error(500, `Database error: ${deleteError.message}`);
		}
		console.log(`API: Successfully marked article ${articleId} as UNREAD.`);
		console.log('--- API /api/toggle-article-read END ---');
		return json({ success: true, read: false, message: 'Article marked as unread' }, { status: 200 });

	} else {
		// --- Article is currently UNREAD, so MARK AS READ (INSERT) ---
		console.log(`API: Inserting read record for article ${articleId}...`);
		const { error: insertError } = await supabase
			.from('article_read')
			.insert({
				user_id: user.id,
				article_id: articleId,
			});

		if (insertError) {
			console.error(`API DB Error (Insert Read Status):`, insertError);
			if (insertError.code === '23503') { // Foreign key violation likely means articleId doesn't exist
                console.error(`API Error Detail: Article ID ${articleId} might not exist.`);
				throw error(404, 'Article not found');
			}
			throw error(500, `Database error: ${insertError.message}`);
		}
		console.log(`API: Successfully marked article ${articleId} as READ.`);
		console.log('--- API /api/toggle-article-read END ---');
		return json({ success: true, read: true, message: 'Article marked as read' }, { status: 201 }); // 201 Created
	}
};
--- End of File ---

--- File Path ---
frontend/src/routes/api/toggle-article-thumbs-up/+server.ts

// src/routes/api/toggle-article-thumbs-up/+server.ts
import { error, json } from '@sveltejs/kit';

export const POST = async ({ request, locals: { supabase, safeGetSession } }) => {
	// 1. Check Authentication
	const { user } = await safeGetSession();
	if (!user) {
		throw error(401, 'Unauthorized');
	}

	// 2. Get Article ID from request body
	let articleId: number;
	try {
		const body = await request.json();
		if (!body || typeof body.articleId !== 'number' || isNaN(body.articleId)) {
			throw new Error('Missing or invalid articleId');
		}
		articleId = body.articleId;
	} catch (e: any) {
		throw error(400, `Bad Request: ${e.message || 'Invalid JSON'}`);
	}

	// 3. Attempt to DELETE the thumbs-up first
	console.log(`User ${user.id} toggling thumbs-up for article ${articleId}. Attempting delete...`);
	const { count: deleteCount, error: deleteError } = await supabase
		.from('article_thumbs_up')
		.delete({ count: 'exact' }) // Request the count of deleted rows
		.eq('user_id', user.id)
		.eq('article_id', articleId);

	if (deleteError) {
		console.error(`Database error deleting thumbs-up for user ${user.id}, article ${articleId}:`, deleteError);
		throw error(500, `Database error: ${deleteError.message}`);
	}

	// 4. If DELETE affected 0 rows, it means it wasn't thumbed-up -> INSERT
	if (deleteCount === 0) {
		console.log(`Article ${articleId} was not thumbed-up. Attempting insert...`);
		const { error: insertError } = await supabase
            .from('article_thumbs_up')
            .insert({
                user_id: user.id,
                article_id: articleId,
                // thumbed_up_at defaults to now()
            });

		if (insertError) {
			console.error(`Database error inserting thumbs-up for user ${user.id}, article ${articleId}:`, insertError);
            // Handle potential race conditions or other errors (e.g., FK violation)
            if (insertError.code === '23503') { throw error(404, 'Article not found'); }
            if (insertError.code === '23505') { /* Unique violation - likely race condition, treat as success? */ console.warn("Race condition likely on thumbs-up insert"); }
            else { throw error(500, `Database error: ${insertError.message}`); }
		} else {
            // Successfully inserted (thumbed-up)
            return json({ success: true, thumbed_up: true, message: 'Article thumbed up' }, { status: 201 }); // 201 Created
        }
	}

	// 5. If DELETE affected > 0 rows, it means it was un-thumbed-up
    if (deleteCount && deleteCount > 0) {
        console.log(`Article ${articleId} successfully un-thumbed-up.`);
	    return json({ success: true, thumbed_up: false, message: 'Article thumbed down' }, { status: 200 }); // 200 OK (or 204 No Content if preferred)
    }

    // Fallback/safety net - should ideally not be reached if deleteCount is exact
    console.warn(`Unexpected state after toggle for article ${articleId}, user ${user.id}. Delete count was ${deleteCount}`);
    return json({ success: true, message: 'Thumbs-up status toggled (check state)' }, { status: 200 });
};
--- End of File ---

--- File Path ---
frontend/src/routes/api/get-liked-articles/+server.ts

// src/routes/api/get-liked-articles/+server.ts
import { error, json } from "@sveltejs/kit";

export const GET = async ({ url, locals: { supabase, safeGetSession } }) => {
    // --- Get User ID (Required) ---
    const { user } = await safeGetSession();
    if (!user) {
        throw error(401, 'Unauthorized');
    }
    const userId = user.id;

    // --- Read parameters ---
    const offset = parseInt(url.searchParams.get('offset') || '0');
    const search = url.searchParams.get('search');
    const specialty = url.searchParams.get('specialty');        // <<< NEW: Discipline filter
    const subDiscipline = url.searchParams.get('subDiscipline'); // <<< NEW: Sub-discipline filter

    // Treat empty specialty as NULL for the RPC call
    const disciplineNameToRPC = (!specialty || specialty === '__ALL__') ? null : specialty; // <<< Handle "All"
    const subDisciplineToRPC = disciplineNameToRPC ? (subDiscipline || null) : null; // <<< Nullify sub if discipline is null

    // --- Call the UPDATED RPC function ---
    console.log(`Calling RPC get_liked_articles with: user=${userId}, discipline=${disciplineNameToRPC}, subDiscipline=${subDisciplineToRPC}, offset=${offset}, search=${search || null}`);

    const { data: articlesData, error: rpcError } = await supabase.rpc(
        'get_liked_articles', // Still calling the same named RPC, but it's the *updated* version
        {
            p_user_id: userId,
            p_discipline_name: disciplineNameToRPC, // Pass null if "All"
            p_sub_discipline_name: subDisciplineToRPC,
            p_offset: offset,
            p_search_term: search || null
        }
    );

    // --- Handle RPC errors ---
    if (rpcError) {
         console.error('Error calling RPC get_liked_articles:', rpcError);
         throw error(500, `Database RPC error: ${rpcError.message}`);
    }

    // --- Return the data ---
    console.log('RPC Response Data (Liked Articles):', articlesData);
    return json({
        data: articlesData || [],
        error: null
    });
}
--- End of File ---

--- File Path ---
frontend/src/routes/api/cancel-stripe-subscription/+server.ts

// /routes/api/cancel-stripe-subscription/+server.ts

import { STRIPE_SECRET_KEY, SUPABASE_SERVICE_ROLE_KEY } from '$env/static/private';
import { PUBLIC_SUPABASE_URL as SUPABASE_URL } from '$env/static/public';
import { createClient, type SupabaseClient } from '@supabase/supabase-js';
import { json, error as svelteKitError } from '@sveltejs/kit';
import Stripe from 'stripe';
import type { RequestHandler } from './$types';

let stripe: Stripe;
if (STRIPE_SECRET_KEY) {
	stripe = new Stripe(STRIPE_SECRET_KEY, {
		apiVersion: '2025-03-31.basil',
		typescript: true,
	});
}

let supabaseAdmin: SupabaseClient;
if (SUPABASE_URL && SUPABASE_SERVICE_ROLE_KEY) {
	supabaseAdmin = createClient(SUPABASE_URL, SUPABASE_SERVICE_ROLE_KEY, {
		auth: {
			persistSession: false,
			autoRefreshToken: false,
		}
	});
}
console.log("STRIPE_SECRET_KEY", STRIPE_SECRET_KEY);
console.log("SUPABASE_URL", SUPABASE_URL);
console.log("SUPABASE_SERVICE_ROLE_KEY", SUPABASE_SERVICE_ROLE_KEY);

export const POST: RequestHandler = async ({ request, locals }) => {
	if (!stripe || !supabaseAdmin) {
		throw svelteKitError(500, 'Server configuration error. Please try again later.');
	}

	const { session, user } = await locals.safeGetSession();
	if (!session || !user) {
		throw svelteKitError(401, 'User not authenticated.');
	}

	let stripeSubscriptionIdFromRequest: string;
	try {
		const body = await request.json();
		stripeSubscriptionIdFromRequest = body.stripeSubscriptionId;
		if (!stripeSubscriptionIdFromRequest || typeof stripeSubscriptionIdFromRequest !== 'string') {
			throw new Error('stripeSubscriptionId is required and must be a string.');
		}
	} catch (e: any) {
		throw svelteKitError(400, `Invalid request body: ${e.message}`);
	}

	try {
		const { data: storedSubscription, error: dbFetchError } = await supabaseAdmin
			.from('user_profile_subscriptions')
			.select('id, user_profile_id, stripe_subscription_id, status, cancel_at_period_end')
			.eq('stripe_subscription_id', stripeSubscriptionIdFromRequest)
			.eq('user_profile_id', user.id)
            .order('current_period_end', { ascending: false })
            .limit(1)
            .maybeSingle();

		if (dbFetchError) {
			if (dbFetchError.code === 'PGRST116') {
				throw svelteKitError(403, 'Subscription not found or you do not have permission to modify it.');
			}
			throw svelteKitError(500, 'Could not retrieve subscription details.');
		}

		if (!storedSubscription) {
			throw svelteKitError(403, 'Subscription not found or access denied.');
		}

		if (storedSubscription.cancel_at_period_end || storedSubscription.status === 'canceled') {
			return json({
				message: 'This subscription is already canceled or pending cancellation at the end of the period.',
				subscription: storedSubscription,
			}, { status: 200 });
		}

		const updatedStripeSubscription = await stripe.subscriptions.update(
			stripeSubscriptionIdFromRequest,
			{
				cancel_at_period_end: true,
			}
		);

		const { data: updatedDbSubscription, error: dbUpdateError } = await supabaseAdmin
			.from('user_profile_subscriptions')
			.update({
				cancel_at_period_end: updatedStripeSubscription.cancel_at_period_end,
				status: updatedStripeSubscription.status,
			})
			.eq('stripe_subscription_id', stripeSubscriptionIdFromRequest)
			.select()
			.single();

		if (dbUpdateError) {
			throw svelteKitError(500, 'Subscription canceled with Stripe, but failed to update local records. Please contact support if issues persist.');
		}

		return json({
			message: 'Subscription successfully set to cancel at the end of the current billing period.',
			stripeResponse: updatedStripeSubscription,
			databaseRecord: updatedDbSubscription,
		}, { status: 200 });

	} catch (err: any) {
		if (err.status && typeof err.status === 'number' && err.body && typeof err.body.message === 'string') {
			throw err;
		}
		
		if (err.type && err.type.startsWith('Stripe')) {
			throw svelteKitError(err.statusCode || 400, `Stripe Error: ${err.message}`);
		}
		
		throw svelteKitError(500, `An unexpected error occurred: ${err.message}`);
	}
};
--- End of File ---

--- File Path ---
frontend/src/routes/api/create-donation-intent/+server.ts

import { env } from '$env/dynamic/private';
import type { RequestEvent } from '@sveltejs/kit';
import { error, json } from '@sveltejs/kit';
import Stripe from 'stripe';

const stripeSecretKey = env.STRIPE_SECRET_KEY || process.env.STRIPE_SECRET_KEY;

if (!stripeSecretKey) {
    console.error("Stripe configuration error: Missing secret key.");
}

const stripe = new Stripe(stripeSecretKey!, {
    apiVersion: '2025-03-31.basil', // Use the latest supported API version
});

export async function POST({ request, locals: { supabase, safeGetSession } }: RequestEvent) {
    const { user } = await safeGetSession();
    if (!stripeSecretKey) {
        throw error(500, "Server configuration error: Stripe details not set.");
    }

    try {
        const { amount, paymentMethodType } = await request.json(); // Expect amount in cents AND paymentMethodType

        // --- Validate Amount ---
        if (typeof amount !== 'number' || !Number.isInteger(amount) || amount < 50) { // Min 0.50 EUR
             throw error(400, 'Montant invalide fourni (min 0.50 ‚Ç¨).');
        }

        // --- Validate Payment Method Type ---
        const allowedTypes = ['card', 'sepa_debit']; // Explicitly define allowed types for intent creation
        if (!paymentMethodType || !allowedTypes.includes(paymentMethodType)) {
            // Note: Apple/Google Pay will use the 'card' type intent.
            // We only need specific types for methods requiring them, like SEPA.
            // If the request is for wallets, the frontend should request 'card'.
             console.warn(`Invalid or missing paymentMethodType requested: ${paymentMethodType}. Defaulting to 'card' for wallets or unspecified.`);
             // We will let 'card' be the default if not 'sepa_debit' for simplicity now.
             // More robust validation could reject unknown types.
        }

        const intentParams = {
            amount: amount,
            currency: 'eur',
            description: `Don ponctuel (${paymentMethodType}) pour Veille M√©dicale`,
            // --- Set payment_method_types based on request ---
            payment_method_types: [paymentMethodType], // e.g., ['card'] or ['sepa_debit']
             // If using SEPA, you might need setup_future_usage for mandates
            ...(paymentMethodType === 'sepa_debit' && { setup_future_usage: 'off_session' }),
            metadata: {
                user_id: user?.id || null,
                donation_type: 'one-time',
                intended_method: paymentMethodType // Store intended method
            },
        };

        // --- Create the specific Payment Intent ---
        console.log(`Creating PaymentIntent for amount: ${amount} cents, type: ${paymentMethodType}`);
        const paymentIntent = await stripe.paymentIntents.create(intentParams);

        if (!paymentIntent.client_secret) {
             throw new Error('Could not retrieve client secret from Payment Intent.');
        }

        console.log(`PaymentIntent created successfully: ${paymentIntent.id} (Type: ${paymentMethodType})`);
        return json({
            clientSecret: paymentIntent.client_secret
        });

    } catch (err: unknown) {
        console.error("Stripe API Error:", err);
        if (err instanceof Stripe.errors.StripeError) {
             throw error(err.statusCode || 500, `Stripe Error: ${err.message}`);
        } else if (err && typeof err === 'object' && 'status' in err && err.status === 400) {
             throw error(400, (err as any).body?.message || 'Bad Request');
        } else {
             throw error(500, `Error creating payment intent: ${err instanceof Error ? err.message : 'Unknown server error'}`);
        }
    }
}
--- End of File ---

--- File Path ---
frontend/src/routes/api/dismiss-feature-notice/+server.ts

// src/routes/api/dismiss-feature-notice/+server.ts
import { error } from '@sveltejs/kit';
import type { RequestHandler } from './$types';

export const POST: RequestHandler = async ({ locals: { supabase, safeGetSession } }) => {
	const { session } = await safeGetSession();

	if (!session?.user) {
		console.error("API Error: Unauthorized attempt to dismiss notice.");
		throw error(401, 'Authentication required');
	}

	const userId = session.user.id;
	console.log(`API: User ${userId} dismissing feature notice.`);

	try {
		const { error: updateError } = await supabase
			.from('user_profiles')
			.update({ has_seen_tooltip: true, tooltip_time: new Date().toISOString() })
			.eq('id', userId);

		if (updateError) {
			console.error(`API DB Error: Failed to update has_seen_tooltip and tooltip_time for user ${userId}`, updateError);
			throw error(500, 'Database error updating profile');
		}

		console.log(`API: Successfully marked notice as seen for user ${userId}.`);
		// Return 204 No Content for successful updates with no body
		return new Response(null, { status: 204 });

	} catch (err) {
		// Catch potential errors from the update or thrown errors
		console.error(`API Exception: Error dismissing notice for user ${userId}`, err);
		if (err instanceof Error && 'status' in err) {
			// Re-throw SvelteKit errors
			throw err;
		}
		// Throw generic server error
		throw error(500, 'Failed to dismiss notice');
	}
};
--- End of File ---

--- File Path ---
frontend/src/routes/api/committee-application/+server.ts

import { error, json } from '@sveltejs/kit';
import type { RequestEvent } from './$types';

export async function POST({ request, locals: { supabase, safeGetSession } }: RequestEvent) {
    // Get user session - useful if you want to link application to a user later
    // const { user } = await safeGetSession();
    // We don't strictly need the user to be logged in based on the current RLS policy

    let formData;
    try {
        formData = await request.json();
        if (typeof formData !== 'object' || formData === null) {
            throw new Error('Invalid data format');
        }
        // Basic validation for required fields
        if (!formData.prenom || !formData.nom || !formData.statut || !formData.specialite || !formData.centre) {
             throw error(400, 'Missing required fields in application data.');
        }

    } catch (e: any) {
        console.error("Error parsing application JSON:", e);
        if (e.status === 400) throw e; // Re-throw specific validation error
        throw error(400, 'Bad request: Could not parse application data.');
    }

    // Prepare data for insertion (matching table columns)
    const dataToInsert = {
        // user_id: user?.id || null, // Uncomment if you want to link to logged-in user
        first_name: formData.prenom,
        last_name: formData.nom,
        status: formData.statut,
        specialty: formData.specialite,
        sub_specialty: formData.surSpecialite || null, // Handle optional field
        practice_center: formData.centre,
        // created_at is handled by the database default
    };

    try {
        const { error: insertError } = await supabase
            .from('committee_applications')
            .insert(dataToInsert);

        if (insertError) {
            console.error('Supabase insert error:', insertError);
            // Provide a more generic error to the client
            throw error(500, `Database error occurred.`);
        }

        console.log(`Committee application submitted successfully: ${formData.prenom} ${formData.nom}`);
        // Customize success message
        return json({ message: 'Votre candidature a bien √©t√© envoy√©e. Merci !' }, { status: 201 }); // 201 Created

    } catch (err: any) {
        // Catch errors thrown from validation or Supabase
        console.error('Error submitting committee application:', err);
        if (err.status) {
            // Re-throw SvelteKit errors (like the 400 or 500)
            throw err;
        }
        // Generic fallback for unexpected errors
        throw error(500, err.message || 'An unexpected error occurred while saving the application.');
    }
}
--- End of File ---

--- File Path ---
frontend/src/routes/account/+page.svelte

<!-- /routes/account/+page.svelte -->
<script lang="ts">
	import SubscriptionStatus from '$lib/components/SubscriptionStatus.svelte';
	import { i18n } from '$lib/i18n';
	import userProfileStore from '$lib/stores/user';
	import { supabase } from '$lib/supabase';
	import { AlertCircle, Check, ChevronDown, ChevronUp, Loader2 } from 'lucide-svelte';

	let { data } = $props();

    // --- Reactive State ---
    // Profile fields
	let firstName = $state(data.userProfile?.first_name || '');
	let lastName = $state(data.userProfile?.last_name || '');
	let status = $state(data.userProfile?.status || '');
	let specialty = $state(data.userProfile?.specialty || '');
	let dateOfBirth = $state(data.userProfile?.date_of_birth || '');
    let activeSubscription = $state(data.activeSubscription || null);

    // Subscription state
    let currentSubscriptions = $state(new Set<string>(data.userSubscriptions || []));
    let selectedGrades = $state(new Set<string>(data.userGradePreferences || ['A', 'B', 'C'])); // **** NEW: Initialize Set from server data, default to A,B,C if empty ****

    // UI State
	let isLoading = $state(false);
    let saveSuccess = $state(false);
    let saveError = $state('');
    let openDisciplines = $state(new Set<number>());
    let showGradeInfo = $state(false); // Keep grade info panel logic

    // Data from load function
    const allDisciplines = $derived(data.allDisciplines || []);
    const statusOptions = $derived(data.statusOptions || []);
    const notificationOptions = $derived(data.notificationOptions || []);
    // REMOVED minimumGradeOptions = $derived(...)

    // Update the trigger content to always show the selected option's label
    const triggerNotificationContent = $derived(
        notificationOptions.find(o => o.value === selectedNotificationFreq)?.label || 'Choisir une fr√©quence'
    );

    let selectedNotificationFreq = $state(
        notificationOptions.some(opt => opt.value === data.userProfile?.notification_frequency)
            ? data.userProfile?.notification_frequency
            : 'tous_les_jours'
    );

	const triggerStatusContent = $derived(
		statusOptions.find(o => o === status) ?? 'Choisissez un statut'
	);

    // --- Grade Info Data (unchanged) ---
    const gradeInfo = [
      { grade: 'A', label: 'Preuve scientifique √©tablie', niveau: 'Niveau 1', details: ['essais comparatifs randomis√©s de forte puissance', 'm√©ta-analyse d\'essais comparatifs randomis√©s', 'analyse de d√©cision fond√©e sur des √©tudes bien men√©es.'] },
      { grade: 'B', label: 'Pr√©somption scientifique', niveau: 'Niveau 2', details: ['essais comparatifs randomis√©s de faible puissance', '√©tudes comparatives non randomis√©es bien men√©es', '√©tudes de cohortes.'] },
      { grade: 'C', label: 'Faible niveau de preuve scientifique', niveau: 'Niveau 3 et 4', details: ['√©tudes cas-t√©moins', '√©tudes comparatives comportant des biais importants', '√©tudes r√©trospectives', 's√©ries de cas', '√©tudes √©pid√©miologiques descriptives (transversale, longitudinale).'] }
    ];

    // --- Effects (unchanged, except for initial openDisciplines which is now empty as it's handled by toggles) ---
    $effect(() => {
        if (saveSuccess || saveError) {
            const timer = setTimeout(() => {
                saveSuccess = false;
                saveError = '';
            }, 4000);
            return () => clearTimeout(timer);
        }
    });

    // --- Functions ---
    function toggleDisciplineSection(disciplineId: number) {
        // Logic remains the same
        const newSet = new Set(openDisciplines);
        if (newSet.has(disciplineId)) { newSet.delete(disciplineId); } else { newSet.add(disciplineId); }
        openDisciplines = newSet;
    }
    function handleMainDisciplineChange(disciplineId: number, isChecked: boolean) {
        // Logic remains the same
        const key = `d:${disciplineId}`;
        const newSubs = new Set(currentSubscriptions);
        const newOpen = new Set(openDisciplines);
        const discipline = allDisciplines.find(d => d.id === disciplineId);
        if (isChecked) {
            newSubs.add(key);
            discipline?.sub_disciplines.forEach(sub => { newSubs.add(`s:${sub.id}`); });
            newOpen.add(disciplineId);
        } else {
            newSubs.delete(key);
            discipline?.sub_disciplines.forEach(sub => { newSubs.delete(`s:${sub.id}`); });
            newOpen.delete(disciplineId);
        }
        currentSubscriptions = newSubs;
        openDisciplines = newOpen;
    }
    function handleSubDisciplineChange(subDisciplineId: number, disciplineId: number, isChecked: boolean) {
        // Logic remains the same
        const key = `s:${subDisciplineId}`;
        const mainKey = `d:${disciplineId}`;
        const newSubs = new Set(currentSubscriptions);
        if (isChecked) {
            newSubs.add(key);
            if (!newSubs.has(mainKey)) { newSubs.add(mainKey); }
        } else {
            newSubs.delete(key);
        }
        currentSubscriptions = newSubs;
    }

    // **** NEW: Handle grade checkbox changes ****
    function handleGradeChange(grade: 'A' | 'B' | 'C', isChecked: boolean) {
        const newGrades = new Set(selectedGrades);
        if (isChecked) {
            newGrades.add(grade);
        } else {
            newGrades.delete(grade); // Allow unchecking all for now
        }
        selectedGrades = newGrades;
        console.log("Selected grades:", Array.from(selectedGrades));
    }
    // **** END NEW ****


	async function handleSubmit() {
		if (isLoading) return;
		isLoading = true;
        saveSuccess = false;
        saveError = '';

        const profileUpdates = {
            first_name: firstName,
            last_name: lastName,
            status: status || null,
            specialty: specialty || null,
            notification_frequency: selectedNotificationFreq,
            date_of_birth: dateOfBirth || null,
            // REMOVED minimum_grade_notification
        };

        // Discipline subscription payload logic remains the same
        const subscriptionsPayload: { discipline_id: number; sub_discipline_id: number | null }[] = [];
        const disciplineIds = new Set();
        currentSubscriptions.forEach(key => {
            if (key.startsWith('d:')) { disciplineIds.add(parseInt(key.split(':')[1], 10)); }
            else if (key.startsWith('s:')) {
                const subId = parseInt(key.split(':')[1], 10);
                for (const disc of allDisciplines) {
                    if (disc.sub_disciplines?.some(s => s.id === subId)) {
                        subscriptionsPayload.push({ discipline_id: disc.id, sub_discipline_id: subId });
                        disciplineIds.add(disc.id); // Ensure parent is tracked
                        break;
                    }
                }
            }
        });
        // Add main discipline entries ONLY if no subs are selected for that main discipline
        disciplineIds.forEach(discId => {
            if (!isNaN(discId)) {
                 const hasSelectedSub = subscriptionsPayload.some(p => p.discipline_id === discId && p.sub_discipline_id !== null);
                 if (!hasSelectedSub) {
                     subscriptionsPayload.push({ discipline_id: discId, sub_discipline_id: null });
                 }
            }
        });


        // **** NEW: Prepare grade preferences payload ****
        const gradePreferencesPayload = Array.from(selectedGrades);
        // **** END NEW ****

        try {
            // IMPORTANT: Update the API endpoint to accept gradePreferencesPayload
            const response = await fetch('/api/update-profile-and-subscriptions', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    profile: profileUpdates,
                    subscriptions: subscriptionsPayload,
                    gradePreferences: gradePreferencesPayload // **** NEW ****
                })
            });
            const result = await response.json();
            if (!response.ok) throw new Error(result.message || `HTTP Error ${response.status}`);

            console.log("Update successful:", result);
            userProfileStore.update(current => {
                if (current) {
                    return { ...current, ...profileUpdates };
                }
                return null;
            });
            saveSuccess = true;
        } catch (err: any) {
            console.error('Error updating profile/subscriptions/grades:', err);
            saveError = err.message || 'Erreur lors de la mise √† jour.';
        } finally {
            isLoading = false;
        }
	}

	async function handleLogout() {
		// Logic remains the same
		try {
			isLoading = true; saveError = '';
			const { error } = await supabase.auth.signOut();
			if (error) throw error;
			userProfileStore.set(null);
			window.location.href = '/login';
		} catch (error: any) {
			console.error('Erreur lors de la d√©connexion :', error);
            saveError = `Erreur de d√©connexion: ${error.message}`;
            isLoading = false;
		}
	}
</script>

<div class="min-h-screen bg-black px-4 py-12 text-white pt-20 md:pt-24">
	<div class="mx-auto max-w-3xl">
        <SubscriptionStatus subscription={activeSubscription} />
		<h1 class="mb-8 text-3xl md:text-4xl font-bold text-white">Mon compte</h1>

		{#if data.error}
			<p class="mb-6 rounded border border-red-700 bg-red-900/30 p-4 text-red-300">{data.error}</p>
		{:else if !data.userProfile}
            <p class="mb-6 rounded border border-yellow-700 bg-yellow-900/30 p-4 text-yellow-300">Chargement du profil...</p>
        {:else}
			<form on:submit|preventDefault={handleSubmit} class="space-y-8 rounded-lg bg-gray-800 p-6 md:p-8 shadow-lg">

				<!-- Vos Informations Section (No changes needed here) -->
				<div>
                    <h2 class="text-xl md:text-2xl font-semibold text-white border-b border-gray-700 pb-3 mb-6">Vos informations</h2>
                    <div class="space-y-6">
                        <!-- Fields for firstName, lastName, status, specialty, dateOfBirth remain the same -->
                        <div>
                            <label for="firstName" class="mb-2 block text-sm font-medium text-gray-300">{$i18n.login.firstName}</label>
                            <input id="firstName" type="text" bind:value={firstName} class="mt-1 block w-full rounded-lg border border-gray-700 bg-gray-700 px-4 py-3 text-white transition-all duration-200 focus:border-teal-500 focus:ring focus:ring-teal-600/50" required />
                        </div>
                        <div>
                            <label for="lastName" class="mb-2 block text-sm font-medium text-gray-300">{$i18n.login.lastName}</label>
                            <input id="lastName" type="text" bind:value={lastName} class="mt-1 block w-full rounded-lg border border-gray-700 bg-gray-700 px-4 py-3 text-white transition-all duration-200 focus:border-teal-500 focus:ring focus:ring-teal-600/50" required />
                        </div>
                        <div>
                            <label for="status" class="mb-2 block text-sm font-medium text-gray-300">{$i18n.account.status}</label>
                            <select id="status" bind:value={status} class="mt-1 block w-full rounded-lg border border-gray-700 bg-gray-700 px-4 py-3 text-sm text-white transition-all duration-200 focus:border-teal-500 focus:ring focus:ring-teal-600/50 appearance-none">
                                <option value="">-- Choisir --</option>
                                {#each statusOptions as option}<option value={option}>{option}</option>{/each}
                            </select>
                        </div>
                        <div>
                            <label for="specialty" class="mb-2 block text-sm font-medium text-gray-300">{$i18n.account.specialty}</label>
                            <input id="specialty" type="text" bind:value={specialty} class="mt-1 block w-full rounded-lg border border-gray-700 bg-gray-700 px-4 py-3 text-white transition-all duration-200 focus:border-teal-500 focus:ring focus:ring-teal-600/50" placeholder="Ex: M√©decine G√©n√©rale" />
                        </div>
                        <div>
                            <label for="dateOfBirth" class="mb-2 block text-sm font-medium text-gray-300">{$i18n.login.dateOfBirth}</label>
                            <input id="dateOfBirth" type="date" bind:value={dateOfBirth} class="mt-1 block w-full rounded-lg border border-gray-700 bg-gray-700 px-4 py-3 text-white transition-all duration-200 focus:border-teal-500 focus:ring focus:ring-teal-600/50" />
                        </div>
                    </div>
                </div>

				<hr class="border-gray-700" />

                <!-- Vos Pr√©f√©rences Section -->
				<div>
                    <h2 class="text-xl md:text-2xl font-semibold text-white border-b border-gray-700 pb-3 mb-6">Vos pr√©f√©rences de veille</h2>

                    <!-- Notification Frequency (remains the same) -->
                    <div class="mb-8">
                        <label for="notificationFrequency" class="mb-2 block text-sm font-medium text-gray-300">Fr√©quence des notifications</label>
                        <select id="notificationFrequency" bind:value={selectedNotificationFreq} class="mt-1 block w-full rounded-lg border border-gray-700 bg-gray-700 px-4 py-3 text-sm text-white transition-all duration-200 focus:border-teal-500 focus:ring focus:ring-teal-600/50 appearance-none">
                            {#each notificationOptions as option}<option value={option.value}>{option.label}</option>{/each}
                        </select>
                    </div>

                    <!-- **** NEW: Minimum Grade Checkboxes **** -->
                    <div class="mb-8 relative">
                        <label class="mb-2 block text-sm font-medium text-gray-300 flex items-center gap-2">
                            Grades de recommandation souhait√©s
                             <span class="relative cursor-pointer" on:click={() => showGradeInfo = !showGradeInfo} tabindex="0">
                                <span class="inline-flex items-center justify-center w-5 h-5 rounded-full bg-gray-600 text-white text-xs font-bold border border-gray-400 select-none">i</span>
                            </span>
                        </label>
                        <div class="mt-1 space-y-2">
                            {#each ['A', 'B', 'C'] as grade}
                                <label class="flex items-center cursor-pointer select-none text-sm text-gray-200">
                                    <input
                                        type="checkbox"
                                        value={grade}
                                        class="h-4 w-4 rounded border-gray-500 bg-gray-600 text-teal-500 focus:ring-teal-600 focus:ring-offset-gray-800 mr-3 shrink-0"
                                        checked={selectedGrades.has(grade)}
                                        on:change={(e) => handleGradeChange(grade, e.currentTarget.checked)}
                                    />
                                    Grade {grade}
                                </label>
                            {/each}
                        </div>
                         {#if showGradeInfo}
                            <!-- Grade info panel (remains the same) -->
                             <div class="mt-4 w-full overflow-x-auto">
                                <div class="text-center font-bold text-base text-gray-100 mb-3">Niveaux de preuve scientifique</div>
                                <table class="min-w-full text-xs text-left text-gray-200 border border-gray-700 bg-gray-900 rounded-lg">
                                    <thead>
                                        <tr class="bg-gray-800">
                                            <th class="px-4 py-2 border-b border-gray-700 w-1/3 text-center">Grade des recommandations</th>
                                            <th class="px-4 py-2 border-b border-gray-700 text-center">Niveau de preuve scientifique fourni par la litt√©rature</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        {#each gradeInfo as info (info.grade)}
                                            <tr class="align-top">
                                                <td class="px-4 py-2 border-b border-gray-700 border-r border-gray-700 {info.grade === 'C' ? 'rowspan-2' : ''}">
                                                    <span class="font-bold">{info.grade}</span><br />
                                                    <span class="italic">{info.label}</span>
                                                </td>
                                                <td class="px-4 py-2 {info.grade === 'C' ? 'border-b border-gray-700' : 'border-b-0'}">
                                                    <span class="font-bold">{info.niveau}</span><br />
                                                    <ul class="list-disc list-inside ml-4">
                                                        {#each info.details as detail}<li>{detail}</li>{/each}
                                                    </ul>
                                                </td>
                                            </tr>
                                        {/each}
                                    </tbody>
                                </table>
                            </div>
                        {/if}
                    </div>
                    <!-- **** END NEW **** -->

                    <!-- Discipline/Sub-discipline Subscriptions (No UI changes needed here, logic handled in handlers) -->
                    <div>
                         <label class="mb-4 block text-sm font-medium text-gray-300">Sp√©cialit√©s et sous-sp√©cialit√©s suivies</label>
                        <div class="space-y-4 max-h-96 overflow-y-auto pr-2 scrollbar-thin scrollbar-thumb-teal-600 scrollbar-track-gray-700 rounded-md border border-gray-600 p-4 bg-gray-700/50">
                             {#each allDisciplines as discipline (discipline.id)}
                                <div class="discipline-group">
                                    <div class="flex items-center justify-between">
                                        <label class="flex items-center cursor-pointer select-none py-1 flex-grow">
                                            <input type="checkbox" class="h-4 w-4 rounded border-gray-500 bg-gray-600 text-teal-500 focus:ring-teal-600 focus:ring-offset-gray-800 mr-3 shrink-0"
                                                checked={currentSubscriptions.has(`d:${discipline.id}`)}
                                                on:change={(e) => handleMainDisciplineChange(discipline.id, e.currentTarget.checked)} />
                                            <span class="font-medium text-gray-100">{discipline.name}</span>
                                        </label>
                                        {#if discipline.sub_disciplines && discipline.sub_disciplines.length > 0}
                                             <button type="button" on:click={() => toggleDisciplineSection(discipline.id)} class="text-gray-400 hover:text-gray-200 p-1 -mr-1 rounded focus:outline-none focus:ring-2 focus:ring-teal-500 focus:ring-offset-1 focus:ring-offset-gray-800 shrink-0 ml-2">
                                                 {#if openDisciplines.has(discipline.id)} <ChevronUp class="h-4 w-4" /> {:else} <ChevronDown class="h-4 w-4" /> {/if}
                                             </button>
                                        {/if}
                                    </div>
                                    {#if openDisciplines.has(discipline.id) && discipline.sub_disciplines && discipline.sub_disciplines.length > 0}
                                        <div class="mt-2 pl-6 border-l border-gray-600 ml-2 space-y-1.5">
                                             {#each discipline.sub_disciplines as sub (sub.id)}
                                                  <label class="flex items-center cursor-pointer select-none py-0.5">
                                                      <input type="checkbox" class="h-4 w-4 rounded border-gray-500 bg-gray-600 text-teal-500 focus:ring-teal-600 focus:ring-offset-gray-800 mr-3 shrink-0"
                                                          checked={currentSubscriptions.has(`s:${sub.id}`)}
                                                          on:change={(e) => handleSubDisciplineChange(sub.id, discipline.id, e.currentTarget.checked)} />
                                                      <span class="text-sm text-gray-300 hover:text-gray-100">{sub.name}</span>
                                                  </label>
                                             {/each}
                                        </div>
                                    {/if}
                                </div>
                             {:else} <p class="text-gray-500 italic">Aucune discipline disponible.</p> {/each}
                        </div>
                         <p class="text-xs text-gray-400 mt-3">Cocher une sp√©cialit√© s√©lectionne automatiquement toutes ses sous-sp√©cialit√©s.</p>
                    </div>
                </div>

				<!-- Save Button & Messages (remains the same) -->
				<div class="pt-5">
                     {#if saveSuccess}
                        <div role="alert" class="mb-4 flex items-center gap-2 rounded-md bg-green-800/30 border border-green-600 p-3 text-sm text-green-300">
                            <Check class="h-4 w-4 flex-shrink-0" />
                            Mise √† jour r√©ussie !
                        </div>
                     {/if}
                     {#if saveError}
                         <div role="alert" class="mb-4 flex items-center gap-2 rounded-md bg-red-900/30 border border-red-700 p-3 text-sm text-red-300">
                            <AlertCircle class="h-4 w-4 flex-shrink-0" />
                            {saveError}
                        </div>
                     {/if}
					<button type="submit" disabled={isLoading} class="flex w-full items-center justify-center rounded-lg bg-orange-600 px-8 py-3 font-semibold text-white shadow-md transition-all duration-300 hover:bg-orange-700 focus:outline-none focus:ring-2 focus:ring-orange-500 focus:ring-offset-2 focus:ring-offset-gray-800 disabled:cursor-not-allowed disabled:opacity-60">
						{#if isLoading} <Loader2 class="mr-2 h-5 w-5 animate-spin" /> <span>Enregistrement...</span>
						{:else} Enregistrer les modifications {/if}
					</button>
				</div>
			</form>

            <hr class="my-10 border-gray-700" />

			<!-- Logout Section (remains the same) -->
			<div class="text-left">
				<h2 class="mb-4 text-xl md:text-2xl font-semibold text-white">Se d√©connecter</h2>
				<button on:click={handleLogout} disabled={isLoading} class="rounded-lg bg-gray-600 px-6 py-2.5 text-sm font-medium text-white transition-colors duration-200 hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-red-500 focus:ring-offset-2 focus:ring-offset-gray-800 disabled:cursor-not-allowed disabled:opacity-60">
					D√©connexion
				</button>
			</div>
		{/if}
	</div>
</div>

<style>
	/* Styles remain the same */
	.scrollbar-thin { scrollbar-width: thin; scrollbar-color: #0d9488 #374151; }
	.scrollbar-thin::-webkit-scrollbar { width: 6px; height: 6px; }
	.scrollbar-thin::-webkit-scrollbar-track { background: #374151; border-radius: 10px; }
	.scrollbar-thin::-webkit-scrollbar-thumb { background-color: #0d9488; border-radius: 6px; border: 1px solid #374151; }
    .scrollbar-thin::-webkit-scrollbar-thumb:hover { background-color: #0f766e; }
    input[type="date"] { color-scheme: dark; }
    input[type="date"]::-webkit-calendar-picker-indicator { filter: invert(0.8); }
    input[type="checkbox"] { color-scheme: dark; }
    label { margin-bottom: 0.5rem; display: block; font-size: 0.875rem; font-weight: 500; color: #D1D5DB; }
     input[type="text"], input[type="date"], select { margin-top: 0.25rem; display: block; width: 100%; border-radius: 0.5rem; border: 1px solid #4B5563; background-color: #374151; padding: 0.75rem 1rem; color: #FFFFFF; transition: all 0.2s ease-in-out; font-size: 0.875rem; line-height: 1.25rem; height: 3rem; }
     input[type="text"]:focus, input[type="date"]:focus, select:focus { border-color: #14B8A6; outline: 2px solid transparent; outline-offset: 2px; --tw-ring-offset-shadow: var(--tw-ring-inset) 0 0 0 var(--tw-ring-offset-width) var(--tw-ring-offset-color); --tw-ring-shadow: var(--tw-ring-inset) 0 0 0 calc(1px + var(--tw-ring-offset-width)) var(--tw-ring-color); box-shadow: var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow, 0 0 #0000); --tw-ring-color: rgba(20, 184, 166, 0.5); }
    select { background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 20 20'%3e%3cpath stroke='%236b7280' stroke-linecap='round' stroke-linejoin='round' stroke-width='1.5' d='M6 8l4 4 4-4'/%3e%3c/svg%3e"); background-position: right 0.5rem center; background-repeat: no-repeat; background-size: 1.5em 1.5em; padding-right: 2.5rem; -webkit-appearance: none; -moz-appearance: none; appearance: none; }
    form > div:first-child > div:not(.space-y-6) { display: block; }
    form > div:first-child > div > div { margin-bottom: 1.5rem; }
</style>
--- End of File ---

--- File Path ---
frontend/src/routes/account/+page.server.js

// /routes/account/+page.server.js
import { checkUserSubscription } from '$lib/utils/subscriptionUtils';
import { error, redirect } from '@sveltejs/kit';

export async function load({ locals }) {
	const { session, user } = await locals.safeGetSession();

	if (!session || !user) {
		console.log('No session/user in account load, redirecting');
		throw redirect(302, '/login?redirect=/account');
	}

    const { activeSubscription, error: subError } = await checkUserSubscription(locals.supabase, user?.id, true);

	if (subError) {
		console.error('Error fetching subscription:', subError);
		throw error(500, `Erreur serveur: ${subError.message}`);
	}

	try {
		// 1. Fetch user profile (excluding the old 'minimum_grade_notification')
		const { data: userProfile, error: profileError } = await locals.supabase
			.from('user_profiles')
			.select('id, first_name, last_name, email, notification_frequency, date_of_birth, status, specialty, has_seen_tooltip, feedback_modal')
			.eq('id', user.id)
			.single();

		if (profileError) throw profileError;
		if (!userProfile) throw error(404, 'Profil utilisateur non trouv√©.');

		// 2. Fetch all disciplines with their sub-disciplines (remains the same)
		const { data: allDisciplinesData, error: disciplinesError } = await locals.supabase
			.from('disciplines')
			.select(`
                id,
                name,
                sub_disciplines ( id, name )
            `)
			.order('name', { ascending: true })
			.order('name', { referencedTable: 'sub_disciplines', ascending: true });

		if (disciplinesError) throw disciplinesError;
		const allDisciplines = allDisciplinesData || [];

		// 3. Fetch user's current subscriptions (main/sub disciplines - remains the same)
		const { data: userSubsData, error: subsError } = await locals.supabase
			.from('user_subscriptions')
			.select('discipline_id, sub_discipline_id')
			.eq('user_id', user.id);

		if (subsError) throw subsError;
		const userSubscriptions = new Set();
		(userSubsData || []).forEach(sub => {
			if (sub.sub_discipline_id) {
				userSubscriptions.add(`s:${sub.sub_discipline_id}`);
			} else {
				userSubscriptions.add(`d:${sub.discipline_id}`);
			}
		});

        // **** NEW: Fetch user's selected grades ****
        const { data: userGradesData, error: gradesError } = await locals.supabase
            .from('user_grade_preferences')
            .select('grade')
            .eq('user_id', user.id);

        if (gradesError) throw gradesError;
        const userGradePreferences = (userGradesData || []).map(g => g.grade); // -> ['A', 'C'] etc.
        // **** END NEW ****

		// 4. Get status options (remains the same)
        const statusOptions = [
             "Pr", "Dr", "Interne", "√âtudiant", "M√©decine", "Professeur de m√©decine",
             "Docteur en m√©decine", "Interne en m√©decine", "Etudiant en m√©decine",
             "Di√©t√©ticien(ne)-nutritionniste", "Infirmier(√®re)", "Kin√©sith√©rapeute",
             "Pharmaciens", "Professions dentaires", "Psychologue", "Sage-femme", "Autres"
        ];
        const notificationOptions = [
            { value: 'tous_les_jours', label: 'Tous les jours' },
            { value: 'tous_les_2_jours', label: 'Tous les 2 jours' },
            { value: 'tous_les_3_jours', label: 'Tous les 3 jours' },
            { value: '1_fois_par_semaine', label: '1 fois par semaine' },
            { value: 'tous_les_15_jours', label: 'Tous les 15 jours' },
            { value: '1_fois_par_mois', label: '1 fois par mois' }
        ];
		// REMOVED minimumGradeOptions

		return {
			activeSubscription,
            userProfile,
            allDisciplines,
            userSubscriptions: Array.from(userSubscriptions),
            userGradePreferences,
            statusOptions,
            notificationOptions,
			session,
			user,
		};

	} catch (err) {
		console.error('Error loading account data:', err);
		if (err && typeof err === 'object' && 'message' in err) {
            throw error(500, `Erreur serveur: ${err.message}`);
        }
        if (err && typeof err === 'object' && 'status' in err) {
             throw err;
        }
		throw error(500, 'Erreur lors du chargement des donn√©es du compte.');
	}
}

export const actions = undefined; // Keep actions undefined
--- End of File ---

--- File Path ---
frontend/src/routes/login/+page.server.ts

// /routes/login/+page.server.ts
import type { Actions } from '@sveltejs/kit';
import { fail, redirect } from '@sveltejs/kit';

export const actions: Actions = {
	default: async ({ request, locals: { supabase } }) => {
		console.log('Login action started');

		const formData = await request.formData();
		const email = formData.get('email')?.toString();
		const password = formData.get('password')?.toString();

		// Validate required fields
		if (!email || !password) {
			console.log('Validation failed: Missing email or password');
			return fail(400, { error: 'Veuillez remplir tous les champs.' });
		}

		// Connexion via Supabase Auth
		console.log('Attempting Supabase signInWithPassword');
		const { data: signInData, error: signInError } = await supabase.auth.signInWithPassword({
			email,
			password
		});

		if (signInError) {
			console.error('SignIn error:', JSON.stringify(signInError, null, 2));
			return fail(400, { error: signInError.message });
		}

		// V√©rifier que l'utilisateur est connect√©
		if (!signInData.user) {
			console.error('No user returned by signIn');
			return fail(500, { error: 'Erreur lors de la connexion de l‚Äôutilisateur' });
		}

		// R√©cup√©rer le profil utilisateur
		console.log('Fetching user profile');
		const { data: profileData, error: profileError } = await supabase
			.from('user_profiles')
			.select('*')
			.eq('id', signInData.user.id)
			.single();

		if (profileError) {
			console.error('Profile fetch error:', JSON.stringify(profileError, null, 2));
			return fail(500, { error: profileError.message });
		}

		console.log('User logged in successfully:', JSON.stringify(profileData, null, 2));
		console.log('Throwing redirect to /ma-veille');
		throw redirect(302, '/ma-veille');
	}
};

--- End of File ---

--- File Path ---
frontend/src/routes/login/+page.svelte

<!-- /routes/login/+page.svelte -->
<script>
	import { i18n } from '$lib/i18n';
	import LoginForm from '$lib/components/auth/LoginForm.svelte';
	import MessageDisplay from '$lib/components/auth/MessageDisplay.svelte';
  
	let email = '';
	let password = '';
	let errorMessage = '';
	let successMessage = '';
	let isLoading = false;
  </script>
  
  <main class="flex min-h-screen items-center justify-center bg-black px-4 py-12">
	<div class="w-full max-w-md rounded-2xl bg-white p-8 shadow-2xl transition-all duration-300 hover:shadow-3xl">
	  <h1 class="mb-6 text-center text-3xl font-bold tracking-tight capitalize">
		{$i18n.login.loginTitle}
	  </h1>
  
	  <MessageDisplay bind:errorMessage bind:successMessage />
	  {#if isLoading}
		<div class="flex items-center justify-center space-x-2 rounded-lg bg-blue-50 p-4 mb-4">
		  <div class="h-5 w-5 animate-spin rounded-full border-4 border-t-blue-500"></div>
		  <p class="text-blue-600 font-medium">{$i18n.login.loggingIn}</p>
		</div>
	  {/if}
  
	  <form
		method="POST"
		action="/login"
		class="space-y-6"
	  >
		<LoginForm
		  bind:email
		  bind:password
		  bind:errorMessage
		  bind:successMessage
		  bind:isLoading
		/>
	  </form>
	  <a href="/signup" class="hover:underline">
		<p class="text-center text-sm text-gray-500 mt-4">
		  {$i18n.login.needAccount}
		</p>
	  </a>
	</div>
  </main>
--- End of File ---

--- File Path ---
frontend/src/routes/+layout.svelte

<script lang="ts">
	import { invalidate } from '$app/navigation';
	import { navigating } from '$app/stores';
	import FeedbackModalChecker from '$lib/components/FeedbackModalChecker.svelte';
	import Footer from '$lib/components/Footer.svelte';
	import Header from '$lib/components/Header.svelte';
	import { supabaseStore } from '$lib/stores/supabase';
	import userProfile from '$lib/stores/user';
	import NProgress from 'nprogress';
	import 'nprogress/nprogress.css';
	import { onMount } from 'svelte';
	import '../app.css';

	NProgress.configure({ showSpinner: false });

	const getUserProfile = async function (supabase: any, userId: string) {
		try {
			if (!userId) {
				return null;
			}
			const { data, error } = await supabase
				.from('user_profiles')
				.select('*')
				.eq('id', userId)
				.single();
			if (error) throw error;
			userProfile.set(data);
			return data;
		} catch (error) {
			console.error('Error fetching user profile:', error);
			return null;
		}
	};

	let { data, children } = $props();
	let { session, supabase, user } = $derived(data);

	supabaseStore.set(supabase);

	$effect(() => {
		if (user?.id) {
			if (!$userProfile || $userProfile?.id !== user.id) {
				getUserProfile(supabase, user.id).then((profile) => {
					if (!profile) userProfile.set({ id: user.id, ...user }); // Fallback avec les donn√©es de l'utilisateur
				});
			}
		} else {
			userProfile.set(null);
		}
	});

	onMount(() => {
		// console.log('User Profile on mount:', $userProfile);

		const { data: subscription } = supabase.auth.onAuthStateChange((event, newSession) => {
			// console.log('Auth state changed:', event, newSession);
			if (event === 'SIGNED_OUT') {
				userProfile.set(null);
				invalidate('supabase:auth');
			} else if (newSession?.expires_at !== session?.expires_at) {
				invalidate('supabase:auth');
			}
		});

		return () => subscription.subscription.unsubscribe();
	});

	$effect(() => {
		if ($navigating) {
			NProgress.start();
		} else {
			NProgress.done();
		}
	});
</script>

<svelte:head>
	<link rel="stylesheet" href="/fonts.css" />
</svelte:head>

<div class="font-display relative flex flex-col">
	<Header />
	<div class="mt-[15%] sm:mt-[3.5%]">
		{@render children()}
	</div>
	<Footer />
</div>

<FeedbackModalChecker />

<style>
	.app {
		min-height: 100vh;
	}
	/* Personnaliser NProgress pour une barre bleue comme YouTube */
	#nprogress .bar {
		background: #1a73e8; /* Couleur bleue */
		height: 4px;
	}
	#nprogress .peg {
		box-shadow:
			0 0 10px #1a73e8,
			0 0 5px #1a73e8;
	}
</style>

--- End of File ---

